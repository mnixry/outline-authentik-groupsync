# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.8.3
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from authentik_openapi.api.flows_api import FlowsApi


class TestFlowsApi(unittest.IsolatedAsyncioTestCase):
    """FlowsApi unit test stubs"""

    async def asyncSetUp(self) -> None:
        self.api = FlowsApi()

    async def asyncTearDown(self) -> None:
        pass

    async def test_flows_bindings_create(self) -> None:
        """Test case for flows_bindings_create

        """
        pass

    async def test_flows_bindings_destroy(self) -> None:
        """Test case for flows_bindings_destroy

        """
        pass

    async def test_flows_bindings_list(self) -> None:
        """Test case for flows_bindings_list

        """
        pass

    async def test_flows_bindings_partial_update(self) -> None:
        """Test case for flows_bindings_partial_update

        """
        pass

    async def test_flows_bindings_retrieve(self) -> None:
        """Test case for flows_bindings_retrieve

        """
        pass

    async def test_flows_bindings_update(self) -> None:
        """Test case for flows_bindings_update

        """
        pass

    async def test_flows_bindings_used_by_list(self) -> None:
        """Test case for flows_bindings_used_by_list

        """
        pass

    async def test_flows_executor_get(self) -> None:
        """Test case for flows_executor_get

        """
        pass

    async def test_flows_executor_solve(self) -> None:
        """Test case for flows_executor_solve

        """
        pass

    async def test_flows_inspector_get(self) -> None:
        """Test case for flows_inspector_get

        """
        pass

    async def test_flows_instances_cache_clear_create(self) -> None:
        """Test case for flows_instances_cache_clear_create

        """
        pass

    async def test_flows_instances_cache_info_retrieve(self) -> None:
        """Test case for flows_instances_cache_info_retrieve

        """
        pass

    async def test_flows_instances_create(self) -> None:
        """Test case for flows_instances_create

        """
        pass

    async def test_flows_instances_destroy(self) -> None:
        """Test case for flows_instances_destroy

        """
        pass

    async def test_flows_instances_diagram_retrieve(self) -> None:
        """Test case for flows_instances_diagram_retrieve

        """
        pass

    async def test_flows_instances_execute_retrieve(self) -> None:
        """Test case for flows_instances_execute_retrieve

        """
        pass

    async def test_flows_instances_export_retrieve(self) -> None:
        """Test case for flows_instances_export_retrieve

        """
        pass

    async def test_flows_instances_import_create(self) -> None:
        """Test case for flows_instances_import_create

        """
        pass

    async def test_flows_instances_list(self) -> None:
        """Test case for flows_instances_list

        """
        pass

    async def test_flows_instances_partial_update(self) -> None:
        """Test case for flows_instances_partial_update

        """
        pass

    async def test_flows_instances_retrieve(self) -> None:
        """Test case for flows_instances_retrieve

        """
        pass

    async def test_flows_instances_set_background_create(self) -> None:
        """Test case for flows_instances_set_background_create

        """
        pass

    async def test_flows_instances_set_background_url_create(self) -> None:
        """Test case for flows_instances_set_background_url_create

        """
        pass

    async def test_flows_instances_update(self) -> None:
        """Test case for flows_instances_update

        """
        pass

    async def test_flows_instances_used_by_list(self) -> None:
        """Test case for flows_instances_used_by_list

        """
        pass


if __name__ == '__main__':
    unittest.main()
