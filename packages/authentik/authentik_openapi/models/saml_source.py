# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.binding_type_enum import BindingTypeEnum
from authentik_openapi.models.digest_algorithm_enum import DigestAlgorithmEnum
from authentik_openapi.models.group_matching_mode_enum import GroupMatchingModeEnum
from authentik_openapi.models.name_id_policy_enum import NameIdPolicyEnum
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
from authentik_openapi.models.signature_algorithm_enum import SignatureAlgorithmEnum
from authentik_openapi.models.user_matching_mode_enum import UserMatchingModeEnum
import re
from authentik_openapi import util


class SAMLSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, slug: str=None, enabled: bool=None, authentication_flow: str=None, enrollment_flow: str=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, policy_engine_mode: PolicyEngineMode=None, user_matching_mode: UserMatchingModeEnum=None, managed: str=None, user_path_template: str=None, icon: str=None, group_matching_mode: GroupMatchingModeEnum=None, pre_authentication_flow: str=None, issuer: str=None, sso_url: str=None, slo_url: str=None, allow_idp_initiated: bool=None, name_id_policy: NameIdPolicyEnum=None, binding_type: BindingTypeEnum=None, verification_kp: str=None, signing_kp: str=None, digest_algorithm: DigestAlgorithmEnum=None, signature_algorithm: SignatureAlgorithmEnum=None, temporary_user_delete_after: str=None, encryption_kp: str=None):
        """SAMLSource - a model defined in OpenAPI

        :param pk: The pk of this SAMLSource.
        :param name: The name of this SAMLSource.
        :param slug: The slug of this SAMLSource.
        :param enabled: The enabled of this SAMLSource.
        :param authentication_flow: The authentication_flow of this SAMLSource.
        :param enrollment_flow: The enrollment_flow of this SAMLSource.
        :param user_property_mappings: The user_property_mappings of this SAMLSource.
        :param group_property_mappings: The group_property_mappings of this SAMLSource.
        :param component: The component of this SAMLSource.
        :param verbose_name: The verbose_name of this SAMLSource.
        :param verbose_name_plural: The verbose_name_plural of this SAMLSource.
        :param meta_model_name: The meta_model_name of this SAMLSource.
        :param policy_engine_mode: The policy_engine_mode of this SAMLSource.
        :param user_matching_mode: The user_matching_mode of this SAMLSource.
        :param managed: The managed of this SAMLSource.
        :param user_path_template: The user_path_template of this SAMLSource.
        :param icon: The icon of this SAMLSource.
        :param group_matching_mode: The group_matching_mode of this SAMLSource.
        :param pre_authentication_flow: The pre_authentication_flow of this SAMLSource.
        :param issuer: The issuer of this SAMLSource.
        :param sso_url: The sso_url of this SAMLSource.
        :param slo_url: The slo_url of this SAMLSource.
        :param allow_idp_initiated: The allow_idp_initiated of this SAMLSource.
        :param name_id_policy: The name_id_policy of this SAMLSource.
        :param binding_type: The binding_type of this SAMLSource.
        :param verification_kp: The verification_kp of this SAMLSource.
        :param signing_kp: The signing_kp of this SAMLSource.
        :param digest_algorithm: The digest_algorithm of this SAMLSource.
        :param signature_algorithm: The signature_algorithm of this SAMLSource.
        :param temporary_user_delete_after: The temporary_user_delete_after of this SAMLSource.
        :param encryption_kp: The encryption_kp of this SAMLSource.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'slug': str,
            'enabled': bool,
            'authentication_flow': str,
            'enrollment_flow': str,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'policy_engine_mode': PolicyEngineMode,
            'user_matching_mode': UserMatchingModeEnum,
            'managed': str,
            'user_path_template': str,
            'icon': str,
            'group_matching_mode': GroupMatchingModeEnum,
            'pre_authentication_flow': str,
            'issuer': str,
            'sso_url': str,
            'slo_url': str,
            'allow_idp_initiated': bool,
            'name_id_policy': NameIdPolicyEnum,
            'binding_type': BindingTypeEnum,
            'verification_kp': str,
            'signing_kp': str,
            'digest_algorithm': DigestAlgorithmEnum,
            'signature_algorithm': SignatureAlgorithmEnum,
            'temporary_user_delete_after': str,
            'encryption_kp': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'authentication_flow': 'authentication_flow',
            'enrollment_flow': 'enrollment_flow',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'policy_engine_mode': 'policy_engine_mode',
            'user_matching_mode': 'user_matching_mode',
            'managed': 'managed',
            'user_path_template': 'user_path_template',
            'icon': 'icon',
            'group_matching_mode': 'group_matching_mode',
            'pre_authentication_flow': 'pre_authentication_flow',
            'issuer': 'issuer',
            'sso_url': 'sso_url',
            'slo_url': 'slo_url',
            'allow_idp_initiated': 'allow_idp_initiated',
            'name_id_policy': 'name_id_policy',
            'binding_type': 'binding_type',
            'verification_kp': 'verification_kp',
            'signing_kp': 'signing_kp',
            'digest_algorithm': 'digest_algorithm',
            'signature_algorithm': 'signature_algorithm',
            'temporary_user_delete_after': 'temporary_user_delete_after',
            'encryption_kp': 'encryption_kp'
        }

        self._pk = pk
        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._authentication_flow = authentication_flow
        self._enrollment_flow = enrollment_flow
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._policy_engine_mode = policy_engine_mode
        self._user_matching_mode = user_matching_mode
        self._managed = managed
        self._user_path_template = user_path_template
        self._icon = icon
        self._group_matching_mode = group_matching_mode
        self._pre_authentication_flow = pre_authentication_flow
        self._issuer = issuer
        self._sso_url = sso_url
        self._slo_url = slo_url
        self._allow_idp_initiated = allow_idp_initiated
        self._name_id_policy = name_id_policy
        self._binding_type = binding_type
        self._verification_kp = verification_kp
        self._signing_kp = signing_kp
        self._digest_algorithm = digest_algorithm
        self._signature_algorithm = signature_algorithm
        self._temporary_user_delete_after = temporary_user_delete_after
        self._encryption_kp = encryption_kp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SAMLSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SAMLSource of this SAMLSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this SAMLSource.


        :return: The pk of this SAMLSource.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this SAMLSource.


        :param pk: The pk of this SAMLSource.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this SAMLSource.

        Source's display Name.

        :return: The name of this SAMLSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SAMLSource.

        Source's display Name.

        :param name: The name of this SAMLSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SAMLSource.

        Internal source name, used in URLs.

        :return: The slug of this SAMLSource.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SAMLSource.

        Internal source name, used in URLs.

        :param slug: The slug of this SAMLSource.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this SAMLSource.


        :return: The enabled of this SAMLSource.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SAMLSource.


        :param enabled: The enabled of this SAMLSource.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this SAMLSource.

        Flow to use when authenticating existing users.

        :return: The authentication_flow of this SAMLSource.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this SAMLSource.

        Flow to use when authenticating existing users.

        :param authentication_flow: The authentication_flow of this SAMLSource.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this SAMLSource.

        Flow to use when enrolling new users.

        :return: The enrollment_flow of this SAMLSource.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this SAMLSource.

        Flow to use when enrolling new users.

        :param enrollment_flow: The enrollment_flow of this SAMLSource.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this SAMLSource.


        :return: The user_property_mappings of this SAMLSource.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this SAMLSource.


        :param user_property_mappings: The user_property_mappings of this SAMLSource.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this SAMLSource.


        :return: The group_property_mappings of this SAMLSource.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this SAMLSource.


        :param group_property_mappings: The group_property_mappings of this SAMLSource.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def component(self):
        """Gets the component of this SAMLSource.

        Get object component so that we know how to edit the object

        :return: The component of this SAMLSource.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this SAMLSource.

        Get object component so that we know how to edit the object

        :param component: The component of this SAMLSource.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this SAMLSource.

        Return object's verbose_name

        :return: The verbose_name of this SAMLSource.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this SAMLSource.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this SAMLSource.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this SAMLSource.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this SAMLSource.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this SAMLSource.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this SAMLSource.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this SAMLSource.

        Return internal model name

        :return: The meta_model_name of this SAMLSource.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this SAMLSource.

        Return internal model name

        :param meta_model_name: The meta_model_name of this SAMLSource.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this SAMLSource.


        :return: The policy_engine_mode of this SAMLSource.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this SAMLSource.


        :param policy_engine_mode: The policy_engine_mode of this SAMLSource.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def user_matching_mode(self):
        """Gets the user_matching_mode of this SAMLSource.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :return: The user_matching_mode of this SAMLSource.
        :rtype: UserMatchingModeEnum
        """
        return self._user_matching_mode

    @user_matching_mode.setter
    def user_matching_mode(self, user_matching_mode):
        """Sets the user_matching_mode of this SAMLSource.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :param user_matching_mode: The user_matching_mode of this SAMLSource.
        :type user_matching_mode: UserMatchingModeEnum
        """

        self._user_matching_mode = user_matching_mode

    @property
    def managed(self):
        """Gets the managed of this SAMLSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this SAMLSource.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this SAMLSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this SAMLSource.
        :type managed: str
        """
        if managed is None:
            raise ValueError("Invalid value for `managed`, must not be `None`")

        self._managed = managed

    @property
    def user_path_template(self):
        """Gets the user_path_template of this SAMLSource.


        :return: The user_path_template of this SAMLSource.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this SAMLSource.


        :param user_path_template: The user_path_template of this SAMLSource.
        :type user_path_template: str
        """

        self._user_path_template = user_path_template

    @property
    def icon(self):
        """Gets the icon of this SAMLSource.


        :return: The icon of this SAMLSource.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this SAMLSource.


        :param icon: The icon of this SAMLSource.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def group_matching_mode(self):
        """Gets the group_matching_mode of this SAMLSource.

        How the source determines if an existing group should be used or a new group created.

        :return: The group_matching_mode of this SAMLSource.
        :rtype: GroupMatchingModeEnum
        """
        return self._group_matching_mode

    @group_matching_mode.setter
    def group_matching_mode(self, group_matching_mode):
        """Sets the group_matching_mode of this SAMLSource.

        How the source determines if an existing group should be used or a new group created.

        :param group_matching_mode: The group_matching_mode of this SAMLSource.
        :type group_matching_mode: GroupMatchingModeEnum
        """

        self._group_matching_mode = group_matching_mode

    @property
    def pre_authentication_flow(self):
        """Gets the pre_authentication_flow of this SAMLSource.

        Flow used before authentication.

        :return: The pre_authentication_flow of this SAMLSource.
        :rtype: str
        """
        return self._pre_authentication_flow

    @pre_authentication_flow.setter
    def pre_authentication_flow(self, pre_authentication_flow):
        """Sets the pre_authentication_flow of this SAMLSource.

        Flow used before authentication.

        :param pre_authentication_flow: The pre_authentication_flow of this SAMLSource.
        :type pre_authentication_flow: str
        """
        if pre_authentication_flow is None:
            raise ValueError("Invalid value for `pre_authentication_flow`, must not be `None`")

        self._pre_authentication_flow = pre_authentication_flow

    @property
    def issuer(self):
        """Gets the issuer of this SAMLSource.

        Also known as Entity ID. Defaults the Metadata URL.

        :return: The issuer of this SAMLSource.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SAMLSource.

        Also known as Entity ID. Defaults the Metadata URL.

        :param issuer: The issuer of this SAMLSource.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def sso_url(self):
        """Gets the sso_url of this SAMLSource.

        URL that the initial Login request is sent to.

        :return: The sso_url of this SAMLSource.
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this SAMLSource.

        URL that the initial Login request is sent to.

        :param sso_url: The sso_url of this SAMLSource.
        :type sso_url: str
        """
        if sso_url is None:
            raise ValueError("Invalid value for `sso_url`, must not be `None`")
        if sso_url is not None and len(sso_url) > 200:
            raise ValueError("Invalid value for `sso_url`, length must be less than or equal to `200`")

        self._sso_url = sso_url

    @property
    def slo_url(self):
        """Gets the slo_url of this SAMLSource.

        Optional URL if your IDP supports Single-Logout.

        :return: The slo_url of this SAMLSource.
        :rtype: str
        """
        return self._slo_url

    @slo_url.setter
    def slo_url(self, slo_url):
        """Sets the slo_url of this SAMLSource.

        Optional URL if your IDP supports Single-Logout.

        :param slo_url: The slo_url of this SAMLSource.
        :type slo_url: str
        """
        if slo_url is not None and len(slo_url) > 200:
            raise ValueError("Invalid value for `slo_url`, length must be less than or equal to `200`")

        self._slo_url = slo_url

    @property
    def allow_idp_initiated(self):
        """Gets the allow_idp_initiated of this SAMLSource.

        Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.

        :return: The allow_idp_initiated of this SAMLSource.
        :rtype: bool
        """
        return self._allow_idp_initiated

    @allow_idp_initiated.setter
    def allow_idp_initiated(self, allow_idp_initiated):
        """Sets the allow_idp_initiated of this SAMLSource.

        Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.

        :param allow_idp_initiated: The allow_idp_initiated of this SAMLSource.
        :type allow_idp_initiated: bool
        """

        self._allow_idp_initiated = allow_idp_initiated

    @property
    def name_id_policy(self):
        """Gets the name_id_policy of this SAMLSource.

        NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.

        :return: The name_id_policy of this SAMLSource.
        :rtype: NameIdPolicyEnum
        """
        return self._name_id_policy

    @name_id_policy.setter
    def name_id_policy(self, name_id_policy):
        """Sets the name_id_policy of this SAMLSource.

        NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.

        :param name_id_policy: The name_id_policy of this SAMLSource.
        :type name_id_policy: NameIdPolicyEnum
        """

        self._name_id_policy = name_id_policy

    @property
    def binding_type(self):
        """Gets the binding_type of this SAMLSource.


        :return: The binding_type of this SAMLSource.
        :rtype: BindingTypeEnum
        """
        return self._binding_type

    @binding_type.setter
    def binding_type(self, binding_type):
        """Sets the binding_type of this SAMLSource.


        :param binding_type: The binding_type of this SAMLSource.
        :type binding_type: BindingTypeEnum
        """

        self._binding_type = binding_type

    @property
    def verification_kp(self):
        """Gets the verification_kp of this SAMLSource.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :return: The verification_kp of this SAMLSource.
        :rtype: str
        """
        return self._verification_kp

    @verification_kp.setter
    def verification_kp(self, verification_kp):
        """Sets the verification_kp of this SAMLSource.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :param verification_kp: The verification_kp of this SAMLSource.
        :type verification_kp: str
        """

        self._verification_kp = verification_kp

    @property
    def signing_kp(self):
        """Gets the signing_kp of this SAMLSource.

        Keypair used to sign outgoing Responses going to the Identity Provider.

        :return: The signing_kp of this SAMLSource.
        :rtype: str
        """
        return self._signing_kp

    @signing_kp.setter
    def signing_kp(self, signing_kp):
        """Sets the signing_kp of this SAMLSource.

        Keypair used to sign outgoing Responses going to the Identity Provider.

        :param signing_kp: The signing_kp of this SAMLSource.
        :type signing_kp: str
        """

        self._signing_kp = signing_kp

    @property
    def digest_algorithm(self):
        """Gets the digest_algorithm of this SAMLSource.


        :return: The digest_algorithm of this SAMLSource.
        :rtype: DigestAlgorithmEnum
        """
        return self._digest_algorithm

    @digest_algorithm.setter
    def digest_algorithm(self, digest_algorithm):
        """Sets the digest_algorithm of this SAMLSource.


        :param digest_algorithm: The digest_algorithm of this SAMLSource.
        :type digest_algorithm: DigestAlgorithmEnum
        """

        self._digest_algorithm = digest_algorithm

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this SAMLSource.


        :return: The signature_algorithm of this SAMLSource.
        :rtype: SignatureAlgorithmEnum
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this SAMLSource.


        :param signature_algorithm: The signature_algorithm of this SAMLSource.
        :type signature_algorithm: SignatureAlgorithmEnum
        """

        self._signature_algorithm = signature_algorithm

    @property
    def temporary_user_delete_after(self):
        """Gets the temporary_user_delete_after of this SAMLSource.

        Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).

        :return: The temporary_user_delete_after of this SAMLSource.
        :rtype: str
        """
        return self._temporary_user_delete_after

    @temporary_user_delete_after.setter
    def temporary_user_delete_after(self, temporary_user_delete_after):
        """Sets the temporary_user_delete_after of this SAMLSource.

        Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).

        :param temporary_user_delete_after: The temporary_user_delete_after of this SAMLSource.
        :type temporary_user_delete_after: str
        """

        self._temporary_user_delete_after = temporary_user_delete_after

    @property
    def encryption_kp(self):
        """Gets the encryption_kp of this SAMLSource.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :return: The encryption_kp of this SAMLSource.
        :rtype: str
        """
        return self._encryption_kp

    @encryption_kp.setter
    def encryption_kp(self, encryption_kp):
        """Sets the encryption_kp of this SAMLSource.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :param encryption_kp: The encryption_kp of this SAMLSource.
        :type encryption_kp: str
        """

        self._encryption_kp = encryption_kp
