# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class GoogleWorkspaceProviderGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, google_id: str=None, group: str=None, provider: int=None):
        """GoogleWorkspaceProviderGroupRequest - a model defined in OpenAPI

        :param google_id: The google_id of this GoogleWorkspaceProviderGroupRequest.
        :param group: The group of this GoogleWorkspaceProviderGroupRequest.
        :param provider: The provider of this GoogleWorkspaceProviderGroupRequest.
        """
        self.openapi_types = {
            'google_id': str,
            'group': str,
            'provider': int
        }

        self.attribute_map = {
            'google_id': 'google_id',
            'group': 'group',
            'provider': 'provider'
        }

        self._google_id = google_id
        self._group = group
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleWorkspaceProviderGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleWorkspaceProviderGroupRequest of this GoogleWorkspaceProviderGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def google_id(self):
        """Gets the google_id of this GoogleWorkspaceProviderGroupRequest.


        :return: The google_id of this GoogleWorkspaceProviderGroupRequest.
        :rtype: str
        """
        return self._google_id

    @google_id.setter
    def google_id(self, google_id):
        """Sets the google_id of this GoogleWorkspaceProviderGroupRequest.


        :param google_id: The google_id of this GoogleWorkspaceProviderGroupRequest.
        :type google_id: str
        """
        if google_id is None:
            raise ValueError("Invalid value for `google_id`, must not be `None`")
        if google_id is not None and len(google_id) < 1:
            raise ValueError("Invalid value for `google_id`, length must be greater than or equal to `1`")

        self._google_id = google_id

    @property
    def group(self):
        """Gets the group of this GoogleWorkspaceProviderGroupRequest.


        :return: The group of this GoogleWorkspaceProviderGroupRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GoogleWorkspaceProviderGroupRequest.


        :param group: The group of this GoogleWorkspaceProviderGroupRequest.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def provider(self):
        """Gets the provider of this GoogleWorkspaceProviderGroupRequest.


        :return: The provider of this GoogleWorkspaceProviderGroupRequest.
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this GoogleWorkspaceProviderGroupRequest.


        :param provider: The provider of this GoogleWorkspaceProviderGroupRequest.
        :type provider: int
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
