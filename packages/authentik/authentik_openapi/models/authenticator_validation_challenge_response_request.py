# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.device_challenge_request import DeviceChallengeRequest
from authentik_openapi import util


class AuthenticatorValidationChallengeResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: str='ak-stage-authenticator-validate', selected_challenge: DeviceChallengeRequest=None, selected_stage: str=None, code: str=None, webauthn: Dict[str, object]=None, duo: int=None):
        """AuthenticatorValidationChallengeResponseRequest - a model defined in OpenAPI

        :param component: The component of this AuthenticatorValidationChallengeResponseRequest.
        :param selected_challenge: The selected_challenge of this AuthenticatorValidationChallengeResponseRequest.
        :param selected_stage: The selected_stage of this AuthenticatorValidationChallengeResponseRequest.
        :param code: The code of this AuthenticatorValidationChallengeResponseRequest.
        :param webauthn: The webauthn of this AuthenticatorValidationChallengeResponseRequest.
        :param duo: The duo of this AuthenticatorValidationChallengeResponseRequest.
        """
        self.openapi_types = {
            'component': str,
            'selected_challenge': DeviceChallengeRequest,
            'selected_stage': str,
            'code': str,
            'webauthn': Dict[str, object],
            'duo': int
        }

        self.attribute_map = {
            'component': 'component',
            'selected_challenge': 'selected_challenge',
            'selected_stage': 'selected_stage',
            'code': 'code',
            'webauthn': 'webauthn',
            'duo': 'duo'
        }

        self._component = component
        self._selected_challenge = selected_challenge
        self._selected_stage = selected_stage
        self._code = code
        self._webauthn = webauthn
        self._duo = duo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatorValidationChallengeResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatorValidationChallengeResponseRequest of this AuthenticatorValidationChallengeResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this AuthenticatorValidationChallengeResponseRequest.


        :return: The component of this AuthenticatorValidationChallengeResponseRequest.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this AuthenticatorValidationChallengeResponseRequest.


        :param component: The component of this AuthenticatorValidationChallengeResponseRequest.
        :type component: str
        """
        if component is not None and len(component) < 1:
            raise ValueError("Invalid value for `component`, length must be greater than or equal to `1`")

        self._component = component

    @property
    def selected_challenge(self):
        """Gets the selected_challenge of this AuthenticatorValidationChallengeResponseRequest.


        :return: The selected_challenge of this AuthenticatorValidationChallengeResponseRequest.
        :rtype: DeviceChallengeRequest
        """
        return self._selected_challenge

    @selected_challenge.setter
    def selected_challenge(self, selected_challenge):
        """Sets the selected_challenge of this AuthenticatorValidationChallengeResponseRequest.


        :param selected_challenge: The selected_challenge of this AuthenticatorValidationChallengeResponseRequest.
        :type selected_challenge: DeviceChallengeRequest
        """

        self._selected_challenge = selected_challenge

    @property
    def selected_stage(self):
        """Gets the selected_stage of this AuthenticatorValidationChallengeResponseRequest.


        :return: The selected_stage of this AuthenticatorValidationChallengeResponseRequest.
        :rtype: str
        """
        return self._selected_stage

    @selected_stage.setter
    def selected_stage(self, selected_stage):
        """Sets the selected_stage of this AuthenticatorValidationChallengeResponseRequest.


        :param selected_stage: The selected_stage of this AuthenticatorValidationChallengeResponseRequest.
        :type selected_stage: str
        """
        if selected_stage is not None and len(selected_stage) < 1:
            raise ValueError("Invalid value for `selected_stage`, length must be greater than or equal to `1`")

        self._selected_stage = selected_stage

    @property
    def code(self):
        """Gets the code of this AuthenticatorValidationChallengeResponseRequest.


        :return: The code of this AuthenticatorValidationChallengeResponseRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AuthenticatorValidationChallengeResponseRequest.


        :param code: The code of this AuthenticatorValidationChallengeResponseRequest.
        :type code: str
        """
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")

        self._code = code

    @property
    def webauthn(self):
        """Gets the webauthn of this AuthenticatorValidationChallengeResponseRequest.


        :return: The webauthn of this AuthenticatorValidationChallengeResponseRequest.
        :rtype: Dict[str, object]
        """
        return self._webauthn

    @webauthn.setter
    def webauthn(self, webauthn):
        """Sets the webauthn of this AuthenticatorValidationChallengeResponseRequest.


        :param webauthn: The webauthn of this AuthenticatorValidationChallengeResponseRequest.
        :type webauthn: Dict[str, object]
        """

        self._webauthn = webauthn

    @property
    def duo(self):
        """Gets the duo of this AuthenticatorValidationChallengeResponseRequest.


        :return: The duo of this AuthenticatorValidationChallengeResponseRequest.
        :rtype: int
        """
        return self._duo

    @duo.setter
    def duo(self, duo):
        """Sets the duo of this AuthenticatorValidationChallengeResponseRequest.


        :param duo: The duo of this AuthenticatorValidationChallengeResponseRequest.
        :type duo: int
        """

        self._duo = duo
