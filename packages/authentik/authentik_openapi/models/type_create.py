# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class TypeCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, component: str=None, model_name: str=None, icon_url: str=None, requires_enterprise: bool=False):
        """TypeCreate - a model defined in OpenAPI

        :param name: The name of this TypeCreate.
        :param description: The description of this TypeCreate.
        :param component: The component of this TypeCreate.
        :param model_name: The model_name of this TypeCreate.
        :param icon_url: The icon_url of this TypeCreate.
        :param requires_enterprise: The requires_enterprise of this TypeCreate.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'component': str,
            'model_name': str,
            'icon_url': str,
            'requires_enterprise': bool
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'component': 'component',
            'model_name': 'model_name',
            'icon_url': 'icon_url',
            'requires_enterprise': 'requires_enterprise'
        }

        self._name = name
        self._description = description
        self._component = component
        self._model_name = model_name
        self._icon_url = icon_url
        self._requires_enterprise = requires_enterprise

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypeCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TypeCreate of this TypeCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TypeCreate.


        :return: The name of this TypeCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TypeCreate.


        :param name: The name of this TypeCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this TypeCreate.


        :return: The description of this TypeCreate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TypeCreate.


        :param description: The description of this TypeCreate.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def component(self):
        """Gets the component of this TypeCreate.


        :return: The component of this TypeCreate.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this TypeCreate.


        :param component: The component of this TypeCreate.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def model_name(self):
        """Gets the model_name of this TypeCreate.


        :return: The model_name of this TypeCreate.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this TypeCreate.


        :param model_name: The model_name of this TypeCreate.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def icon_url(self):
        """Gets the icon_url of this TypeCreate.


        :return: The icon_url of this TypeCreate.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this TypeCreate.


        :param icon_url: The icon_url of this TypeCreate.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def requires_enterprise(self):
        """Gets the requires_enterprise of this TypeCreate.


        :return: The requires_enterprise of this TypeCreate.
        :rtype: bool
        """
        return self._requires_enterprise

    @requires_enterprise.setter
    def requires_enterprise(self, requires_enterprise):
        """Sets the requires_enterprise of this TypeCreate.


        :param requires_enterprise: The requires_enterprise of this TypeCreate.
        :type requires_enterprise: bool
        """

        self._requires_enterprise = requires_enterprise
