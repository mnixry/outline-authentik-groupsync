# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.binding_type_enum import BindingTypeEnum
from authentik_openapi.models.digest_algorithm_enum import DigestAlgorithmEnum
from authentik_openapi.models.group_matching_mode_enum import GroupMatchingModeEnum
from authentik_openapi.models.name_id_policy_enum import NameIdPolicyEnum
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
from authentik_openapi.models.signature_algorithm_enum import SignatureAlgorithmEnum
from authentik_openapi.models.user_matching_mode_enum import UserMatchingModeEnum
import re
from authentik_openapi import util


class SAMLSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, slug: str=None, enabled: bool=None, authentication_flow: str=None, enrollment_flow: str=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, policy_engine_mode: PolicyEngineMode=None, user_matching_mode: UserMatchingModeEnum=None, user_path_template: str=None, group_matching_mode: GroupMatchingModeEnum=None, pre_authentication_flow: str=None, issuer: str=None, sso_url: str=None, slo_url: str=None, allow_idp_initiated: bool=None, name_id_policy: NameIdPolicyEnum=None, binding_type: BindingTypeEnum=None, verification_kp: str=None, signing_kp: str=None, digest_algorithm: DigestAlgorithmEnum=None, signature_algorithm: SignatureAlgorithmEnum=None, temporary_user_delete_after: str=None, encryption_kp: str=None):
        """SAMLSourceRequest - a model defined in OpenAPI

        :param name: The name of this SAMLSourceRequest.
        :param slug: The slug of this SAMLSourceRequest.
        :param enabled: The enabled of this SAMLSourceRequest.
        :param authentication_flow: The authentication_flow of this SAMLSourceRequest.
        :param enrollment_flow: The enrollment_flow of this SAMLSourceRequest.
        :param user_property_mappings: The user_property_mappings of this SAMLSourceRequest.
        :param group_property_mappings: The group_property_mappings of this SAMLSourceRequest.
        :param policy_engine_mode: The policy_engine_mode of this SAMLSourceRequest.
        :param user_matching_mode: The user_matching_mode of this SAMLSourceRequest.
        :param user_path_template: The user_path_template of this SAMLSourceRequest.
        :param group_matching_mode: The group_matching_mode of this SAMLSourceRequest.
        :param pre_authentication_flow: The pre_authentication_flow of this SAMLSourceRequest.
        :param issuer: The issuer of this SAMLSourceRequest.
        :param sso_url: The sso_url of this SAMLSourceRequest.
        :param slo_url: The slo_url of this SAMLSourceRequest.
        :param allow_idp_initiated: The allow_idp_initiated of this SAMLSourceRequest.
        :param name_id_policy: The name_id_policy of this SAMLSourceRequest.
        :param binding_type: The binding_type of this SAMLSourceRequest.
        :param verification_kp: The verification_kp of this SAMLSourceRequest.
        :param signing_kp: The signing_kp of this SAMLSourceRequest.
        :param digest_algorithm: The digest_algorithm of this SAMLSourceRequest.
        :param signature_algorithm: The signature_algorithm of this SAMLSourceRequest.
        :param temporary_user_delete_after: The temporary_user_delete_after of this SAMLSourceRequest.
        :param encryption_kp: The encryption_kp of this SAMLSourceRequest.
        """
        self.openapi_types = {
            'name': str,
            'slug': str,
            'enabled': bool,
            'authentication_flow': str,
            'enrollment_flow': str,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'policy_engine_mode': PolicyEngineMode,
            'user_matching_mode': UserMatchingModeEnum,
            'user_path_template': str,
            'group_matching_mode': GroupMatchingModeEnum,
            'pre_authentication_flow': str,
            'issuer': str,
            'sso_url': str,
            'slo_url': str,
            'allow_idp_initiated': bool,
            'name_id_policy': NameIdPolicyEnum,
            'binding_type': BindingTypeEnum,
            'verification_kp': str,
            'signing_kp': str,
            'digest_algorithm': DigestAlgorithmEnum,
            'signature_algorithm': SignatureAlgorithmEnum,
            'temporary_user_delete_after': str,
            'encryption_kp': str
        }

        self.attribute_map = {
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'authentication_flow': 'authentication_flow',
            'enrollment_flow': 'enrollment_flow',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'policy_engine_mode': 'policy_engine_mode',
            'user_matching_mode': 'user_matching_mode',
            'user_path_template': 'user_path_template',
            'group_matching_mode': 'group_matching_mode',
            'pre_authentication_flow': 'pre_authentication_flow',
            'issuer': 'issuer',
            'sso_url': 'sso_url',
            'slo_url': 'slo_url',
            'allow_idp_initiated': 'allow_idp_initiated',
            'name_id_policy': 'name_id_policy',
            'binding_type': 'binding_type',
            'verification_kp': 'verification_kp',
            'signing_kp': 'signing_kp',
            'digest_algorithm': 'digest_algorithm',
            'signature_algorithm': 'signature_algorithm',
            'temporary_user_delete_after': 'temporary_user_delete_after',
            'encryption_kp': 'encryption_kp'
        }

        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._authentication_flow = authentication_flow
        self._enrollment_flow = enrollment_flow
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._policy_engine_mode = policy_engine_mode
        self._user_matching_mode = user_matching_mode
        self._user_path_template = user_path_template
        self._group_matching_mode = group_matching_mode
        self._pre_authentication_flow = pre_authentication_flow
        self._issuer = issuer
        self._sso_url = sso_url
        self._slo_url = slo_url
        self._allow_idp_initiated = allow_idp_initiated
        self._name_id_policy = name_id_policy
        self._binding_type = binding_type
        self._verification_kp = verification_kp
        self._signing_kp = signing_kp
        self._digest_algorithm = digest_algorithm
        self._signature_algorithm = signature_algorithm
        self._temporary_user_delete_after = temporary_user_delete_after
        self._encryption_kp = encryption_kp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SAMLSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SAMLSourceRequest of this SAMLSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SAMLSourceRequest.

        Source's display Name.

        :return: The name of this SAMLSourceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SAMLSourceRequest.

        Source's display Name.

        :param name: The name of this SAMLSourceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SAMLSourceRequest.

        Internal source name, used in URLs.

        :return: The slug of this SAMLSourceRequest.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SAMLSourceRequest.

        Internal source name, used in URLs.

        :param slug: The slug of this SAMLSourceRequest.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this SAMLSourceRequest.


        :return: The enabled of this SAMLSourceRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SAMLSourceRequest.


        :param enabled: The enabled of this SAMLSourceRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this SAMLSourceRequest.

        Flow to use when authenticating existing users.

        :return: The authentication_flow of this SAMLSourceRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this SAMLSourceRequest.

        Flow to use when authenticating existing users.

        :param authentication_flow: The authentication_flow of this SAMLSourceRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this SAMLSourceRequest.

        Flow to use when enrolling new users.

        :return: The enrollment_flow of this SAMLSourceRequest.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this SAMLSourceRequest.

        Flow to use when enrolling new users.

        :param enrollment_flow: The enrollment_flow of this SAMLSourceRequest.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this SAMLSourceRequest.


        :return: The user_property_mappings of this SAMLSourceRequest.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this SAMLSourceRequest.


        :param user_property_mappings: The user_property_mappings of this SAMLSourceRequest.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this SAMLSourceRequest.


        :return: The group_property_mappings of this SAMLSourceRequest.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this SAMLSourceRequest.


        :param group_property_mappings: The group_property_mappings of this SAMLSourceRequest.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this SAMLSourceRequest.


        :return: The policy_engine_mode of this SAMLSourceRequest.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this SAMLSourceRequest.


        :param policy_engine_mode: The policy_engine_mode of this SAMLSourceRequest.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def user_matching_mode(self):
        """Gets the user_matching_mode of this SAMLSourceRequest.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :return: The user_matching_mode of this SAMLSourceRequest.
        :rtype: UserMatchingModeEnum
        """
        return self._user_matching_mode

    @user_matching_mode.setter
    def user_matching_mode(self, user_matching_mode):
        """Sets the user_matching_mode of this SAMLSourceRequest.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :param user_matching_mode: The user_matching_mode of this SAMLSourceRequest.
        :type user_matching_mode: UserMatchingModeEnum
        """

        self._user_matching_mode = user_matching_mode

    @property
    def user_path_template(self):
        """Gets the user_path_template of this SAMLSourceRequest.


        :return: The user_path_template of this SAMLSourceRequest.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this SAMLSourceRequest.


        :param user_path_template: The user_path_template of this SAMLSourceRequest.
        :type user_path_template: str
        """
        if user_path_template is not None and len(user_path_template) < 1:
            raise ValueError("Invalid value for `user_path_template`, length must be greater than or equal to `1`")

        self._user_path_template = user_path_template

    @property
    def group_matching_mode(self):
        """Gets the group_matching_mode of this SAMLSourceRequest.

        How the source determines if an existing group should be used or a new group created.

        :return: The group_matching_mode of this SAMLSourceRequest.
        :rtype: GroupMatchingModeEnum
        """
        return self._group_matching_mode

    @group_matching_mode.setter
    def group_matching_mode(self, group_matching_mode):
        """Sets the group_matching_mode of this SAMLSourceRequest.

        How the source determines if an existing group should be used or a new group created.

        :param group_matching_mode: The group_matching_mode of this SAMLSourceRequest.
        :type group_matching_mode: GroupMatchingModeEnum
        """

        self._group_matching_mode = group_matching_mode

    @property
    def pre_authentication_flow(self):
        """Gets the pre_authentication_flow of this SAMLSourceRequest.

        Flow used before authentication.

        :return: The pre_authentication_flow of this SAMLSourceRequest.
        :rtype: str
        """
        return self._pre_authentication_flow

    @pre_authentication_flow.setter
    def pre_authentication_flow(self, pre_authentication_flow):
        """Sets the pre_authentication_flow of this SAMLSourceRequest.

        Flow used before authentication.

        :param pre_authentication_flow: The pre_authentication_flow of this SAMLSourceRequest.
        :type pre_authentication_flow: str
        """
        if pre_authentication_flow is None:
            raise ValueError("Invalid value for `pre_authentication_flow`, must not be `None`")

        self._pre_authentication_flow = pre_authentication_flow

    @property
    def issuer(self):
        """Gets the issuer of this SAMLSourceRequest.

        Also known as Entity ID. Defaults the Metadata URL.

        :return: The issuer of this SAMLSourceRequest.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SAMLSourceRequest.

        Also known as Entity ID. Defaults the Metadata URL.

        :param issuer: The issuer of this SAMLSourceRequest.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def sso_url(self):
        """Gets the sso_url of this SAMLSourceRequest.

        URL that the initial Login request is sent to.

        :return: The sso_url of this SAMLSourceRequest.
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this SAMLSourceRequest.

        URL that the initial Login request is sent to.

        :param sso_url: The sso_url of this SAMLSourceRequest.
        :type sso_url: str
        """
        if sso_url is None:
            raise ValueError("Invalid value for `sso_url`, must not be `None`")
        if sso_url is not None and len(sso_url) > 200:
            raise ValueError("Invalid value for `sso_url`, length must be less than or equal to `200`")
        if sso_url is not None and len(sso_url) < 1:
            raise ValueError("Invalid value for `sso_url`, length must be greater than or equal to `1`")

        self._sso_url = sso_url

    @property
    def slo_url(self):
        """Gets the slo_url of this SAMLSourceRequest.

        Optional URL if your IDP supports Single-Logout.

        :return: The slo_url of this SAMLSourceRequest.
        :rtype: str
        """
        return self._slo_url

    @slo_url.setter
    def slo_url(self, slo_url):
        """Sets the slo_url of this SAMLSourceRequest.

        Optional URL if your IDP supports Single-Logout.

        :param slo_url: The slo_url of this SAMLSourceRequest.
        :type slo_url: str
        """
        if slo_url is not None and len(slo_url) > 200:
            raise ValueError("Invalid value for `slo_url`, length must be less than or equal to `200`")

        self._slo_url = slo_url

    @property
    def allow_idp_initiated(self):
        """Gets the allow_idp_initiated of this SAMLSourceRequest.

        Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.

        :return: The allow_idp_initiated of this SAMLSourceRequest.
        :rtype: bool
        """
        return self._allow_idp_initiated

    @allow_idp_initiated.setter
    def allow_idp_initiated(self, allow_idp_initiated):
        """Sets the allow_idp_initiated of this SAMLSourceRequest.

        Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.

        :param allow_idp_initiated: The allow_idp_initiated of this SAMLSourceRequest.
        :type allow_idp_initiated: bool
        """

        self._allow_idp_initiated = allow_idp_initiated

    @property
    def name_id_policy(self):
        """Gets the name_id_policy of this SAMLSourceRequest.

        NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.

        :return: The name_id_policy of this SAMLSourceRequest.
        :rtype: NameIdPolicyEnum
        """
        return self._name_id_policy

    @name_id_policy.setter
    def name_id_policy(self, name_id_policy):
        """Sets the name_id_policy of this SAMLSourceRequest.

        NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.

        :param name_id_policy: The name_id_policy of this SAMLSourceRequest.
        :type name_id_policy: NameIdPolicyEnum
        """

        self._name_id_policy = name_id_policy

    @property
    def binding_type(self):
        """Gets the binding_type of this SAMLSourceRequest.


        :return: The binding_type of this SAMLSourceRequest.
        :rtype: BindingTypeEnum
        """
        return self._binding_type

    @binding_type.setter
    def binding_type(self, binding_type):
        """Sets the binding_type of this SAMLSourceRequest.


        :param binding_type: The binding_type of this SAMLSourceRequest.
        :type binding_type: BindingTypeEnum
        """

        self._binding_type = binding_type

    @property
    def verification_kp(self):
        """Gets the verification_kp of this SAMLSourceRequest.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :return: The verification_kp of this SAMLSourceRequest.
        :rtype: str
        """
        return self._verification_kp

    @verification_kp.setter
    def verification_kp(self, verification_kp):
        """Sets the verification_kp of this SAMLSourceRequest.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :param verification_kp: The verification_kp of this SAMLSourceRequest.
        :type verification_kp: str
        """

        self._verification_kp = verification_kp

    @property
    def signing_kp(self):
        """Gets the signing_kp of this SAMLSourceRequest.

        Keypair used to sign outgoing Responses going to the Identity Provider.

        :return: The signing_kp of this SAMLSourceRequest.
        :rtype: str
        """
        return self._signing_kp

    @signing_kp.setter
    def signing_kp(self, signing_kp):
        """Sets the signing_kp of this SAMLSourceRequest.

        Keypair used to sign outgoing Responses going to the Identity Provider.

        :param signing_kp: The signing_kp of this SAMLSourceRequest.
        :type signing_kp: str
        """

        self._signing_kp = signing_kp

    @property
    def digest_algorithm(self):
        """Gets the digest_algorithm of this SAMLSourceRequest.


        :return: The digest_algorithm of this SAMLSourceRequest.
        :rtype: DigestAlgorithmEnum
        """
        return self._digest_algorithm

    @digest_algorithm.setter
    def digest_algorithm(self, digest_algorithm):
        """Sets the digest_algorithm of this SAMLSourceRequest.


        :param digest_algorithm: The digest_algorithm of this SAMLSourceRequest.
        :type digest_algorithm: DigestAlgorithmEnum
        """

        self._digest_algorithm = digest_algorithm

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this SAMLSourceRequest.


        :return: The signature_algorithm of this SAMLSourceRequest.
        :rtype: SignatureAlgorithmEnum
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this SAMLSourceRequest.


        :param signature_algorithm: The signature_algorithm of this SAMLSourceRequest.
        :type signature_algorithm: SignatureAlgorithmEnum
        """

        self._signature_algorithm = signature_algorithm

    @property
    def temporary_user_delete_after(self):
        """Gets the temporary_user_delete_after of this SAMLSourceRequest.

        Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).

        :return: The temporary_user_delete_after of this SAMLSourceRequest.
        :rtype: str
        """
        return self._temporary_user_delete_after

    @temporary_user_delete_after.setter
    def temporary_user_delete_after(self, temporary_user_delete_after):
        """Sets the temporary_user_delete_after of this SAMLSourceRequest.

        Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).

        :param temporary_user_delete_after: The temporary_user_delete_after of this SAMLSourceRequest.
        :type temporary_user_delete_after: str
        """
        if temporary_user_delete_after is not None and len(temporary_user_delete_after) < 1:
            raise ValueError("Invalid value for `temporary_user_delete_after`, length must be greater than or equal to `1`")

        self._temporary_user_delete_after = temporary_user_delete_after

    @property
    def encryption_kp(self):
        """Gets the encryption_kp of this SAMLSourceRequest.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :return: The encryption_kp of this SAMLSourceRequest.
        :rtype: str
        """
        return self._encryption_kp

    @encryption_kp.setter
    def encryption_kp(self, encryption_kp):
        """Sets the encryption_kp of this SAMLSourceRequest.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :param encryption_kp: The encryption_kp of this SAMLSourceRequest.
        :type encryption_kp: str
        """

        self._encryption_kp = encryption_kp
