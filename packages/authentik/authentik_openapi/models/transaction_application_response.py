# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class TransactionApplicationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied: bool=None, logs: List[str]=None):
        """TransactionApplicationResponse - a model defined in OpenAPI

        :param applied: The applied of this TransactionApplicationResponse.
        :param logs: The logs of this TransactionApplicationResponse.
        """
        self.openapi_types = {
            'applied': bool,
            'logs': List[str]
        }

        self.attribute_map = {
            'applied': 'applied',
            'logs': 'logs'
        }

        self._applied = applied
        self._logs = logs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionApplicationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionApplicationResponse of this TransactionApplicationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied(self):
        """Gets the applied of this TransactionApplicationResponse.


        :return: The applied of this TransactionApplicationResponse.
        :rtype: bool
        """
        return self._applied

    @applied.setter
    def applied(self, applied):
        """Sets the applied of this TransactionApplicationResponse.


        :param applied: The applied of this TransactionApplicationResponse.
        :type applied: bool
        """
        if applied is None:
            raise ValueError("Invalid value for `applied`, must not be `None`")

        self._applied = applied

    @property
    def logs(self):
        """Gets the logs of this TransactionApplicationResponse.


        :return: The logs of this TransactionApplicationResponse.
        :rtype: List[str]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this TransactionApplicationResponse.


        :param logs: The logs of this TransactionApplicationResponse.
        :type logs: List[str]
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")

        self._logs = logs
