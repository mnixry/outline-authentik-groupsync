# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.authentication_enum import AuthenticationEnum
from authentik_openapi.models.denied_action_enum import DeniedActionEnum
from authentik_openapi.models.flow_designation_enum import FlowDesignationEnum
from authentik_openapi.models.flow_layout_enum import FlowLayoutEnum
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
import re
from authentik_openapi import util


class PatchedFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, slug: str=None, title: str=None, designation: FlowDesignationEnum=None, policy_engine_mode: PolicyEngineMode=None, compatibility_mode: bool=None, layout: FlowLayoutEnum=None, denied_action: DeniedActionEnum=None, authentication: AuthenticationEnum=None):
        """PatchedFlowRequest - a model defined in OpenAPI

        :param name: The name of this PatchedFlowRequest.
        :param slug: The slug of this PatchedFlowRequest.
        :param title: The title of this PatchedFlowRequest.
        :param designation: The designation of this PatchedFlowRequest.
        :param policy_engine_mode: The policy_engine_mode of this PatchedFlowRequest.
        :param compatibility_mode: The compatibility_mode of this PatchedFlowRequest.
        :param layout: The layout of this PatchedFlowRequest.
        :param denied_action: The denied_action of this PatchedFlowRequest.
        :param authentication: The authentication of this PatchedFlowRequest.
        """
        self.openapi_types = {
            'name': str,
            'slug': str,
            'title': str,
            'designation': FlowDesignationEnum,
            'policy_engine_mode': PolicyEngineMode,
            'compatibility_mode': bool,
            'layout': FlowLayoutEnum,
            'denied_action': DeniedActionEnum,
            'authentication': AuthenticationEnum
        }

        self.attribute_map = {
            'name': 'name',
            'slug': 'slug',
            'title': 'title',
            'designation': 'designation',
            'policy_engine_mode': 'policy_engine_mode',
            'compatibility_mode': 'compatibility_mode',
            'layout': 'layout',
            'denied_action': 'denied_action',
            'authentication': 'authentication'
        }

        self._name = name
        self._slug = slug
        self._title = title
        self._designation = designation
        self._policy_engine_mode = policy_engine_mode
        self._compatibility_mode = compatibility_mode
        self._layout = layout
        self._denied_action = denied_action
        self._authentication = authentication

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedFlowRequest of this PatchedFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedFlowRequest.


        :return: The name of this PatchedFlowRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedFlowRequest.


        :param name: The name of this PatchedFlowRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this PatchedFlowRequest.

        Visible in the URL.

        :return: The slug of this PatchedFlowRequest.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PatchedFlowRequest.

        Visible in the URL.

        :param slug: The slug of this PatchedFlowRequest.
        :type slug: str
        """
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this PatchedFlowRequest.

        Shown as the Title in Flow pages.

        :return: The title of this PatchedFlowRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PatchedFlowRequest.

        Shown as the Title in Flow pages.

        :param title: The title of this PatchedFlowRequest.
        :type title: str
        """
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def designation(self):
        """Gets the designation of this PatchedFlowRequest.

        Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.

        :return: The designation of this PatchedFlowRequest.
        :rtype: FlowDesignationEnum
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this PatchedFlowRequest.

        Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.

        :param designation: The designation of this PatchedFlowRequest.
        :type designation: FlowDesignationEnum
        """

        self._designation = designation

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this PatchedFlowRequest.


        :return: The policy_engine_mode of this PatchedFlowRequest.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this PatchedFlowRequest.


        :param policy_engine_mode: The policy_engine_mode of this PatchedFlowRequest.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def compatibility_mode(self):
        """Gets the compatibility_mode of this PatchedFlowRequest.

        Enable compatibility mode, increases compatibility with password managers on mobile devices.

        :return: The compatibility_mode of this PatchedFlowRequest.
        :rtype: bool
        """
        return self._compatibility_mode

    @compatibility_mode.setter
    def compatibility_mode(self, compatibility_mode):
        """Sets the compatibility_mode of this PatchedFlowRequest.

        Enable compatibility mode, increases compatibility with password managers on mobile devices.

        :param compatibility_mode: The compatibility_mode of this PatchedFlowRequest.
        :type compatibility_mode: bool
        """

        self._compatibility_mode = compatibility_mode

    @property
    def layout(self):
        """Gets the layout of this PatchedFlowRequest.


        :return: The layout of this PatchedFlowRequest.
        :rtype: FlowLayoutEnum
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this PatchedFlowRequest.


        :param layout: The layout of this PatchedFlowRequest.
        :type layout: FlowLayoutEnum
        """

        self._layout = layout

    @property
    def denied_action(self):
        """Gets the denied_action of this PatchedFlowRequest.

        Configure what should happen when a flow denies access to a user.

        :return: The denied_action of this PatchedFlowRequest.
        :rtype: DeniedActionEnum
        """
        return self._denied_action

    @denied_action.setter
    def denied_action(self, denied_action):
        """Sets the denied_action of this PatchedFlowRequest.

        Configure what should happen when a flow denies access to a user.

        :param denied_action: The denied_action of this PatchedFlowRequest.
        :type denied_action: DeniedActionEnum
        """

        self._denied_action = denied_action

    @property
    def authentication(self):
        """Gets the authentication of this PatchedFlowRequest.

        Required level of authentication and authorization to access a flow.

        :return: The authentication of this PatchedFlowRequest.
        :rtype: AuthenticationEnum
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this PatchedFlowRequest.

        Required level of authentication and authorization to access a flow.

        :param authentication: The authentication of this PatchedFlowRequest.
        :type authentication: AuthenticationEnum
        """

        self._authentication = authentication
