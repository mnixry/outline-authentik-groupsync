# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.auth_mode_enum import AuthModeEnum
from authentik_openapi.models.protocol_enum import ProtocolEnum
from authentik_openapi.models.rac_provider import RACProvider
from authentik_openapi import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, provider: int=None, provider_obj: RACProvider=None, protocol: ProtocolEnum=None, host: str=None, settings: object=None, property_mappings: List[str]=None, auth_mode: AuthModeEnum=None, launch_url: str=None, maximum_connections: int=None):
        """Endpoint - a model defined in OpenAPI

        :param pk: The pk of this Endpoint.
        :param name: The name of this Endpoint.
        :param provider: The provider of this Endpoint.
        :param provider_obj: The provider_obj of this Endpoint.
        :param protocol: The protocol of this Endpoint.
        :param host: The host of this Endpoint.
        :param settings: The settings of this Endpoint.
        :param property_mappings: The property_mappings of this Endpoint.
        :param auth_mode: The auth_mode of this Endpoint.
        :param launch_url: The launch_url of this Endpoint.
        :param maximum_connections: The maximum_connections of this Endpoint.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'provider': int,
            'provider_obj': RACProvider,
            'protocol': ProtocolEnum,
            'host': str,
            'settings': object,
            'property_mappings': List[str],
            'auth_mode': AuthModeEnum,
            'launch_url': str,
            'maximum_connections': int
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'provider': 'provider',
            'provider_obj': 'provider_obj',
            'protocol': 'protocol',
            'host': 'host',
            'settings': 'settings',
            'property_mappings': 'property_mappings',
            'auth_mode': 'auth_mode',
            'launch_url': 'launch_url',
            'maximum_connections': 'maximum_connections'
        }

        self._pk = pk
        self._name = name
        self._provider = provider
        self._provider_obj = provider_obj
        self._protocol = protocol
        self._host = host
        self._settings = settings
        self._property_mappings = property_mappings
        self._auth_mode = auth_mode
        self._launch_url = launch_url
        self._maximum_connections = maximum_connections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Endpoint.


        :return: The pk of this Endpoint.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Endpoint.


        :param pk: The pk of this Endpoint.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this Endpoint.


        :return: The name of this Endpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Endpoint.


        :param name: The name of this Endpoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this Endpoint.


        :return: The provider of this Endpoint.
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Endpoint.


        :param provider: The provider of this Endpoint.
        :type provider: int
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def provider_obj(self):
        """Gets the provider_obj of this Endpoint.


        :return: The provider_obj of this Endpoint.
        :rtype: RACProvider
        """
        return self._provider_obj

    @provider_obj.setter
    def provider_obj(self, provider_obj):
        """Sets the provider_obj of this Endpoint.


        :param provider_obj: The provider_obj of this Endpoint.
        :type provider_obj: RACProvider
        """
        if provider_obj is None:
            raise ValueError("Invalid value for `provider_obj`, must not be `None`")

        self._provider_obj = provider_obj

    @property
    def protocol(self):
        """Gets the protocol of this Endpoint.


        :return: The protocol of this Endpoint.
        :rtype: ProtocolEnum
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Endpoint.


        :param protocol: The protocol of this Endpoint.
        :type protocol: ProtocolEnum
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def host(self):
        """Gets the host of this Endpoint.


        :return: The host of this Endpoint.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Endpoint.


        :param host: The host of this Endpoint.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def settings(self):
        """Gets the settings of this Endpoint.


        :return: The settings of this Endpoint.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Endpoint.


        :param settings: The settings of this Endpoint.
        :type settings: object
        """

        self._settings = settings

    @property
    def property_mappings(self):
        """Gets the property_mappings of this Endpoint.


        :return: The property_mappings of this Endpoint.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this Endpoint.


        :param property_mappings: The property_mappings of this Endpoint.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def auth_mode(self):
        """Gets the auth_mode of this Endpoint.


        :return: The auth_mode of this Endpoint.
        :rtype: AuthModeEnum
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this Endpoint.


        :param auth_mode: The auth_mode of this Endpoint.
        :type auth_mode: AuthModeEnum
        """
        if auth_mode is None:
            raise ValueError("Invalid value for `auth_mode`, must not be `None`")

        self._auth_mode = auth_mode

    @property
    def launch_url(self):
        """Gets the launch_url of this Endpoint.

        Build actual launch URL (the provider itself does not have one, just individual endpoints)

        :return: The launch_url of this Endpoint.
        :rtype: str
        """
        return self._launch_url

    @launch_url.setter
    def launch_url(self, launch_url):
        """Sets the launch_url of this Endpoint.

        Build actual launch URL (the provider itself does not have one, just individual endpoints)

        :param launch_url: The launch_url of this Endpoint.
        :type launch_url: str
        """
        if launch_url is None:
            raise ValueError("Invalid value for `launch_url`, must not be `None`")

        self._launch_url = launch_url

    @property
    def maximum_connections(self):
        """Gets the maximum_connections of this Endpoint.


        :return: The maximum_connections of this Endpoint.
        :rtype: int
        """
        return self._maximum_connections

    @maximum_connections.setter
    def maximum_connections(self, maximum_connections):
        """Sets the maximum_connections of this Endpoint.


        :param maximum_connections: The maximum_connections of this Endpoint.
        :type maximum_connections: int
        """
        if maximum_connections is not None and maximum_connections > 2147483647:
            raise ValueError("Invalid value for `maximum_connections`, must be a value less than or equal to `2147483647`")
        if maximum_connections is not None and maximum_connections < -2147483648:
            raise ValueError("Invalid value for `maximum_connections`, must be a value greater than or equal to `-2147483648`")

        self._maximum_connections = maximum_connections
