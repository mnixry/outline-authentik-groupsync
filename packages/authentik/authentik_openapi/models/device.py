# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, pk: int=None, name: str=None, type: str=None, confirmed: bool=None, created: datetime=None, last_updated: datetime=None, last_used: datetime=None):
        """Device - a model defined in OpenAPI

        :param verbose_name: The verbose_name of this Device.
        :param verbose_name_plural: The verbose_name_plural of this Device.
        :param meta_model_name: The meta_model_name of this Device.
        :param pk: The pk of this Device.
        :param name: The name of this Device.
        :param type: The type of this Device.
        :param confirmed: The confirmed of this Device.
        :param created: The created of this Device.
        :param last_updated: The last_updated of this Device.
        :param last_used: The last_used of this Device.
        """
        self.openapi_types = {
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'pk': int,
            'name': str,
            'type': str,
            'confirmed': bool,
            'created': datetime,
            'last_updated': datetime,
            'last_used': datetime
        }

        self.attribute_map = {
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'pk': 'pk',
            'name': 'name',
            'type': 'type',
            'confirmed': 'confirmed',
            'created': 'created',
            'last_updated': 'last_updated',
            'last_used': 'last_used'
        }

        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._pk = pk
        self._name = name
        self._type = type
        self._confirmed = confirmed
        self._created = created
        self._last_updated = last_updated
        self._last_used = last_used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def verbose_name(self):
        """Gets the verbose_name of this Device.

        Return object's verbose_name

        :return: The verbose_name of this Device.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this Device.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this Device.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this Device.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this Device.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this Device.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this Device.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this Device.

        Return internal model name

        :return: The meta_model_name of this Device.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this Device.

        Return internal model name

        :param meta_model_name: The meta_model_name of this Device.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def pk(self):
        """Gets the pk of this Device.


        :return: The pk of this Device.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Device.


        :param pk: The pk of this Device.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this Device.


        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this Device.

        Get type of device

        :return: The type of this Device.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Device.

        Get type of device

        :param type: The type of this Device.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def confirmed(self):
        """Gets the confirmed of this Device.


        :return: The confirmed of this Device.
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this Device.


        :param confirmed: The confirmed of this Device.
        :type confirmed: bool
        """
        if confirmed is None:
            raise ValueError("Invalid value for `confirmed`, must not be `None`")

        self._confirmed = confirmed

    @property
    def created(self):
        """Gets the created of this Device.


        :return: The created of this Device.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Device.


        :param created: The created of this Device.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def last_updated(self):
        """Gets the last_updated of this Device.


        :return: The last_updated of this Device.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Device.


        :param last_updated: The last_updated of this Device.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def last_used(self):
        """Gets the last_used of this Device.


        :return: The last_used of this Device.
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this Device.


        :param last_used: The last_used of this Device.
        :type last_used: datetime
        """
        if last_used is None:
            raise ValueError("Invalid value for `last_used`, must not be `None`")

        self._last_used = last_used
