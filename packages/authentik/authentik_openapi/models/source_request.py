# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
from authentik_openapi.models.user_matching_mode_enum import UserMatchingModeEnum
import re
from authentik_openapi import util


class SourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, slug: str=None, enabled: bool=None, authentication_flow: str=None, enrollment_flow: str=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, policy_engine_mode: PolicyEngineMode=None, user_matching_mode: UserMatchingModeEnum=None, user_path_template: str=None):
        """SourceRequest - a model defined in OpenAPI

        :param name: The name of this SourceRequest.
        :param slug: The slug of this SourceRequest.
        :param enabled: The enabled of this SourceRequest.
        :param authentication_flow: The authentication_flow of this SourceRequest.
        :param enrollment_flow: The enrollment_flow of this SourceRequest.
        :param user_property_mappings: The user_property_mappings of this SourceRequest.
        :param group_property_mappings: The group_property_mappings of this SourceRequest.
        :param policy_engine_mode: The policy_engine_mode of this SourceRequest.
        :param user_matching_mode: The user_matching_mode of this SourceRequest.
        :param user_path_template: The user_path_template of this SourceRequest.
        """
        self.openapi_types = {
            'name': str,
            'slug': str,
            'enabled': bool,
            'authentication_flow': str,
            'enrollment_flow': str,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'policy_engine_mode': PolicyEngineMode,
            'user_matching_mode': UserMatchingModeEnum,
            'user_path_template': str
        }

        self.attribute_map = {
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'authentication_flow': 'authentication_flow',
            'enrollment_flow': 'enrollment_flow',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'policy_engine_mode': 'policy_engine_mode',
            'user_matching_mode': 'user_matching_mode',
            'user_path_template': 'user_path_template'
        }

        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._authentication_flow = authentication_flow
        self._enrollment_flow = enrollment_flow
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._policy_engine_mode = policy_engine_mode
        self._user_matching_mode = user_matching_mode
        self._user_path_template = user_path_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceRequest of this SourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SourceRequest.

        Source's display Name.

        :return: The name of this SourceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceRequest.

        Source's display Name.

        :param name: The name of this SourceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SourceRequest.

        Internal source name, used in URLs.

        :return: The slug of this SourceRequest.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SourceRequest.

        Internal source name, used in URLs.

        :param slug: The slug of this SourceRequest.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this SourceRequest.


        :return: The enabled of this SourceRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SourceRequest.


        :param enabled: The enabled of this SourceRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this SourceRequest.

        Flow to use when authenticating existing users.

        :return: The authentication_flow of this SourceRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this SourceRequest.

        Flow to use when authenticating existing users.

        :param authentication_flow: The authentication_flow of this SourceRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this SourceRequest.

        Flow to use when enrolling new users.

        :return: The enrollment_flow of this SourceRequest.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this SourceRequest.

        Flow to use when enrolling new users.

        :param enrollment_flow: The enrollment_flow of this SourceRequest.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this SourceRequest.


        :return: The user_property_mappings of this SourceRequest.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this SourceRequest.


        :param user_property_mappings: The user_property_mappings of this SourceRequest.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this SourceRequest.


        :return: The group_property_mappings of this SourceRequest.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this SourceRequest.


        :param group_property_mappings: The group_property_mappings of this SourceRequest.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this SourceRequest.


        :return: The policy_engine_mode of this SourceRequest.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this SourceRequest.


        :param policy_engine_mode: The policy_engine_mode of this SourceRequest.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def user_matching_mode(self):
        """Gets the user_matching_mode of this SourceRequest.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :return: The user_matching_mode of this SourceRequest.
        :rtype: UserMatchingModeEnum
        """
        return self._user_matching_mode

    @user_matching_mode.setter
    def user_matching_mode(self, user_matching_mode):
        """Sets the user_matching_mode of this SourceRequest.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :param user_matching_mode: The user_matching_mode of this SourceRequest.
        :type user_matching_mode: UserMatchingModeEnum
        """

        self._user_matching_mode = user_matching_mode

    @property
    def user_path_template(self):
        """Gets the user_path_template of this SourceRequest.


        :return: The user_path_template of this SourceRequest.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this SourceRequest.


        :param user_path_template: The user_path_template of this SourceRequest.
        :type user_path_template: str
        """
        if user_path_template is not None and len(user_path_template) < 1:
            raise ValueError("Invalid value for `user_path_template`, length must be greater than or equal to `1`")

        self._user_path_template = user_path_template
