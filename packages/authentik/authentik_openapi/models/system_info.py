# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.system_info_runtime import SystemInfoRuntime
from authentik_openapi import util


class SystemInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_headers: Dict[str, str]=None, http_host: str=None, http_is_secure: bool=None, runtime: SystemInfoRuntime=None, brand: str=None, server_time: datetime=None, embedded_outpost_disabled: bool=None, embedded_outpost_host: str=None):
        """SystemInfo - a model defined in OpenAPI

        :param http_headers: The http_headers of this SystemInfo.
        :param http_host: The http_host of this SystemInfo.
        :param http_is_secure: The http_is_secure of this SystemInfo.
        :param runtime: The runtime of this SystemInfo.
        :param brand: The brand of this SystemInfo.
        :param server_time: The server_time of this SystemInfo.
        :param embedded_outpost_disabled: The embedded_outpost_disabled of this SystemInfo.
        :param embedded_outpost_host: The embedded_outpost_host of this SystemInfo.
        """
        self.openapi_types = {
            'http_headers': Dict[str, str],
            'http_host': str,
            'http_is_secure': bool,
            'runtime': SystemInfoRuntime,
            'brand': str,
            'server_time': datetime,
            'embedded_outpost_disabled': bool,
            'embedded_outpost_host': str
        }

        self.attribute_map = {
            'http_headers': 'http_headers',
            'http_host': 'http_host',
            'http_is_secure': 'http_is_secure',
            'runtime': 'runtime',
            'brand': 'brand',
            'server_time': 'server_time',
            'embedded_outpost_disabled': 'embedded_outpost_disabled',
            'embedded_outpost_host': 'embedded_outpost_host'
        }

        self._http_headers = http_headers
        self._http_host = http_host
        self._http_is_secure = http_is_secure
        self._runtime = runtime
        self._brand = brand
        self._server_time = server_time
        self._embedded_outpost_disabled = embedded_outpost_disabled
        self._embedded_outpost_host = embedded_outpost_host

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemInfo of this SystemInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_headers(self):
        """Gets the http_headers of this SystemInfo.

        Get HTTP Request headers

        :return: The http_headers of this SystemInfo.
        :rtype: Dict[str, str]
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """Sets the http_headers of this SystemInfo.

        Get HTTP Request headers

        :param http_headers: The http_headers of this SystemInfo.
        :type http_headers: Dict[str, str]
        """
        if http_headers is None:
            raise ValueError("Invalid value for `http_headers`, must not be `None`")

        self._http_headers = http_headers

    @property
    def http_host(self):
        """Gets the http_host of this SystemInfo.

        Get HTTP host

        :return: The http_host of this SystemInfo.
        :rtype: str
        """
        return self._http_host

    @http_host.setter
    def http_host(self, http_host):
        """Sets the http_host of this SystemInfo.

        Get HTTP host

        :param http_host: The http_host of this SystemInfo.
        :type http_host: str
        """
        if http_host is None:
            raise ValueError("Invalid value for `http_host`, must not be `None`")

        self._http_host = http_host

    @property
    def http_is_secure(self):
        """Gets the http_is_secure of this SystemInfo.

        Get HTTP Secure flag

        :return: The http_is_secure of this SystemInfo.
        :rtype: bool
        """
        return self._http_is_secure

    @http_is_secure.setter
    def http_is_secure(self, http_is_secure):
        """Sets the http_is_secure of this SystemInfo.

        Get HTTP Secure flag

        :param http_is_secure: The http_is_secure of this SystemInfo.
        :type http_is_secure: bool
        """
        if http_is_secure is None:
            raise ValueError("Invalid value for `http_is_secure`, must not be `None`")

        self._http_is_secure = http_is_secure

    @property
    def runtime(self):
        """Gets the runtime of this SystemInfo.


        :return: The runtime of this SystemInfo.
        :rtype: SystemInfoRuntime
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this SystemInfo.


        :param runtime: The runtime of this SystemInfo.
        :type runtime: SystemInfoRuntime
        """
        if runtime is None:
            raise ValueError("Invalid value for `runtime`, must not be `None`")

        self._runtime = runtime

    @property
    def brand(self):
        """Gets the brand of this SystemInfo.

        Currently active brand

        :return: The brand of this SystemInfo.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SystemInfo.

        Currently active brand

        :param brand: The brand of this SystemInfo.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def server_time(self):
        """Gets the server_time of this SystemInfo.

        Current server time

        :return: The server_time of this SystemInfo.
        :rtype: datetime
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this SystemInfo.

        Current server time

        :param server_time: The server_time of this SystemInfo.
        :type server_time: datetime
        """
        if server_time is None:
            raise ValueError("Invalid value for `server_time`, must not be `None`")

        self._server_time = server_time

    @property
    def embedded_outpost_disabled(self):
        """Gets the embedded_outpost_disabled of this SystemInfo.

        Whether the embedded outpost is disabled

        :return: The embedded_outpost_disabled of this SystemInfo.
        :rtype: bool
        """
        return self._embedded_outpost_disabled

    @embedded_outpost_disabled.setter
    def embedded_outpost_disabled(self, embedded_outpost_disabled):
        """Sets the embedded_outpost_disabled of this SystemInfo.

        Whether the embedded outpost is disabled

        :param embedded_outpost_disabled: The embedded_outpost_disabled of this SystemInfo.
        :type embedded_outpost_disabled: bool
        """
        if embedded_outpost_disabled is None:
            raise ValueError("Invalid value for `embedded_outpost_disabled`, must not be `None`")

        self._embedded_outpost_disabled = embedded_outpost_disabled

    @property
    def embedded_outpost_host(self):
        """Gets the embedded_outpost_host of this SystemInfo.

        Get the FQDN configured on the embedded outpost

        :return: The embedded_outpost_host of this SystemInfo.
        :rtype: str
        """
        return self._embedded_outpost_host

    @embedded_outpost_host.setter
    def embedded_outpost_host(self, embedded_outpost_host):
        """Sets the embedded_outpost_host of this SystemInfo.

        Get the FQDN configured on the embedded outpost

        :param embedded_outpost_host: The embedded_outpost_host of this SystemInfo.
        :type embedded_outpost_host: str
        """
        if embedded_outpost_host is None:
            raise ValueError("Invalid value for `embedded_outpost_host`, must not be `None`")

        self._embedded_outpost_host = embedded_outpost_host
