# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class PatchedEmailStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, use_global_settings: bool=None, host: str=None, port: int=None, username: str=None, password: str=None, use_tls: bool=None, use_ssl: bool=None, timeout: int=None, from_address: str=None, token_expiry: int=None, subject: str=None, template: str=None, activate_user_on_success: bool=None):
        """PatchedEmailStageRequest - a model defined in OpenAPI

        :param name: The name of this PatchedEmailStageRequest.
        :param flow_set: The flow_set of this PatchedEmailStageRequest.
        :param use_global_settings: The use_global_settings of this PatchedEmailStageRequest.
        :param host: The host of this PatchedEmailStageRequest.
        :param port: The port of this PatchedEmailStageRequest.
        :param username: The username of this PatchedEmailStageRequest.
        :param password: The password of this PatchedEmailStageRequest.
        :param use_tls: The use_tls of this PatchedEmailStageRequest.
        :param use_ssl: The use_ssl of this PatchedEmailStageRequest.
        :param timeout: The timeout of this PatchedEmailStageRequest.
        :param from_address: The from_address of this PatchedEmailStageRequest.
        :param token_expiry: The token_expiry of this PatchedEmailStageRequest.
        :param subject: The subject of this PatchedEmailStageRequest.
        :param template: The template of this PatchedEmailStageRequest.
        :param activate_user_on_success: The activate_user_on_success of this PatchedEmailStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'use_global_settings': bool,
            'host': str,
            'port': int,
            'username': str,
            'password': str,
            'use_tls': bool,
            'use_ssl': bool,
            'timeout': int,
            'from_address': str,
            'token_expiry': int,
            'subject': str,
            'template': str,
            'activate_user_on_success': bool
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'use_global_settings': 'use_global_settings',
            'host': 'host',
            'port': 'port',
            'username': 'username',
            'password': 'password',
            'use_tls': 'use_tls',
            'use_ssl': 'use_ssl',
            'timeout': 'timeout',
            'from_address': 'from_address',
            'token_expiry': 'token_expiry',
            'subject': 'subject',
            'template': 'template',
            'activate_user_on_success': 'activate_user_on_success'
        }

        self._name = name
        self._flow_set = flow_set
        self._use_global_settings = use_global_settings
        self._host = host
        self._port = port
        self._username = username
        self._password = password
        self._use_tls = use_tls
        self._use_ssl = use_ssl
        self._timeout = timeout
        self._from_address = from_address
        self._token_expiry = token_expiry
        self._subject = subject
        self._template = template
        self._activate_user_on_success = activate_user_on_success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedEmailStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedEmailStageRequest of this PatchedEmailStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedEmailStageRequest.


        :return: The name of this PatchedEmailStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedEmailStageRequest.


        :param name: The name of this PatchedEmailStageRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this PatchedEmailStageRequest.


        :return: The flow_set of this PatchedEmailStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this PatchedEmailStageRequest.


        :param flow_set: The flow_set of this PatchedEmailStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def use_global_settings(self):
        """Gets the use_global_settings of this PatchedEmailStageRequest.

        When enabled, global Email connection settings will be used and connection settings below will be ignored.

        :return: The use_global_settings of this PatchedEmailStageRequest.
        :rtype: bool
        """
        return self._use_global_settings

    @use_global_settings.setter
    def use_global_settings(self, use_global_settings):
        """Sets the use_global_settings of this PatchedEmailStageRequest.

        When enabled, global Email connection settings will be used and connection settings below will be ignored.

        :param use_global_settings: The use_global_settings of this PatchedEmailStageRequest.
        :type use_global_settings: bool
        """

        self._use_global_settings = use_global_settings

    @property
    def host(self):
        """Gets the host of this PatchedEmailStageRequest.


        :return: The host of this PatchedEmailStageRequest.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this PatchedEmailStageRequest.


        :param host: The host of this PatchedEmailStageRequest.
        :type host: str
        """
        if host is not None and len(host) < 1:
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")

        self._host = host

    @property
    def port(self):
        """Gets the port of this PatchedEmailStageRequest.


        :return: The port of this PatchedEmailStageRequest.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PatchedEmailStageRequest.


        :param port: The port of this PatchedEmailStageRequest.
        :type port: int
        """
        if port is not None and port > 2147483647:
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `2147483647`")
        if port is not None and port < -2147483648:
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `-2147483648`")

        self._port = port

    @property
    def username(self):
        """Gets the username of this PatchedEmailStageRequest.


        :return: The username of this PatchedEmailStageRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PatchedEmailStageRequest.


        :param username: The username of this PatchedEmailStageRequest.
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this PatchedEmailStageRequest.


        :return: The password of this PatchedEmailStageRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PatchedEmailStageRequest.


        :param password: The password of this PatchedEmailStageRequest.
        :type password: str
        """

        self._password = password

    @property
    def use_tls(self):
        """Gets the use_tls of this PatchedEmailStageRequest.


        :return: The use_tls of this PatchedEmailStageRequest.
        :rtype: bool
        """
        return self._use_tls

    @use_tls.setter
    def use_tls(self, use_tls):
        """Sets the use_tls of this PatchedEmailStageRequest.


        :param use_tls: The use_tls of this PatchedEmailStageRequest.
        :type use_tls: bool
        """

        self._use_tls = use_tls

    @property
    def use_ssl(self):
        """Gets the use_ssl of this PatchedEmailStageRequest.


        :return: The use_ssl of this PatchedEmailStageRequest.
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this PatchedEmailStageRequest.


        :param use_ssl: The use_ssl of this PatchedEmailStageRequest.
        :type use_ssl: bool
        """

        self._use_ssl = use_ssl

    @property
    def timeout(self):
        """Gets the timeout of this PatchedEmailStageRequest.


        :return: The timeout of this PatchedEmailStageRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this PatchedEmailStageRequest.


        :param timeout: The timeout of this PatchedEmailStageRequest.
        :type timeout: int
        """
        if timeout is not None and timeout > 2147483647:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `2147483647`")
        if timeout is not None and timeout < -2147483648:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `-2147483648`")

        self._timeout = timeout

    @property
    def from_address(self):
        """Gets the from_address of this PatchedEmailStageRequest.


        :return: The from_address of this PatchedEmailStageRequest.
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this PatchedEmailStageRequest.


        :param from_address: The from_address of this PatchedEmailStageRequest.
        :type from_address: str
        """
        if from_address is not None and len(from_address) > 254:
            raise ValueError("Invalid value for `from_address`, length must be less than or equal to `254`")
        if from_address is not None and len(from_address) < 1:
            raise ValueError("Invalid value for `from_address`, length must be greater than or equal to `1`")

        self._from_address = from_address

    @property
    def token_expiry(self):
        """Gets the token_expiry of this PatchedEmailStageRequest.

        Time in minutes the token sent is valid.

        :return: The token_expiry of this PatchedEmailStageRequest.
        :rtype: int
        """
        return self._token_expiry

    @token_expiry.setter
    def token_expiry(self, token_expiry):
        """Sets the token_expiry of this PatchedEmailStageRequest.

        Time in minutes the token sent is valid.

        :param token_expiry: The token_expiry of this PatchedEmailStageRequest.
        :type token_expiry: int
        """
        if token_expiry is not None and token_expiry > 2147483647:
            raise ValueError("Invalid value for `token_expiry`, must be a value less than or equal to `2147483647`")
        if token_expiry is not None and token_expiry < -2147483648:
            raise ValueError("Invalid value for `token_expiry`, must be a value greater than or equal to `-2147483648`")

        self._token_expiry = token_expiry

    @property
    def subject(self):
        """Gets the subject of this PatchedEmailStageRequest.


        :return: The subject of this PatchedEmailStageRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PatchedEmailStageRequest.


        :param subject: The subject of this PatchedEmailStageRequest.
        :type subject: str
        """
        if subject is not None and len(subject) < 1:
            raise ValueError("Invalid value for `subject`, length must be greater than or equal to `1`")

        self._subject = subject

    @property
    def template(self):
        """Gets the template of this PatchedEmailStageRequest.


        :return: The template of this PatchedEmailStageRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this PatchedEmailStageRequest.


        :param template: The template of this PatchedEmailStageRequest.
        :type template: str
        """
        if template is not None and len(template) < 1:
            raise ValueError("Invalid value for `template`, length must be greater than or equal to `1`")

        self._template = template

    @property
    def activate_user_on_success(self):
        """Gets the activate_user_on_success of this PatchedEmailStageRequest.

        Activate users upon completion of stage.

        :return: The activate_user_on_success of this PatchedEmailStageRequest.
        :rtype: bool
        """
        return self._activate_user_on_success

    @activate_user_on_success.setter
    def activate_user_on_success(self, activate_user_on_success):
        """Sets the activate_user_on_success of this PatchedEmailStageRequest.

        Activate users upon completion of stage.

        :param activate_user_on_success: The activate_user_on_success of this PatchedEmailStageRequest.
        :type activate_user_on_success: bool
        """

        self._activate_user_on_success = activate_user_on_success
