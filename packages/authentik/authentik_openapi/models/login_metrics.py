# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.coordinate import Coordinate
from authentik_openapi import util


class LoginMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logins: List[Coordinate]=None, logins_failed: List[Coordinate]=None, authorizations: List[Coordinate]=None):
        """LoginMetrics - a model defined in OpenAPI

        :param logins: The logins of this LoginMetrics.
        :param logins_failed: The logins_failed of this LoginMetrics.
        :param authorizations: The authorizations of this LoginMetrics.
        """
        self.openapi_types = {
            'logins': List[Coordinate],
            'logins_failed': List[Coordinate],
            'authorizations': List[Coordinate]
        }

        self.attribute_map = {
            'logins': 'logins',
            'logins_failed': 'logins_failed',
            'authorizations': 'authorizations'
        }

        self._logins = logins
        self._logins_failed = logins_failed
        self._authorizations = authorizations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginMetrics of this LoginMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logins(self):
        """Gets the logins of this LoginMetrics.


        :return: The logins of this LoginMetrics.
        :rtype: List[Coordinate]
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this LoginMetrics.


        :param logins: The logins of this LoginMetrics.
        :type logins: List[Coordinate]
        """
        if logins is None:
            raise ValueError("Invalid value for `logins`, must not be `None`")

        self._logins = logins

    @property
    def logins_failed(self):
        """Gets the logins_failed of this LoginMetrics.


        :return: The logins_failed of this LoginMetrics.
        :rtype: List[Coordinate]
        """
        return self._logins_failed

    @logins_failed.setter
    def logins_failed(self, logins_failed):
        """Sets the logins_failed of this LoginMetrics.


        :param logins_failed: The logins_failed of this LoginMetrics.
        :type logins_failed: List[Coordinate]
        """
        if logins_failed is None:
            raise ValueError("Invalid value for `logins_failed`, must not be `None`")

        self._logins_failed = logins_failed

    @property
    def authorizations(self):
        """Gets the authorizations of this LoginMetrics.


        :return: The authorizations of this LoginMetrics.
        :rtype: List[Coordinate]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this LoginMetrics.


        :param authorizations: The authorizations of this LoginMetrics.
        :type authorizations: List[Coordinate]
        """
        if authorizations is None:
            raise ValueError("Invalid value for `authorizations`, must not be `None`")

        self._authorizations = authorizations
