# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class LicenseForecast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, internal_users: int=None, external_users: int=None, forecasted_internal_users: int=None, forecasted_external_users: int=None):
        """LicenseForecast - a model defined in OpenAPI

        :param internal_users: The internal_users of this LicenseForecast.
        :param external_users: The external_users of this LicenseForecast.
        :param forecasted_internal_users: The forecasted_internal_users of this LicenseForecast.
        :param forecasted_external_users: The forecasted_external_users of this LicenseForecast.
        """
        self.openapi_types = {
            'internal_users': int,
            'external_users': int,
            'forecasted_internal_users': int,
            'forecasted_external_users': int
        }

        self.attribute_map = {
            'internal_users': 'internal_users',
            'external_users': 'external_users',
            'forecasted_internal_users': 'forecasted_internal_users',
            'forecasted_external_users': 'forecasted_external_users'
        }

        self._internal_users = internal_users
        self._external_users = external_users
        self._forecasted_internal_users = forecasted_internal_users
        self._forecasted_external_users = forecasted_external_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseForecast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseForecast of this LicenseForecast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def internal_users(self):
        """Gets the internal_users of this LicenseForecast.


        :return: The internal_users of this LicenseForecast.
        :rtype: int
        """
        return self._internal_users

    @internal_users.setter
    def internal_users(self, internal_users):
        """Sets the internal_users of this LicenseForecast.


        :param internal_users: The internal_users of this LicenseForecast.
        :type internal_users: int
        """
        if internal_users is None:
            raise ValueError("Invalid value for `internal_users`, must not be `None`")

        self._internal_users = internal_users

    @property
    def external_users(self):
        """Gets the external_users of this LicenseForecast.


        :return: The external_users of this LicenseForecast.
        :rtype: int
        """
        return self._external_users

    @external_users.setter
    def external_users(self, external_users):
        """Sets the external_users of this LicenseForecast.


        :param external_users: The external_users of this LicenseForecast.
        :type external_users: int
        """
        if external_users is None:
            raise ValueError("Invalid value for `external_users`, must not be `None`")

        self._external_users = external_users

    @property
    def forecasted_internal_users(self):
        """Gets the forecasted_internal_users of this LicenseForecast.


        :return: The forecasted_internal_users of this LicenseForecast.
        :rtype: int
        """
        return self._forecasted_internal_users

    @forecasted_internal_users.setter
    def forecasted_internal_users(self, forecasted_internal_users):
        """Sets the forecasted_internal_users of this LicenseForecast.


        :param forecasted_internal_users: The forecasted_internal_users of this LicenseForecast.
        :type forecasted_internal_users: int
        """
        if forecasted_internal_users is None:
            raise ValueError("Invalid value for `forecasted_internal_users`, must not be `None`")

        self._forecasted_internal_users = forecasted_internal_users

    @property
    def forecasted_external_users(self):
        """Gets the forecasted_external_users of this LicenseForecast.


        :return: The forecasted_external_users of this LicenseForecast.
        :rtype: int
        """
        return self._forecasted_external_users

    @forecasted_external_users.setter
    def forecasted_external_users(self, forecasted_external_users):
        """Sets the forecasted_external_users of this LicenseForecast.


        :param forecasted_external_users: The forecasted_external_users of this LicenseForecast.
        :type forecasted_external_users: int
        """
        if forecasted_external_users is None:
            raise ValueError("Invalid value for `forecasted_external_users`, must not be `None`")

        self._forecasted_external_users = forecasted_external_users
