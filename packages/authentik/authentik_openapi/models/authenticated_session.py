# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.authenticated_session_asn import AuthenticatedSessionAsn
from authentik_openapi.models.authenticated_session_geo_ip import AuthenticatedSessionGeoIp
from authentik_openapi.models.authenticated_session_user_agent import AuthenticatedSessionUserAgent
from authentik_openapi import util


class AuthenticatedSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, current: bool=None, user_agent: AuthenticatedSessionUserAgent=None, geo_ip: AuthenticatedSessionGeoIp=None, asn: AuthenticatedSessionAsn=None, user: int=None, last_ip: str=None, last_user_agent: str=None, last_used: datetime=None, expires: datetime=None):
        """AuthenticatedSession - a model defined in OpenAPI

        :param uuid: The uuid of this AuthenticatedSession.
        :param current: The current of this AuthenticatedSession.
        :param user_agent: The user_agent of this AuthenticatedSession.
        :param geo_ip: The geo_ip of this AuthenticatedSession.
        :param asn: The asn of this AuthenticatedSession.
        :param user: The user of this AuthenticatedSession.
        :param last_ip: The last_ip of this AuthenticatedSession.
        :param last_user_agent: The last_user_agent of this AuthenticatedSession.
        :param last_used: The last_used of this AuthenticatedSession.
        :param expires: The expires of this AuthenticatedSession.
        """
        self.openapi_types = {
            'uuid': str,
            'current': bool,
            'user_agent': AuthenticatedSessionUserAgent,
            'geo_ip': AuthenticatedSessionGeoIp,
            'asn': AuthenticatedSessionAsn,
            'user': int,
            'last_ip': str,
            'last_user_agent': str,
            'last_used': datetime,
            'expires': datetime
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'current': 'current',
            'user_agent': 'user_agent',
            'geo_ip': 'geo_ip',
            'asn': 'asn',
            'user': 'user',
            'last_ip': 'last_ip',
            'last_user_agent': 'last_user_agent',
            'last_used': 'last_used',
            'expires': 'expires'
        }

        self._uuid = uuid
        self._current = current
        self._user_agent = user_agent
        self._geo_ip = geo_ip
        self._asn = asn
        self._user = user
        self._last_ip = last_ip
        self._last_user_agent = last_user_agent
        self._last_used = last_used
        self._expires = expires

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatedSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatedSession of this AuthenticatedSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this AuthenticatedSession.


        :return: The uuid of this AuthenticatedSession.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AuthenticatedSession.


        :param uuid: The uuid of this AuthenticatedSession.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def current(self):
        """Gets the current of this AuthenticatedSession.

        Check if session is currently active session

        :return: The current of this AuthenticatedSession.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this AuthenticatedSession.

        Check if session is currently active session

        :param current: The current of this AuthenticatedSession.
        :type current: bool
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")

        self._current = current

    @property
    def user_agent(self):
        """Gets the user_agent of this AuthenticatedSession.


        :return: The user_agent of this AuthenticatedSession.
        :rtype: AuthenticatedSessionUserAgent
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this AuthenticatedSession.


        :param user_agent: The user_agent of this AuthenticatedSession.
        :type user_agent: AuthenticatedSessionUserAgent
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent

    @property
    def geo_ip(self):
        """Gets the geo_ip of this AuthenticatedSession.


        :return: The geo_ip of this AuthenticatedSession.
        :rtype: AuthenticatedSessionGeoIp
        """
        return self._geo_ip

    @geo_ip.setter
    def geo_ip(self, geo_ip):
        """Sets the geo_ip of this AuthenticatedSession.


        :param geo_ip: The geo_ip of this AuthenticatedSession.
        :type geo_ip: AuthenticatedSessionGeoIp
        """
        if geo_ip is None:
            raise ValueError("Invalid value for `geo_ip`, must not be `None`")

        self._geo_ip = geo_ip

    @property
    def asn(self):
        """Gets the asn of this AuthenticatedSession.


        :return: The asn of this AuthenticatedSession.
        :rtype: AuthenticatedSessionAsn
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this AuthenticatedSession.


        :param asn: The asn of this AuthenticatedSession.
        :type asn: AuthenticatedSessionAsn
        """
        if asn is None:
            raise ValueError("Invalid value for `asn`, must not be `None`")

        self._asn = asn

    @property
    def user(self):
        """Gets the user of this AuthenticatedSession.


        :return: The user of this AuthenticatedSession.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuthenticatedSession.


        :param user: The user of this AuthenticatedSession.
        :type user: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def last_ip(self):
        """Gets the last_ip of this AuthenticatedSession.


        :return: The last_ip of this AuthenticatedSession.
        :rtype: str
        """
        return self._last_ip

    @last_ip.setter
    def last_ip(self, last_ip):
        """Sets the last_ip of this AuthenticatedSession.


        :param last_ip: The last_ip of this AuthenticatedSession.
        :type last_ip: str
        """
        if last_ip is None:
            raise ValueError("Invalid value for `last_ip`, must not be `None`")

        self._last_ip = last_ip

    @property
    def last_user_agent(self):
        """Gets the last_user_agent of this AuthenticatedSession.


        :return: The last_user_agent of this AuthenticatedSession.
        :rtype: str
        """
        return self._last_user_agent

    @last_user_agent.setter
    def last_user_agent(self, last_user_agent):
        """Sets the last_user_agent of this AuthenticatedSession.


        :param last_user_agent: The last_user_agent of this AuthenticatedSession.
        :type last_user_agent: str
        """

        self._last_user_agent = last_user_agent

    @property
    def last_used(self):
        """Gets the last_used of this AuthenticatedSession.


        :return: The last_used of this AuthenticatedSession.
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this AuthenticatedSession.


        :param last_used: The last_used of this AuthenticatedSession.
        :type last_used: datetime
        """
        if last_used is None:
            raise ValueError("Invalid value for `last_used`, must not be `None`")

        self._last_used = last_used

    @property
    def expires(self):
        """Gets the expires of this AuthenticatedSession.


        :return: The expires of this AuthenticatedSession.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this AuthenticatedSession.


        :param expires: The expires of this AuthenticatedSession.
        :type expires: datetime
        """

        self._expires = expires
