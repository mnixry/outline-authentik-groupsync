# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class RadiusProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, authentication_flow: str=None, authorization_flow: str=None, property_mappings: List[str]=None, component: str=None, assigned_application_slug: str=None, assigned_application_name: str=None, assigned_backchannel_application_slug: str=None, assigned_backchannel_application_name: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, client_networks: str=None, shared_secret: str=None, outpost_set: List[str]=None, mfa_support: bool=None):
        """RadiusProvider - a model defined in OpenAPI

        :param pk: The pk of this RadiusProvider.
        :param name: The name of this RadiusProvider.
        :param authentication_flow: The authentication_flow of this RadiusProvider.
        :param authorization_flow: The authorization_flow of this RadiusProvider.
        :param property_mappings: The property_mappings of this RadiusProvider.
        :param component: The component of this RadiusProvider.
        :param assigned_application_slug: The assigned_application_slug of this RadiusProvider.
        :param assigned_application_name: The assigned_application_name of this RadiusProvider.
        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this RadiusProvider.
        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this RadiusProvider.
        :param verbose_name: The verbose_name of this RadiusProvider.
        :param verbose_name_plural: The verbose_name_plural of this RadiusProvider.
        :param meta_model_name: The meta_model_name of this RadiusProvider.
        :param client_networks: The client_networks of this RadiusProvider.
        :param shared_secret: The shared_secret of this RadiusProvider.
        :param outpost_set: The outpost_set of this RadiusProvider.
        :param mfa_support: The mfa_support of this RadiusProvider.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'property_mappings': List[str],
            'component': str,
            'assigned_application_slug': str,
            'assigned_application_name': str,
            'assigned_backchannel_application_slug': str,
            'assigned_backchannel_application_name': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'client_networks': str,
            'shared_secret': str,
            'outpost_set': List[str],
            'mfa_support': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'property_mappings': 'property_mappings',
            'component': 'component',
            'assigned_application_slug': 'assigned_application_slug',
            'assigned_application_name': 'assigned_application_name',
            'assigned_backchannel_application_slug': 'assigned_backchannel_application_slug',
            'assigned_backchannel_application_name': 'assigned_backchannel_application_name',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'client_networks': 'client_networks',
            'shared_secret': 'shared_secret',
            'outpost_set': 'outpost_set',
            'mfa_support': 'mfa_support'
        }

        self._pk = pk
        self._name = name
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._property_mappings = property_mappings
        self._component = component
        self._assigned_application_slug = assigned_application_slug
        self._assigned_application_name = assigned_application_name
        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug
        self._assigned_backchannel_application_name = assigned_backchannel_application_name
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._client_networks = client_networks
        self._shared_secret = shared_secret
        self._outpost_set = outpost_set
        self._mfa_support = mfa_support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RadiusProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RadiusProvider of this RadiusProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this RadiusProvider.


        :return: The pk of this RadiusProvider.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this RadiusProvider.


        :param pk: The pk of this RadiusProvider.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this RadiusProvider.


        :return: The name of this RadiusProvider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RadiusProvider.


        :param name: The name of this RadiusProvider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this RadiusProvider.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this RadiusProvider.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this RadiusProvider.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this RadiusProvider.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this RadiusProvider.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this RadiusProvider.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this RadiusProvider.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this RadiusProvider.
        :type authorization_flow: str
        """
        if authorization_flow is None:
            raise ValueError("Invalid value for `authorization_flow`, must not be `None`")

        self._authorization_flow = authorization_flow

    @property
    def property_mappings(self):
        """Gets the property_mappings of this RadiusProvider.


        :return: The property_mappings of this RadiusProvider.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this RadiusProvider.


        :param property_mappings: The property_mappings of this RadiusProvider.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def component(self):
        """Gets the component of this RadiusProvider.

        Get object component so that we know how to edit the object

        :return: The component of this RadiusProvider.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this RadiusProvider.

        Get object component so that we know how to edit the object

        :param component: The component of this RadiusProvider.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def assigned_application_slug(self):
        """Gets the assigned_application_slug of this RadiusProvider.

        Internal application name, used in URLs.

        :return: The assigned_application_slug of this RadiusProvider.
        :rtype: str
        """
        return self._assigned_application_slug

    @assigned_application_slug.setter
    def assigned_application_slug(self, assigned_application_slug):
        """Sets the assigned_application_slug of this RadiusProvider.

        Internal application name, used in URLs.

        :param assigned_application_slug: The assigned_application_slug of this RadiusProvider.
        :type assigned_application_slug: str
        """
        if assigned_application_slug is None:
            raise ValueError("Invalid value for `assigned_application_slug`, must not be `None`")

        self._assigned_application_slug = assigned_application_slug

    @property
    def assigned_application_name(self):
        """Gets the assigned_application_name of this RadiusProvider.

        Application's display Name.

        :return: The assigned_application_name of this RadiusProvider.
        :rtype: str
        """
        return self._assigned_application_name

    @assigned_application_name.setter
    def assigned_application_name(self, assigned_application_name):
        """Sets the assigned_application_name of this RadiusProvider.

        Application's display Name.

        :param assigned_application_name: The assigned_application_name of this RadiusProvider.
        :type assigned_application_name: str
        """
        if assigned_application_name is None:
            raise ValueError("Invalid value for `assigned_application_name`, must not be `None`")

        self._assigned_application_name = assigned_application_name

    @property
    def assigned_backchannel_application_slug(self):
        """Gets the assigned_backchannel_application_slug of this RadiusProvider.

        Internal application name, used in URLs.

        :return: The assigned_backchannel_application_slug of this RadiusProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_slug

    @assigned_backchannel_application_slug.setter
    def assigned_backchannel_application_slug(self, assigned_backchannel_application_slug):
        """Sets the assigned_backchannel_application_slug of this RadiusProvider.

        Internal application name, used in URLs.

        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this RadiusProvider.
        :type assigned_backchannel_application_slug: str
        """
        if assigned_backchannel_application_slug is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_slug`, must not be `None`")

        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug

    @property
    def assigned_backchannel_application_name(self):
        """Gets the assigned_backchannel_application_name of this RadiusProvider.

        Application's display Name.

        :return: The assigned_backchannel_application_name of this RadiusProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_name

    @assigned_backchannel_application_name.setter
    def assigned_backchannel_application_name(self, assigned_backchannel_application_name):
        """Sets the assigned_backchannel_application_name of this RadiusProvider.

        Application's display Name.

        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this RadiusProvider.
        :type assigned_backchannel_application_name: str
        """
        if assigned_backchannel_application_name is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_name`, must not be `None`")

        self._assigned_backchannel_application_name = assigned_backchannel_application_name

    @property
    def verbose_name(self):
        """Gets the verbose_name of this RadiusProvider.

        Return object's verbose_name

        :return: The verbose_name of this RadiusProvider.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this RadiusProvider.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this RadiusProvider.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this RadiusProvider.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this RadiusProvider.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this RadiusProvider.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this RadiusProvider.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this RadiusProvider.

        Return internal model name

        :return: The meta_model_name of this RadiusProvider.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this RadiusProvider.

        Return internal model name

        :param meta_model_name: The meta_model_name of this RadiusProvider.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def client_networks(self):
        """Gets the client_networks of this RadiusProvider.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :return: The client_networks of this RadiusProvider.
        :rtype: str
        """
        return self._client_networks

    @client_networks.setter
    def client_networks(self, client_networks):
        """Sets the client_networks of this RadiusProvider.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :param client_networks: The client_networks of this RadiusProvider.
        :type client_networks: str
        """

        self._client_networks = client_networks

    @property
    def shared_secret(self):
        """Gets the shared_secret of this RadiusProvider.

        Shared secret between clients and server to hash packets.

        :return: The shared_secret of this RadiusProvider.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this RadiusProvider.

        Shared secret between clients and server to hash packets.

        :param shared_secret: The shared_secret of this RadiusProvider.
        :type shared_secret: str
        """

        self._shared_secret = shared_secret

    @property
    def outpost_set(self):
        """Gets the outpost_set of this RadiusProvider.


        :return: The outpost_set of this RadiusProvider.
        :rtype: List[str]
        """
        return self._outpost_set

    @outpost_set.setter
    def outpost_set(self, outpost_set):
        """Sets the outpost_set of this RadiusProvider.


        :param outpost_set: The outpost_set of this RadiusProvider.
        :type outpost_set: List[str]
        """
        if outpost_set is None:
            raise ValueError("Invalid value for `outpost_set`, must not be `None`")

        self._outpost_set = outpost_set

    @property
    def mfa_support(self):
        """Gets the mfa_support of this RadiusProvider.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :return: The mfa_support of this RadiusProvider.
        :rtype: bool
        """
        return self._mfa_support

    @mfa_support.setter
    def mfa_support(self, mfa_support):
        """Sets the mfa_support of this RadiusProvider.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :param mfa_support: The mfa_support of this RadiusProvider.
        :type mfa_support: bool
        """

        self._mfa_support = mfa_support
