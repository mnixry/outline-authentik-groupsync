# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.outgoing_sync_delete_action import OutgoingSyncDeleteAction
from authentik_openapi import util


class MicrosoftEntraProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, property_mappings: List[str]=None, property_mappings_group: List[str]=None, component: str=None, assigned_backchannel_application_slug: str=None, assigned_backchannel_application_name: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, client_id: str=None, client_secret: str=None, tenant_id: str=None, exclude_users_service_account: bool=None, filter_group: str=None, user_delete_action: OutgoingSyncDeleteAction=None, group_delete_action: OutgoingSyncDeleteAction=None):
        """MicrosoftEntraProvider - a model defined in OpenAPI

        :param pk: The pk of this MicrosoftEntraProvider.
        :param name: The name of this MicrosoftEntraProvider.
        :param property_mappings: The property_mappings of this MicrosoftEntraProvider.
        :param property_mappings_group: The property_mappings_group of this MicrosoftEntraProvider.
        :param component: The component of this MicrosoftEntraProvider.
        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this MicrosoftEntraProvider.
        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this MicrosoftEntraProvider.
        :param verbose_name: The verbose_name of this MicrosoftEntraProvider.
        :param verbose_name_plural: The verbose_name_plural of this MicrosoftEntraProvider.
        :param meta_model_name: The meta_model_name of this MicrosoftEntraProvider.
        :param client_id: The client_id of this MicrosoftEntraProvider.
        :param client_secret: The client_secret of this MicrosoftEntraProvider.
        :param tenant_id: The tenant_id of this MicrosoftEntraProvider.
        :param exclude_users_service_account: The exclude_users_service_account of this MicrosoftEntraProvider.
        :param filter_group: The filter_group of this MicrosoftEntraProvider.
        :param user_delete_action: The user_delete_action of this MicrosoftEntraProvider.
        :param group_delete_action: The group_delete_action of this MicrosoftEntraProvider.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'property_mappings': List[str],
            'property_mappings_group': List[str],
            'component': str,
            'assigned_backchannel_application_slug': str,
            'assigned_backchannel_application_name': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'client_id': str,
            'client_secret': str,
            'tenant_id': str,
            'exclude_users_service_account': bool,
            'filter_group': str,
            'user_delete_action': OutgoingSyncDeleteAction,
            'group_delete_action': OutgoingSyncDeleteAction
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'property_mappings': 'property_mappings',
            'property_mappings_group': 'property_mappings_group',
            'component': 'component',
            'assigned_backchannel_application_slug': 'assigned_backchannel_application_slug',
            'assigned_backchannel_application_name': 'assigned_backchannel_application_name',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'tenant_id': 'tenant_id',
            'exclude_users_service_account': 'exclude_users_service_account',
            'filter_group': 'filter_group',
            'user_delete_action': 'user_delete_action',
            'group_delete_action': 'group_delete_action'
        }

        self._pk = pk
        self._name = name
        self._property_mappings = property_mappings
        self._property_mappings_group = property_mappings_group
        self._component = component
        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug
        self._assigned_backchannel_application_name = assigned_backchannel_application_name
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._client_id = client_id
        self._client_secret = client_secret
        self._tenant_id = tenant_id
        self._exclude_users_service_account = exclude_users_service_account
        self._filter_group = filter_group
        self._user_delete_action = user_delete_action
        self._group_delete_action = group_delete_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MicrosoftEntraProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MicrosoftEntraProvider of this MicrosoftEntraProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this MicrosoftEntraProvider.


        :return: The pk of this MicrosoftEntraProvider.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this MicrosoftEntraProvider.


        :param pk: The pk of this MicrosoftEntraProvider.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this MicrosoftEntraProvider.


        :return: The name of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MicrosoftEntraProvider.


        :param name: The name of this MicrosoftEntraProvider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def property_mappings(self):
        """Gets the property_mappings of this MicrosoftEntraProvider.


        :return: The property_mappings of this MicrosoftEntraProvider.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this MicrosoftEntraProvider.


        :param property_mappings: The property_mappings of this MicrosoftEntraProvider.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def property_mappings_group(self):
        """Gets the property_mappings_group of this MicrosoftEntraProvider.

        Property mappings used for group creation/updating.

        :return: The property_mappings_group of this MicrosoftEntraProvider.
        :rtype: List[str]
        """
        return self._property_mappings_group

    @property_mappings_group.setter
    def property_mappings_group(self, property_mappings_group):
        """Sets the property_mappings_group of this MicrosoftEntraProvider.

        Property mappings used for group creation/updating.

        :param property_mappings_group: The property_mappings_group of this MicrosoftEntraProvider.
        :type property_mappings_group: List[str]
        """

        self._property_mappings_group = property_mappings_group

    @property
    def component(self):
        """Gets the component of this MicrosoftEntraProvider.

        Get object component so that we know how to edit the object

        :return: The component of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this MicrosoftEntraProvider.

        Get object component so that we know how to edit the object

        :param component: The component of this MicrosoftEntraProvider.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def assigned_backchannel_application_slug(self):
        """Gets the assigned_backchannel_application_slug of this MicrosoftEntraProvider.

        Internal application name, used in URLs.

        :return: The assigned_backchannel_application_slug of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_slug

    @assigned_backchannel_application_slug.setter
    def assigned_backchannel_application_slug(self, assigned_backchannel_application_slug):
        """Sets the assigned_backchannel_application_slug of this MicrosoftEntraProvider.

        Internal application name, used in URLs.

        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this MicrosoftEntraProvider.
        :type assigned_backchannel_application_slug: str
        """
        if assigned_backchannel_application_slug is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_slug`, must not be `None`")

        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug

    @property
    def assigned_backchannel_application_name(self):
        """Gets the assigned_backchannel_application_name of this MicrosoftEntraProvider.

        Application's display Name.

        :return: The assigned_backchannel_application_name of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_name

    @assigned_backchannel_application_name.setter
    def assigned_backchannel_application_name(self, assigned_backchannel_application_name):
        """Sets the assigned_backchannel_application_name of this MicrosoftEntraProvider.

        Application's display Name.

        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this MicrosoftEntraProvider.
        :type assigned_backchannel_application_name: str
        """
        if assigned_backchannel_application_name is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_name`, must not be `None`")

        self._assigned_backchannel_application_name = assigned_backchannel_application_name

    @property
    def verbose_name(self):
        """Gets the verbose_name of this MicrosoftEntraProvider.

        Return object's verbose_name

        :return: The verbose_name of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this MicrosoftEntraProvider.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this MicrosoftEntraProvider.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this MicrosoftEntraProvider.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this MicrosoftEntraProvider.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this MicrosoftEntraProvider.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this MicrosoftEntraProvider.

        Return internal model name

        :return: The meta_model_name of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this MicrosoftEntraProvider.

        Return internal model name

        :param meta_model_name: The meta_model_name of this MicrosoftEntraProvider.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def client_id(self):
        """Gets the client_id of this MicrosoftEntraProvider.


        :return: The client_id of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this MicrosoftEntraProvider.


        :param client_id: The client_id of this MicrosoftEntraProvider.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this MicrosoftEntraProvider.


        :return: The client_secret of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this MicrosoftEntraProvider.


        :param client_secret: The client_secret of this MicrosoftEntraProvider.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def tenant_id(self):
        """Gets the tenant_id of this MicrosoftEntraProvider.


        :return: The tenant_id of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this MicrosoftEntraProvider.


        :param tenant_id: The tenant_id of this MicrosoftEntraProvider.
        :type tenant_id: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")

        self._tenant_id = tenant_id

    @property
    def exclude_users_service_account(self):
        """Gets the exclude_users_service_account of this MicrosoftEntraProvider.


        :return: The exclude_users_service_account of this MicrosoftEntraProvider.
        :rtype: bool
        """
        return self._exclude_users_service_account

    @exclude_users_service_account.setter
    def exclude_users_service_account(self, exclude_users_service_account):
        """Sets the exclude_users_service_account of this MicrosoftEntraProvider.


        :param exclude_users_service_account: The exclude_users_service_account of this MicrosoftEntraProvider.
        :type exclude_users_service_account: bool
        """

        self._exclude_users_service_account = exclude_users_service_account

    @property
    def filter_group(self):
        """Gets the filter_group of this MicrosoftEntraProvider.


        :return: The filter_group of this MicrosoftEntraProvider.
        :rtype: str
        """
        return self._filter_group

    @filter_group.setter
    def filter_group(self, filter_group):
        """Sets the filter_group of this MicrosoftEntraProvider.


        :param filter_group: The filter_group of this MicrosoftEntraProvider.
        :type filter_group: str
        """

        self._filter_group = filter_group

    @property
    def user_delete_action(self):
        """Gets the user_delete_action of this MicrosoftEntraProvider.


        :return: The user_delete_action of this MicrosoftEntraProvider.
        :rtype: OutgoingSyncDeleteAction
        """
        return self._user_delete_action

    @user_delete_action.setter
    def user_delete_action(self, user_delete_action):
        """Sets the user_delete_action of this MicrosoftEntraProvider.


        :param user_delete_action: The user_delete_action of this MicrosoftEntraProvider.
        :type user_delete_action: OutgoingSyncDeleteAction
        """

        self._user_delete_action = user_delete_action

    @property
    def group_delete_action(self):
        """Gets the group_delete_action of this MicrosoftEntraProvider.


        :return: The group_delete_action of this MicrosoftEntraProvider.
        :rtype: OutgoingSyncDeleteAction
        """
        return self._group_delete_action

    @group_delete_action.setter
    def group_delete_action(self, group_delete_action):
        """Sets the group_delete_action of this MicrosoftEntraProvider.


        :param group_delete_action: The group_delete_action of this MicrosoftEntraProvider.
        :type group_delete_action: OutgoingSyncDeleteAction
        """

        self._group_delete_action = group_delete_action
