# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set import FlowSet
from authentik_openapi import util


class DenyStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, flow_set: List[FlowSet]=None, deny_message: str=None):
        """DenyStage - a model defined in OpenAPI

        :param pk: The pk of this DenyStage.
        :param name: The name of this DenyStage.
        :param component: The component of this DenyStage.
        :param verbose_name: The verbose_name of this DenyStage.
        :param verbose_name_plural: The verbose_name_plural of this DenyStage.
        :param meta_model_name: The meta_model_name of this DenyStage.
        :param flow_set: The flow_set of this DenyStage.
        :param deny_message: The deny_message of this DenyStage.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'flow_set': List[FlowSet],
            'deny_message': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'flow_set': 'flow_set',
            'deny_message': 'deny_message'
        }

        self._pk = pk
        self._name = name
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._flow_set = flow_set
        self._deny_message = deny_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DenyStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DenyStage of this DenyStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this DenyStage.


        :return: The pk of this DenyStage.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this DenyStage.


        :param pk: The pk of this DenyStage.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this DenyStage.


        :return: The name of this DenyStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DenyStage.


        :param name: The name of this DenyStage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def component(self):
        """Gets the component of this DenyStage.

        Get object type so that we know how to edit the object

        :return: The component of this DenyStage.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this DenyStage.

        Get object type so that we know how to edit the object

        :param component: The component of this DenyStage.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this DenyStage.

        Return object's verbose_name

        :return: The verbose_name of this DenyStage.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this DenyStage.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this DenyStage.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this DenyStage.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this DenyStage.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this DenyStage.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this DenyStage.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this DenyStage.

        Return internal model name

        :return: The meta_model_name of this DenyStage.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this DenyStage.

        Return internal model name

        :param meta_model_name: The meta_model_name of this DenyStage.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def flow_set(self):
        """Gets the flow_set of this DenyStage.


        :return: The flow_set of this DenyStage.
        :rtype: List[FlowSet]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this DenyStage.


        :param flow_set: The flow_set of this DenyStage.
        :type flow_set: List[FlowSet]
        """

        self._flow_set = flow_set

    @property
    def deny_message(self):
        """Gets the deny_message of this DenyStage.


        :return: The deny_message of this DenyStage.
        :rtype: str
        """
        return self._deny_message

    @deny_message.setter
    def deny_message(self, deny_message):
        """Sets the deny_message of this DenyStage.


        :param deny_message: The deny_message of this DenyStage.
        :type deny_message: str
        """

        self._deny_message = deny_message
