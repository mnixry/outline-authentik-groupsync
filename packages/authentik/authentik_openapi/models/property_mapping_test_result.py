# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PropertyMappingTestResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result: str=None, successful: bool=None):
        """PropertyMappingTestResult - a model defined in OpenAPI

        :param result: The result of this PropertyMappingTestResult.
        :param successful: The successful of this PropertyMappingTestResult.
        """
        self.openapi_types = {
            'result': str,
            'successful': bool
        }

        self.attribute_map = {
            'result': 'result',
            'successful': 'successful'
        }

        self._result = result
        self._successful = successful

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyMappingTestResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyMappingTestResult of this PropertyMappingTestResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self):
        """Gets the result of this PropertyMappingTestResult.


        :return: The result of this PropertyMappingTestResult.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PropertyMappingTestResult.


        :param result: The result of this PropertyMappingTestResult.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def successful(self):
        """Gets the successful of this PropertyMappingTestResult.


        :return: The successful of this PropertyMappingTestResult.
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this PropertyMappingTestResult.


        :param successful: The successful of this PropertyMappingTestResult.
        :type successful: bool
        """
        if successful is None:
            raise ValueError("Invalid value for `successful`, must not be `None`")

        self._successful = successful
