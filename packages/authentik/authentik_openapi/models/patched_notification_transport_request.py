# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.notification_transport_mode_enum import NotificationTransportModeEnum
from authentik_openapi import util


class PatchedNotificationTransportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, mode: NotificationTransportModeEnum=None, webhook_url: str=None, webhook_mapping: str=None, send_once: bool=None):
        """PatchedNotificationTransportRequest - a model defined in OpenAPI

        :param name: The name of this PatchedNotificationTransportRequest.
        :param mode: The mode of this PatchedNotificationTransportRequest.
        :param webhook_url: The webhook_url of this PatchedNotificationTransportRequest.
        :param webhook_mapping: The webhook_mapping of this PatchedNotificationTransportRequest.
        :param send_once: The send_once of this PatchedNotificationTransportRequest.
        """
        self.openapi_types = {
            'name': str,
            'mode': NotificationTransportModeEnum,
            'webhook_url': str,
            'webhook_mapping': str,
            'send_once': bool
        }

        self.attribute_map = {
            'name': 'name',
            'mode': 'mode',
            'webhook_url': 'webhook_url',
            'webhook_mapping': 'webhook_mapping',
            'send_once': 'send_once'
        }

        self._name = name
        self._mode = mode
        self._webhook_url = webhook_url
        self._webhook_mapping = webhook_mapping
        self._send_once = send_once

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedNotificationTransportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedNotificationTransportRequest of this PatchedNotificationTransportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedNotificationTransportRequest.


        :return: The name of this PatchedNotificationTransportRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedNotificationTransportRequest.


        :param name: The name of this PatchedNotificationTransportRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def mode(self):
        """Gets the mode of this PatchedNotificationTransportRequest.


        :return: The mode of this PatchedNotificationTransportRequest.
        :rtype: NotificationTransportModeEnum
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PatchedNotificationTransportRequest.


        :param mode: The mode of this PatchedNotificationTransportRequest.
        :type mode: NotificationTransportModeEnum
        """

        self._mode = mode

    @property
    def webhook_url(self):
        """Gets the webhook_url of this PatchedNotificationTransportRequest.


        :return: The webhook_url of this PatchedNotificationTransportRequest.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this PatchedNotificationTransportRequest.


        :param webhook_url: The webhook_url of this PatchedNotificationTransportRequest.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url

    @property
    def webhook_mapping(self):
        """Gets the webhook_mapping of this PatchedNotificationTransportRequest.


        :return: The webhook_mapping of this PatchedNotificationTransportRequest.
        :rtype: str
        """
        return self._webhook_mapping

    @webhook_mapping.setter
    def webhook_mapping(self, webhook_mapping):
        """Sets the webhook_mapping of this PatchedNotificationTransportRequest.


        :param webhook_mapping: The webhook_mapping of this PatchedNotificationTransportRequest.
        :type webhook_mapping: str
        """

        self._webhook_mapping = webhook_mapping

    @property
    def send_once(self):
        """Gets the send_once of this PatchedNotificationTransportRequest.

        Only send notification once, for example when sending a webhook into a chat channel.

        :return: The send_once of this PatchedNotificationTransportRequest.
        :rtype: bool
        """
        return self._send_once

    @send_once.setter
    def send_once(self, send_once):
        """Sets the send_once of this PatchedNotificationTransportRequest.

        Only send notification once, for example when sending a webhook into a chat channel.

        :param send_once: The send_once of this PatchedNotificationTransportRequest.
        :type send_once: bool
        """

        self._send_once = send_once
