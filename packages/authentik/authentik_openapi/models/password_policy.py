# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PasswordPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, execution_logging: bool=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, bound_to: int=None, password_field: str=None, amount_digits: int=None, amount_uppercase: int=None, amount_lowercase: int=None, amount_symbols: int=None, length_min: int=None, symbol_charset: str=None, error_message: str=None, check_static_rules: bool=None, check_have_i_been_pwned: bool=None, check_zxcvbn: bool=None, hibp_allowed_count: int=None, zxcvbn_score_threshold: int=None):
        """PasswordPolicy - a model defined in OpenAPI

        :param pk: The pk of this PasswordPolicy.
        :param name: The name of this PasswordPolicy.
        :param execution_logging: The execution_logging of this PasswordPolicy.
        :param component: The component of this PasswordPolicy.
        :param verbose_name: The verbose_name of this PasswordPolicy.
        :param verbose_name_plural: The verbose_name_plural of this PasswordPolicy.
        :param meta_model_name: The meta_model_name of this PasswordPolicy.
        :param bound_to: The bound_to of this PasswordPolicy.
        :param password_field: The password_field of this PasswordPolicy.
        :param amount_digits: The amount_digits of this PasswordPolicy.
        :param amount_uppercase: The amount_uppercase of this PasswordPolicy.
        :param amount_lowercase: The amount_lowercase of this PasswordPolicy.
        :param amount_symbols: The amount_symbols of this PasswordPolicy.
        :param length_min: The length_min of this PasswordPolicy.
        :param symbol_charset: The symbol_charset of this PasswordPolicy.
        :param error_message: The error_message of this PasswordPolicy.
        :param check_static_rules: The check_static_rules of this PasswordPolicy.
        :param check_have_i_been_pwned: The check_have_i_been_pwned of this PasswordPolicy.
        :param check_zxcvbn: The check_zxcvbn of this PasswordPolicy.
        :param hibp_allowed_count: The hibp_allowed_count of this PasswordPolicy.
        :param zxcvbn_score_threshold: The zxcvbn_score_threshold of this PasswordPolicy.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'execution_logging': bool,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'bound_to': int,
            'password_field': str,
            'amount_digits': int,
            'amount_uppercase': int,
            'amount_lowercase': int,
            'amount_symbols': int,
            'length_min': int,
            'symbol_charset': str,
            'error_message': str,
            'check_static_rules': bool,
            'check_have_i_been_pwned': bool,
            'check_zxcvbn': bool,
            'hibp_allowed_count': int,
            'zxcvbn_score_threshold': int
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'execution_logging': 'execution_logging',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'bound_to': 'bound_to',
            'password_field': 'password_field',
            'amount_digits': 'amount_digits',
            'amount_uppercase': 'amount_uppercase',
            'amount_lowercase': 'amount_lowercase',
            'amount_symbols': 'amount_symbols',
            'length_min': 'length_min',
            'symbol_charset': 'symbol_charset',
            'error_message': 'error_message',
            'check_static_rules': 'check_static_rules',
            'check_have_i_been_pwned': 'check_have_i_been_pwned',
            'check_zxcvbn': 'check_zxcvbn',
            'hibp_allowed_count': 'hibp_allowed_count',
            'zxcvbn_score_threshold': 'zxcvbn_score_threshold'
        }

        self._pk = pk
        self._name = name
        self._execution_logging = execution_logging
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._bound_to = bound_to
        self._password_field = password_field
        self._amount_digits = amount_digits
        self._amount_uppercase = amount_uppercase
        self._amount_lowercase = amount_lowercase
        self._amount_symbols = amount_symbols
        self._length_min = length_min
        self._symbol_charset = symbol_charset
        self._error_message = error_message
        self._check_static_rules = check_static_rules
        self._check_have_i_been_pwned = check_have_i_been_pwned
        self._check_zxcvbn = check_zxcvbn
        self._hibp_allowed_count = hibp_allowed_count
        self._zxcvbn_score_threshold = zxcvbn_score_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordPolicy of this PasswordPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this PasswordPolicy.


        :return: The pk of this PasswordPolicy.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this PasswordPolicy.


        :param pk: The pk of this PasswordPolicy.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this PasswordPolicy.


        :return: The name of this PasswordPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PasswordPolicy.


        :param name: The name of this PasswordPolicy.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def execution_logging(self):
        """Gets the execution_logging of this PasswordPolicy.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :return: The execution_logging of this PasswordPolicy.
        :rtype: bool
        """
        return self._execution_logging

    @execution_logging.setter
    def execution_logging(self, execution_logging):
        """Sets the execution_logging of this PasswordPolicy.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :param execution_logging: The execution_logging of this PasswordPolicy.
        :type execution_logging: bool
        """

        self._execution_logging = execution_logging

    @property
    def component(self):
        """Gets the component of this PasswordPolicy.

        Get object component so that we know how to edit the object

        :return: The component of this PasswordPolicy.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this PasswordPolicy.

        Get object component so that we know how to edit the object

        :param component: The component of this PasswordPolicy.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this PasswordPolicy.

        Return object's verbose_name

        :return: The verbose_name of this PasswordPolicy.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this PasswordPolicy.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this PasswordPolicy.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this PasswordPolicy.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this PasswordPolicy.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this PasswordPolicy.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this PasswordPolicy.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this PasswordPolicy.

        Return internal model name

        :return: The meta_model_name of this PasswordPolicy.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this PasswordPolicy.

        Return internal model name

        :param meta_model_name: The meta_model_name of this PasswordPolicy.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def bound_to(self):
        """Gets the bound_to of this PasswordPolicy.

        Return objects policy is bound to

        :return: The bound_to of this PasswordPolicy.
        :rtype: int
        """
        return self._bound_to

    @bound_to.setter
    def bound_to(self, bound_to):
        """Sets the bound_to of this PasswordPolicy.

        Return objects policy is bound to

        :param bound_to: The bound_to of this PasswordPolicy.
        :type bound_to: int
        """
        if bound_to is None:
            raise ValueError("Invalid value for `bound_to`, must not be `None`")

        self._bound_to = bound_to

    @property
    def password_field(self):
        """Gets the password_field of this PasswordPolicy.

        Field key to check, field keys defined in Prompt stages are available.

        :return: The password_field of this PasswordPolicy.
        :rtype: str
        """
        return self._password_field

    @password_field.setter
    def password_field(self, password_field):
        """Sets the password_field of this PasswordPolicy.

        Field key to check, field keys defined in Prompt stages are available.

        :param password_field: The password_field of this PasswordPolicy.
        :type password_field: str
        """

        self._password_field = password_field

    @property
    def amount_digits(self):
        """Gets the amount_digits of this PasswordPolicy.


        :return: The amount_digits of this PasswordPolicy.
        :rtype: int
        """
        return self._amount_digits

    @amount_digits.setter
    def amount_digits(self, amount_digits):
        """Sets the amount_digits of this PasswordPolicy.


        :param amount_digits: The amount_digits of this PasswordPolicy.
        :type amount_digits: int
        """
        if amount_digits is not None and amount_digits > 2147483647:
            raise ValueError("Invalid value for `amount_digits`, must be a value less than or equal to `2147483647`")
        if amount_digits is not None and amount_digits < 0:
            raise ValueError("Invalid value for `amount_digits`, must be a value greater than or equal to `0`")

        self._amount_digits = amount_digits

    @property
    def amount_uppercase(self):
        """Gets the amount_uppercase of this PasswordPolicy.


        :return: The amount_uppercase of this PasswordPolicy.
        :rtype: int
        """
        return self._amount_uppercase

    @amount_uppercase.setter
    def amount_uppercase(self, amount_uppercase):
        """Sets the amount_uppercase of this PasswordPolicy.


        :param amount_uppercase: The amount_uppercase of this PasswordPolicy.
        :type amount_uppercase: int
        """
        if amount_uppercase is not None and amount_uppercase > 2147483647:
            raise ValueError("Invalid value for `amount_uppercase`, must be a value less than or equal to `2147483647`")
        if amount_uppercase is not None and amount_uppercase < 0:
            raise ValueError("Invalid value for `amount_uppercase`, must be a value greater than or equal to `0`")

        self._amount_uppercase = amount_uppercase

    @property
    def amount_lowercase(self):
        """Gets the amount_lowercase of this PasswordPolicy.


        :return: The amount_lowercase of this PasswordPolicy.
        :rtype: int
        """
        return self._amount_lowercase

    @amount_lowercase.setter
    def amount_lowercase(self, amount_lowercase):
        """Sets the amount_lowercase of this PasswordPolicy.


        :param amount_lowercase: The amount_lowercase of this PasswordPolicy.
        :type amount_lowercase: int
        """
        if amount_lowercase is not None and amount_lowercase > 2147483647:
            raise ValueError("Invalid value for `amount_lowercase`, must be a value less than or equal to `2147483647`")
        if amount_lowercase is not None and amount_lowercase < 0:
            raise ValueError("Invalid value for `amount_lowercase`, must be a value greater than or equal to `0`")

        self._amount_lowercase = amount_lowercase

    @property
    def amount_symbols(self):
        """Gets the amount_symbols of this PasswordPolicy.


        :return: The amount_symbols of this PasswordPolicy.
        :rtype: int
        """
        return self._amount_symbols

    @amount_symbols.setter
    def amount_symbols(self, amount_symbols):
        """Sets the amount_symbols of this PasswordPolicy.


        :param amount_symbols: The amount_symbols of this PasswordPolicy.
        :type amount_symbols: int
        """
        if amount_symbols is not None and amount_symbols > 2147483647:
            raise ValueError("Invalid value for `amount_symbols`, must be a value less than or equal to `2147483647`")
        if amount_symbols is not None and amount_symbols < 0:
            raise ValueError("Invalid value for `amount_symbols`, must be a value greater than or equal to `0`")

        self._amount_symbols = amount_symbols

    @property
    def length_min(self):
        """Gets the length_min of this PasswordPolicy.


        :return: The length_min of this PasswordPolicy.
        :rtype: int
        """
        return self._length_min

    @length_min.setter
    def length_min(self, length_min):
        """Sets the length_min of this PasswordPolicy.


        :param length_min: The length_min of this PasswordPolicy.
        :type length_min: int
        """
        if length_min is not None and length_min > 2147483647:
            raise ValueError("Invalid value for `length_min`, must be a value less than or equal to `2147483647`")
        if length_min is not None and length_min < 0:
            raise ValueError("Invalid value for `length_min`, must be a value greater than or equal to `0`")

        self._length_min = length_min

    @property
    def symbol_charset(self):
        """Gets the symbol_charset of this PasswordPolicy.


        :return: The symbol_charset of this PasswordPolicy.
        :rtype: str
        """
        return self._symbol_charset

    @symbol_charset.setter
    def symbol_charset(self, symbol_charset):
        """Sets the symbol_charset of this PasswordPolicy.


        :param symbol_charset: The symbol_charset of this PasswordPolicy.
        :type symbol_charset: str
        """

        self._symbol_charset = symbol_charset

    @property
    def error_message(self):
        """Gets the error_message of this PasswordPolicy.


        :return: The error_message of this PasswordPolicy.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PasswordPolicy.


        :param error_message: The error_message of this PasswordPolicy.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def check_static_rules(self):
        """Gets the check_static_rules of this PasswordPolicy.


        :return: The check_static_rules of this PasswordPolicy.
        :rtype: bool
        """
        return self._check_static_rules

    @check_static_rules.setter
    def check_static_rules(self, check_static_rules):
        """Sets the check_static_rules of this PasswordPolicy.


        :param check_static_rules: The check_static_rules of this PasswordPolicy.
        :type check_static_rules: bool
        """

        self._check_static_rules = check_static_rules

    @property
    def check_have_i_been_pwned(self):
        """Gets the check_have_i_been_pwned of this PasswordPolicy.


        :return: The check_have_i_been_pwned of this PasswordPolicy.
        :rtype: bool
        """
        return self._check_have_i_been_pwned

    @check_have_i_been_pwned.setter
    def check_have_i_been_pwned(self, check_have_i_been_pwned):
        """Sets the check_have_i_been_pwned of this PasswordPolicy.


        :param check_have_i_been_pwned: The check_have_i_been_pwned of this PasswordPolicy.
        :type check_have_i_been_pwned: bool
        """

        self._check_have_i_been_pwned = check_have_i_been_pwned

    @property
    def check_zxcvbn(self):
        """Gets the check_zxcvbn of this PasswordPolicy.


        :return: The check_zxcvbn of this PasswordPolicy.
        :rtype: bool
        """
        return self._check_zxcvbn

    @check_zxcvbn.setter
    def check_zxcvbn(self, check_zxcvbn):
        """Sets the check_zxcvbn of this PasswordPolicy.


        :param check_zxcvbn: The check_zxcvbn of this PasswordPolicy.
        :type check_zxcvbn: bool
        """

        self._check_zxcvbn = check_zxcvbn

    @property
    def hibp_allowed_count(self):
        """Gets the hibp_allowed_count of this PasswordPolicy.

        How many times the password hash is allowed to be on haveibeenpwned

        :return: The hibp_allowed_count of this PasswordPolicy.
        :rtype: int
        """
        return self._hibp_allowed_count

    @hibp_allowed_count.setter
    def hibp_allowed_count(self, hibp_allowed_count):
        """Sets the hibp_allowed_count of this PasswordPolicy.

        How many times the password hash is allowed to be on haveibeenpwned

        :param hibp_allowed_count: The hibp_allowed_count of this PasswordPolicy.
        :type hibp_allowed_count: int
        """
        if hibp_allowed_count is not None and hibp_allowed_count > 2147483647:
            raise ValueError("Invalid value for `hibp_allowed_count`, must be a value less than or equal to `2147483647`")
        if hibp_allowed_count is not None and hibp_allowed_count < 0:
            raise ValueError("Invalid value for `hibp_allowed_count`, must be a value greater than or equal to `0`")

        self._hibp_allowed_count = hibp_allowed_count

    @property
    def zxcvbn_score_threshold(self):
        """Gets the zxcvbn_score_threshold of this PasswordPolicy.

        If the zxcvbn score is equal or less than this value, the policy will fail.

        :return: The zxcvbn_score_threshold of this PasswordPolicy.
        :rtype: int
        """
        return self._zxcvbn_score_threshold

    @zxcvbn_score_threshold.setter
    def zxcvbn_score_threshold(self, zxcvbn_score_threshold):
        """Sets the zxcvbn_score_threshold of this PasswordPolicy.

        If the zxcvbn score is equal or less than this value, the policy will fail.

        :param zxcvbn_score_threshold: The zxcvbn_score_threshold of this PasswordPolicy.
        :type zxcvbn_score_threshold: int
        """
        if zxcvbn_score_threshold is not None and zxcvbn_score_threshold > 2147483647:
            raise ValueError("Invalid value for `zxcvbn_score_threshold`, must be a value less than or equal to `2147483647`")
        if zxcvbn_score_threshold is not None and zxcvbn_score_threshold < 0:
            raise ValueError("Invalid value for `zxcvbn_score_threshold`, must be a value greater than or equal to `0`")

        self._zxcvbn_score_threshold = zxcvbn_score_threshold
