# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class AuthenticatedSessionGeoIp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, continent: str=None, country: str=None, lat: float=None, long: float=None, city: str=None):
        """AuthenticatedSessionGeoIp - a model defined in OpenAPI

        :param continent: The continent of this AuthenticatedSessionGeoIp.
        :param country: The country of this AuthenticatedSessionGeoIp.
        :param lat: The lat of this AuthenticatedSessionGeoIp.
        :param long: The long of this AuthenticatedSessionGeoIp.
        :param city: The city of this AuthenticatedSessionGeoIp.
        """
        self.openapi_types = {
            'continent': str,
            'country': str,
            'lat': float,
            'long': float,
            'city': str
        }

        self.attribute_map = {
            'continent': 'continent',
            'country': 'country',
            'lat': 'lat',
            'long': 'long',
            'city': 'city'
        }

        self._continent = continent
        self._country = country
        self._lat = lat
        self._long = long
        self._city = city

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatedSessionGeoIp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatedSession_geo_ip of this AuthenticatedSessionGeoIp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continent(self):
        """Gets the continent of this AuthenticatedSessionGeoIp.


        :return: The continent of this AuthenticatedSessionGeoIp.
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this AuthenticatedSessionGeoIp.


        :param continent: The continent of this AuthenticatedSessionGeoIp.
        :type continent: str
        """
        if continent is None:
            raise ValueError("Invalid value for `continent`, must not be `None`")

        self._continent = continent

    @property
    def country(self):
        """Gets the country of this AuthenticatedSessionGeoIp.


        :return: The country of this AuthenticatedSessionGeoIp.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AuthenticatedSessionGeoIp.


        :param country: The country of this AuthenticatedSessionGeoIp.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def lat(self):
        """Gets the lat of this AuthenticatedSessionGeoIp.


        :return: The lat of this AuthenticatedSessionGeoIp.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this AuthenticatedSessionGeoIp.


        :param lat: The lat of this AuthenticatedSessionGeoIp.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def long(self):
        """Gets the long of this AuthenticatedSessionGeoIp.


        :return: The long of this AuthenticatedSessionGeoIp.
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this AuthenticatedSessionGeoIp.


        :param long: The long of this AuthenticatedSessionGeoIp.
        :type long: float
        """
        if long is None:
            raise ValueError("Invalid value for `long`, must not be `None`")

        self._long = long

    @property
    def city(self):
        """Gets the city of this AuthenticatedSessionGeoIp.


        :return: The city of this AuthenticatedSessionGeoIp.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AuthenticatedSessionGeoIp.


        :param city: The city of this AuthenticatedSessionGeoIp.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city
