# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PatchedScopeMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed: str=None, name: str=None, expression: str=None, scope_name: str=None, description: str=None):
        """PatchedScopeMappingRequest - a model defined in OpenAPI

        :param managed: The managed of this PatchedScopeMappingRequest.
        :param name: The name of this PatchedScopeMappingRequest.
        :param expression: The expression of this PatchedScopeMappingRequest.
        :param scope_name: The scope_name of this PatchedScopeMappingRequest.
        :param description: The description of this PatchedScopeMappingRequest.
        """
        self.openapi_types = {
            'managed': str,
            'name': str,
            'expression': str,
            'scope_name': str,
            'description': str
        }

        self.attribute_map = {
            'managed': 'managed',
            'name': 'name',
            'expression': 'expression',
            'scope_name': 'scope_name',
            'description': 'description'
        }

        self._managed = managed
        self._name = name
        self._expression = expression
        self._scope_name = scope_name
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedScopeMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedScopeMappingRequest of this PatchedScopeMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed(self):
        """Gets the managed of this PatchedScopeMappingRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this PatchedScopeMappingRequest.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this PatchedScopeMappingRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this PatchedScopeMappingRequest.
        :type managed: str
        """
        if managed is not None and len(managed) < 1:
            raise ValueError("Invalid value for `managed`, length must be greater than or equal to `1`")

        self._managed = managed

    @property
    def name(self):
        """Gets the name of this PatchedScopeMappingRequest.


        :return: The name of this PatchedScopeMappingRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedScopeMappingRequest.


        :param name: The name of this PatchedScopeMappingRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def expression(self):
        """Gets the expression of this PatchedScopeMappingRequest.


        :return: The expression of this PatchedScopeMappingRequest.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this PatchedScopeMappingRequest.


        :param expression: The expression of this PatchedScopeMappingRequest.
        :type expression: str
        """
        if expression is not None and len(expression) < 1:
            raise ValueError("Invalid value for `expression`, length must be greater than or equal to `1`")

        self._expression = expression

    @property
    def scope_name(self):
        """Gets the scope_name of this PatchedScopeMappingRequest.

        Scope name requested by the client

        :return: The scope_name of this PatchedScopeMappingRequest.
        :rtype: str
        """
        return self._scope_name

    @scope_name.setter
    def scope_name(self, scope_name):
        """Sets the scope_name of this PatchedScopeMappingRequest.

        Scope name requested by the client

        :param scope_name: The scope_name of this PatchedScopeMappingRequest.
        :type scope_name: str
        """
        if scope_name is not None and len(scope_name) < 1:
            raise ValueError("Invalid value for `scope_name`, length must be greater than or equal to `1`")

        self._scope_name = scope_name

    @property
    def description(self):
        """Gets the description of this PatchedScopeMappingRequest.

        Description shown to the user when consenting. If left empty, the user won't be informed.

        :return: The description of this PatchedScopeMappingRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PatchedScopeMappingRequest.

        Description shown to the user when consenting. If left empty, the user won't be informed.

        :param description: The description of this PatchedScopeMappingRequest.
        :type description: str
        """

        self._description = description
