# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.used_by_action_enum import UsedByActionEnum
from authentik_openapi import util


class UsedBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: str=None, model_name: str=None, pk: str=None, name: str=None, action: UsedByActionEnum=None):
        """UsedBy - a model defined in OpenAPI

        :param app: The app of this UsedBy.
        :param model_name: The model_name of this UsedBy.
        :param pk: The pk of this UsedBy.
        :param name: The name of this UsedBy.
        :param action: The action of this UsedBy.
        """
        self.openapi_types = {
            'app': str,
            'model_name': str,
            'pk': str,
            'name': str,
            'action': UsedByActionEnum
        }

        self.attribute_map = {
            'app': 'app',
            'model_name': 'model_name',
            'pk': 'pk',
            'name': 'name',
            'action': 'action'
        }

        self._app = app
        self._model_name = model_name
        self._pk = pk
        self._name = name
        self._action = action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsedBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsedBy of this UsedBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this UsedBy.


        :return: The app of this UsedBy.
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this UsedBy.


        :param app: The app of this UsedBy.
        :type app: str
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def model_name(self):
        """Gets the model_name of this UsedBy.


        :return: The model_name of this UsedBy.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this UsedBy.


        :param model_name: The model_name of this UsedBy.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def pk(self):
        """Gets the pk of this UsedBy.


        :return: The pk of this UsedBy.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this UsedBy.


        :param pk: The pk of this UsedBy.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this UsedBy.


        :return: The name of this UsedBy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsedBy.


        :param name: The name of this UsedBy.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def action(self):
        """Gets the action of this UsedBy.


        :return: The action of this UsedBy.
        :rtype: UsedByActionEnum
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UsedBy.


        :param action: The action of this UsedBy.
        :type action: UsedByActionEnum
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action
