# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class ScopeMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, managed: str=None, name: str=None, expression: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, scope_name: str=None, description: str=None):
        """ScopeMapping - a model defined in OpenAPI

        :param pk: The pk of this ScopeMapping.
        :param managed: The managed of this ScopeMapping.
        :param name: The name of this ScopeMapping.
        :param expression: The expression of this ScopeMapping.
        :param component: The component of this ScopeMapping.
        :param verbose_name: The verbose_name of this ScopeMapping.
        :param verbose_name_plural: The verbose_name_plural of this ScopeMapping.
        :param meta_model_name: The meta_model_name of this ScopeMapping.
        :param scope_name: The scope_name of this ScopeMapping.
        :param description: The description of this ScopeMapping.
        """
        self.openapi_types = {
            'pk': str,
            'managed': str,
            'name': str,
            'expression': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'scope_name': str,
            'description': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'managed': 'managed',
            'name': 'name',
            'expression': 'expression',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'scope_name': 'scope_name',
            'description': 'description'
        }

        self._pk = pk
        self._managed = managed
        self._name = name
        self._expression = expression
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._scope_name = scope_name
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScopeMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScopeMapping of this ScopeMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this ScopeMapping.


        :return: The pk of this ScopeMapping.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this ScopeMapping.


        :param pk: The pk of this ScopeMapping.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def managed(self):
        """Gets the managed of this ScopeMapping.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this ScopeMapping.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this ScopeMapping.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this ScopeMapping.
        :type managed: str
        """

        self._managed = managed

    @property
    def name(self):
        """Gets the name of this ScopeMapping.


        :return: The name of this ScopeMapping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScopeMapping.


        :param name: The name of this ScopeMapping.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def expression(self):
        """Gets the expression of this ScopeMapping.


        :return: The expression of this ScopeMapping.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this ScopeMapping.


        :param expression: The expression of this ScopeMapping.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def component(self):
        """Gets the component of this ScopeMapping.

        Get object's component so that we know how to edit the object

        :return: The component of this ScopeMapping.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ScopeMapping.

        Get object's component so that we know how to edit the object

        :param component: The component of this ScopeMapping.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this ScopeMapping.

        Return object's verbose_name

        :return: The verbose_name of this ScopeMapping.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this ScopeMapping.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this ScopeMapping.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this ScopeMapping.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this ScopeMapping.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this ScopeMapping.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this ScopeMapping.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this ScopeMapping.

        Return internal model name

        :return: The meta_model_name of this ScopeMapping.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this ScopeMapping.

        Return internal model name

        :param meta_model_name: The meta_model_name of this ScopeMapping.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def scope_name(self):
        """Gets the scope_name of this ScopeMapping.

        Scope name requested by the client

        :return: The scope_name of this ScopeMapping.
        :rtype: str
        """
        return self._scope_name

    @scope_name.setter
    def scope_name(self, scope_name):
        """Sets the scope_name of this ScopeMapping.

        Scope name requested by the client

        :param scope_name: The scope_name of this ScopeMapping.
        :type scope_name: str
        """
        if scope_name is None:
            raise ValueError("Invalid value for `scope_name`, must not be `None`")

        self._scope_name = scope_name

    @property
    def description(self):
        """Gets the description of this ScopeMapping.

        Description shown to the user when consenting. If left empty, the user won't be informed.

        :return: The description of this ScopeMapping.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScopeMapping.

        Description shown to the user when consenting. If left empty, the user won't be informed.

        :param description: The description of this ScopeMapping.
        :type description: str
        """

        self._description = description
