# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class AuthenticatedSessionUserAgentDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, family: str=None, model: str=None):
        """AuthenticatedSessionUserAgentDevice - a model defined in OpenAPI

        :param brand: The brand of this AuthenticatedSessionUserAgentDevice.
        :param family: The family of this AuthenticatedSessionUserAgentDevice.
        :param model: The model of this AuthenticatedSessionUserAgentDevice.
        """
        self.openapi_types = {
            'brand': str,
            'family': str,
            'model': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'family': 'family',
            'model': 'model'
        }

        self._brand = brand
        self._family = family
        self._model = model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatedSessionUserAgentDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatedSession_user_agent_device of this AuthenticatedSessionUserAgentDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this AuthenticatedSessionUserAgentDevice.


        :return: The brand of this AuthenticatedSessionUserAgentDevice.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this AuthenticatedSessionUserAgentDevice.


        :param brand: The brand of this AuthenticatedSessionUserAgentDevice.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def family(self):
        """Gets the family of this AuthenticatedSessionUserAgentDevice.


        :return: The family of this AuthenticatedSessionUserAgentDevice.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this AuthenticatedSessionUserAgentDevice.


        :param family: The family of this AuthenticatedSessionUserAgentDevice.
        :type family: str
        """
        if family is None:
            raise ValueError("Invalid value for `family`, must not be `None`")

        self._family = family

    @property
    def model(self):
        """Gets the model of this AuthenticatedSessionUserAgentDevice.


        :return: The model of this AuthenticatedSessionUserAgentDevice.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AuthenticatedSessionUserAgentDevice.


        :param model: The model of this AuthenticatedSessionUserAgentDevice.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model
