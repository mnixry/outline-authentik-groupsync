# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.license_flags_enum import LicenseFlagsEnum
from authentik_openapi.models.license_summary_status_enum import LicenseSummaryStatusEnum
from authentik_openapi import util


class LicenseSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, internal_users: int=None, external_users: int=None, status: LicenseSummaryStatusEnum=None, latest_valid: datetime=None, license_flags: List[LicenseFlagsEnum]=None):
        """LicenseSummary - a model defined in OpenAPI

        :param internal_users: The internal_users of this LicenseSummary.
        :param external_users: The external_users of this LicenseSummary.
        :param status: The status of this LicenseSummary.
        :param latest_valid: The latest_valid of this LicenseSummary.
        :param license_flags: The license_flags of this LicenseSummary.
        """
        self.openapi_types = {
            'internal_users': int,
            'external_users': int,
            'status': LicenseSummaryStatusEnum,
            'latest_valid': datetime,
            'license_flags': List[LicenseFlagsEnum]
        }

        self.attribute_map = {
            'internal_users': 'internal_users',
            'external_users': 'external_users',
            'status': 'status',
            'latest_valid': 'latest_valid',
            'license_flags': 'license_flags'
        }

        self._internal_users = internal_users
        self._external_users = external_users
        self._status = status
        self._latest_valid = latest_valid
        self._license_flags = license_flags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseSummary of this LicenseSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def internal_users(self):
        """Gets the internal_users of this LicenseSummary.


        :return: The internal_users of this LicenseSummary.
        :rtype: int
        """
        return self._internal_users

    @internal_users.setter
    def internal_users(self, internal_users):
        """Sets the internal_users of this LicenseSummary.


        :param internal_users: The internal_users of this LicenseSummary.
        :type internal_users: int
        """
        if internal_users is None:
            raise ValueError("Invalid value for `internal_users`, must not be `None`")

        self._internal_users = internal_users

    @property
    def external_users(self):
        """Gets the external_users of this LicenseSummary.


        :return: The external_users of this LicenseSummary.
        :rtype: int
        """
        return self._external_users

    @external_users.setter
    def external_users(self, external_users):
        """Sets the external_users of this LicenseSummary.


        :param external_users: The external_users of this LicenseSummary.
        :type external_users: int
        """
        if external_users is None:
            raise ValueError("Invalid value for `external_users`, must not be `None`")

        self._external_users = external_users

    @property
    def status(self):
        """Gets the status of this LicenseSummary.


        :return: The status of this LicenseSummary.
        :rtype: LicenseSummaryStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LicenseSummary.


        :param status: The status of this LicenseSummary.
        :type status: LicenseSummaryStatusEnum
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def latest_valid(self):
        """Gets the latest_valid of this LicenseSummary.


        :return: The latest_valid of this LicenseSummary.
        :rtype: datetime
        """
        return self._latest_valid

    @latest_valid.setter
    def latest_valid(self, latest_valid):
        """Sets the latest_valid of this LicenseSummary.


        :param latest_valid: The latest_valid of this LicenseSummary.
        :type latest_valid: datetime
        """
        if latest_valid is None:
            raise ValueError("Invalid value for `latest_valid`, must not be `None`")

        self._latest_valid = latest_valid

    @property
    def license_flags(self):
        """Gets the license_flags of this LicenseSummary.


        :return: The license_flags of this LicenseSummary.
        :rtype: List[LicenseFlagsEnum]
        """
        return self._license_flags

    @license_flags.setter
    def license_flags(self, license_flags):
        """Sets the license_flags of this LicenseSummary.


        :param license_flags: The license_flags of this LicenseSummary.
        :type license_flags: List[LicenseFlagsEnum]
        """
        if license_flags is None:
            raise ValueError("Invalid value for `license_flags`, must not be `None`")

        self._license_flags = license_flags
