# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.outpost_type_enum import OutpostTypeEnum
from authentik_openapi.models.provider import Provider
from authentik_openapi.models.service_connection import ServiceConnection
from authentik_openapi import util


class Outpost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, type: OutpostTypeEnum=None, providers: List[int]=None, providers_obj: List[Provider]=None, service_connection: str=None, service_connection_obj: ServiceConnection=None, refresh_interval_s: int=None, token_identifier: str=None, config: Dict[str, object]=None, managed: str=None):
        """Outpost - a model defined in OpenAPI

        :param pk: The pk of this Outpost.
        :param name: The name of this Outpost.
        :param type: The type of this Outpost.
        :param providers: The providers of this Outpost.
        :param providers_obj: The providers_obj of this Outpost.
        :param service_connection: The service_connection of this Outpost.
        :param service_connection_obj: The service_connection_obj of this Outpost.
        :param refresh_interval_s: The refresh_interval_s of this Outpost.
        :param token_identifier: The token_identifier of this Outpost.
        :param config: The config of this Outpost.
        :param managed: The managed of this Outpost.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'type': OutpostTypeEnum,
            'providers': List[int],
            'providers_obj': List[Provider],
            'service_connection': str,
            'service_connection_obj': ServiceConnection,
            'refresh_interval_s': int,
            'token_identifier': str,
            'config': Dict[str, object],
            'managed': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'type': 'type',
            'providers': 'providers',
            'providers_obj': 'providers_obj',
            'service_connection': 'service_connection',
            'service_connection_obj': 'service_connection_obj',
            'refresh_interval_s': 'refresh_interval_s',
            'token_identifier': 'token_identifier',
            'config': 'config',
            'managed': 'managed'
        }

        self._pk = pk
        self._name = name
        self._type = type
        self._providers = providers
        self._providers_obj = providers_obj
        self._service_connection = service_connection
        self._service_connection_obj = service_connection_obj
        self._refresh_interval_s = refresh_interval_s
        self._token_identifier = token_identifier
        self._config = config
        self._managed = managed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Outpost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Outpost of this Outpost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Outpost.


        :return: The pk of this Outpost.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Outpost.


        :param pk: The pk of this Outpost.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this Outpost.


        :return: The name of this Outpost.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Outpost.


        :param name: The name of this Outpost.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this Outpost.


        :return: The type of this Outpost.
        :rtype: OutpostTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Outpost.


        :param type: The type of this Outpost.
        :type type: OutpostTypeEnum
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def providers(self):
        """Gets the providers of this Outpost.


        :return: The providers of this Outpost.
        :rtype: List[int]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this Outpost.


        :param providers: The providers of this Outpost.
        :type providers: List[int]
        """
        if providers is None:
            raise ValueError("Invalid value for `providers`, must not be `None`")

        self._providers = providers

    @property
    def providers_obj(self):
        """Gets the providers_obj of this Outpost.


        :return: The providers_obj of this Outpost.
        :rtype: List[Provider]
        """
        return self._providers_obj

    @providers_obj.setter
    def providers_obj(self, providers_obj):
        """Sets the providers_obj of this Outpost.


        :param providers_obj: The providers_obj of this Outpost.
        :type providers_obj: List[Provider]
        """
        if providers_obj is None:
            raise ValueError("Invalid value for `providers_obj`, must not be `None`")

        self._providers_obj = providers_obj

    @property
    def service_connection(self):
        """Gets the service_connection of this Outpost.

        Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.

        :return: The service_connection of this Outpost.
        :rtype: str
        """
        return self._service_connection

    @service_connection.setter
    def service_connection(self, service_connection):
        """Sets the service_connection of this Outpost.

        Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.

        :param service_connection: The service_connection of this Outpost.
        :type service_connection: str
        """

        self._service_connection = service_connection

    @property
    def service_connection_obj(self):
        """Gets the service_connection_obj of this Outpost.


        :return: The service_connection_obj of this Outpost.
        :rtype: ServiceConnection
        """
        return self._service_connection_obj

    @service_connection_obj.setter
    def service_connection_obj(self, service_connection_obj):
        """Sets the service_connection_obj of this Outpost.


        :param service_connection_obj: The service_connection_obj of this Outpost.
        :type service_connection_obj: ServiceConnection
        """
        if service_connection_obj is None:
            raise ValueError("Invalid value for `service_connection_obj`, must not be `None`")

        self._service_connection_obj = service_connection_obj

    @property
    def refresh_interval_s(self):
        """Gets the refresh_interval_s of this Outpost.


        :return: The refresh_interval_s of this Outpost.
        :rtype: int
        """
        return self._refresh_interval_s

    @refresh_interval_s.setter
    def refresh_interval_s(self, refresh_interval_s):
        """Sets the refresh_interval_s of this Outpost.


        :param refresh_interval_s: The refresh_interval_s of this Outpost.
        :type refresh_interval_s: int
        """
        if refresh_interval_s is None:
            raise ValueError("Invalid value for `refresh_interval_s`, must not be `None`")

        self._refresh_interval_s = refresh_interval_s

    @property
    def token_identifier(self):
        """Gets the token_identifier of this Outpost.

        Get Token identifier

        :return: The token_identifier of this Outpost.
        :rtype: str
        """
        return self._token_identifier

    @token_identifier.setter
    def token_identifier(self, token_identifier):
        """Sets the token_identifier of this Outpost.

        Get Token identifier

        :param token_identifier: The token_identifier of this Outpost.
        :type token_identifier: str
        """
        if token_identifier is None:
            raise ValueError("Invalid value for `token_identifier`, must not be `None`")

        self._token_identifier = token_identifier

    @property
    def config(self):
        """Gets the config of this Outpost.


        :return: The config of this Outpost.
        :rtype: Dict[str, object]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Outpost.


        :param config: The config of this Outpost.
        :type config: Dict[str, object]
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def managed(self):
        """Gets the managed of this Outpost.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this Outpost.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Outpost.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this Outpost.
        :type managed: str
        """

        self._managed = managed
