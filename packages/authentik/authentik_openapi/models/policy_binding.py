# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.group import Group
from authentik_openapi.models.policy import Policy
from authentik_openapi.models.user import User
from authentik_openapi import util


class PolicyBinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, policy: str=None, group: str=None, user: int=None, policy_obj: Policy=None, group_obj: Group=None, user_obj: User=None, target: str=None, negate: bool=None, enabled: bool=None, order: int=None, timeout: int=None, failure_result: bool=None):
        """PolicyBinding - a model defined in OpenAPI

        :param pk: The pk of this PolicyBinding.
        :param policy: The policy of this PolicyBinding.
        :param group: The group of this PolicyBinding.
        :param user: The user of this PolicyBinding.
        :param policy_obj: The policy_obj of this PolicyBinding.
        :param group_obj: The group_obj of this PolicyBinding.
        :param user_obj: The user_obj of this PolicyBinding.
        :param target: The target of this PolicyBinding.
        :param negate: The negate of this PolicyBinding.
        :param enabled: The enabled of this PolicyBinding.
        :param order: The order of this PolicyBinding.
        :param timeout: The timeout of this PolicyBinding.
        :param failure_result: The failure_result of this PolicyBinding.
        """
        self.openapi_types = {
            'pk': str,
            'policy': str,
            'group': str,
            'user': int,
            'policy_obj': Policy,
            'group_obj': Group,
            'user_obj': User,
            'target': str,
            'negate': bool,
            'enabled': bool,
            'order': int,
            'timeout': int,
            'failure_result': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'policy': 'policy',
            'group': 'group',
            'user': 'user',
            'policy_obj': 'policy_obj',
            'group_obj': 'group_obj',
            'user_obj': 'user_obj',
            'target': 'target',
            'negate': 'negate',
            'enabled': 'enabled',
            'order': 'order',
            'timeout': 'timeout',
            'failure_result': 'failure_result'
        }

        self._pk = pk
        self._policy = policy
        self._group = group
        self._user = user
        self._policy_obj = policy_obj
        self._group_obj = group_obj
        self._user_obj = user_obj
        self._target = target
        self._negate = negate
        self._enabled = enabled
        self._order = order
        self._timeout = timeout
        self._failure_result = failure_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyBinding of this PolicyBinding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this PolicyBinding.


        :return: The pk of this PolicyBinding.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this PolicyBinding.


        :param pk: The pk of this PolicyBinding.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def policy(self):
        """Gets the policy of this PolicyBinding.


        :return: The policy of this PolicyBinding.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PolicyBinding.


        :param policy: The policy of this PolicyBinding.
        :type policy: str
        """

        self._policy = policy

    @property
    def group(self):
        """Gets the group of this PolicyBinding.


        :return: The group of this PolicyBinding.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PolicyBinding.


        :param group: The group of this PolicyBinding.
        :type group: str
        """

        self._group = group

    @property
    def user(self):
        """Gets the user of this PolicyBinding.


        :return: The user of this PolicyBinding.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PolicyBinding.


        :param user: The user of this PolicyBinding.
        :type user: int
        """

        self._user = user

    @property
    def policy_obj(self):
        """Gets the policy_obj of this PolicyBinding.


        :return: The policy_obj of this PolicyBinding.
        :rtype: Policy
        """
        return self._policy_obj

    @policy_obj.setter
    def policy_obj(self, policy_obj):
        """Sets the policy_obj of this PolicyBinding.


        :param policy_obj: The policy_obj of this PolicyBinding.
        :type policy_obj: Policy
        """
        if policy_obj is None:
            raise ValueError("Invalid value for `policy_obj`, must not be `None`")

        self._policy_obj = policy_obj

    @property
    def group_obj(self):
        """Gets the group_obj of this PolicyBinding.


        :return: The group_obj of this PolicyBinding.
        :rtype: Group
        """
        return self._group_obj

    @group_obj.setter
    def group_obj(self, group_obj):
        """Sets the group_obj of this PolicyBinding.


        :param group_obj: The group_obj of this PolicyBinding.
        :type group_obj: Group
        """
        if group_obj is None:
            raise ValueError("Invalid value for `group_obj`, must not be `None`")

        self._group_obj = group_obj

    @property
    def user_obj(self):
        """Gets the user_obj of this PolicyBinding.


        :return: The user_obj of this PolicyBinding.
        :rtype: User
        """
        return self._user_obj

    @user_obj.setter
    def user_obj(self, user_obj):
        """Sets the user_obj of this PolicyBinding.


        :param user_obj: The user_obj of this PolicyBinding.
        :type user_obj: User
        """
        if user_obj is None:
            raise ValueError("Invalid value for `user_obj`, must not be `None`")

        self._user_obj = user_obj

    @property
    def target(self):
        """Gets the target of this PolicyBinding.


        :return: The target of this PolicyBinding.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this PolicyBinding.


        :param target: The target of this PolicyBinding.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def negate(self):
        """Gets the negate of this PolicyBinding.

        Negates the outcome of the policy. Messages are unaffected.

        :return: The negate of this PolicyBinding.
        :rtype: bool
        """
        return self._negate

    @negate.setter
    def negate(self, negate):
        """Sets the negate of this PolicyBinding.

        Negates the outcome of the policy. Messages are unaffected.

        :param negate: The negate of this PolicyBinding.
        :type negate: bool
        """

        self._negate = negate

    @property
    def enabled(self):
        """Gets the enabled of this PolicyBinding.


        :return: The enabled of this PolicyBinding.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PolicyBinding.


        :param enabled: The enabled of this PolicyBinding.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def order(self):
        """Gets the order of this PolicyBinding.


        :return: The order of this PolicyBinding.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PolicyBinding.


        :param order: The order of this PolicyBinding.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")
        if order is not None and order > 2147483647:
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")
        if order is not None and order < -2147483648:
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `-2147483648`")

        self._order = order

    @property
    def timeout(self):
        """Gets the timeout of this PolicyBinding.

        Timeout after which Policy execution is terminated.

        :return: The timeout of this PolicyBinding.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this PolicyBinding.

        Timeout after which Policy execution is terminated.

        :param timeout: The timeout of this PolicyBinding.
        :type timeout: int
        """
        if timeout is not None and timeout > 2147483647:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `2147483647`")
        if timeout is not None and timeout < 0:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `0`")

        self._timeout = timeout

    @property
    def failure_result(self):
        """Gets the failure_result of this PolicyBinding.

        Result if the Policy execution fails.

        :return: The failure_result of this PolicyBinding.
        :rtype: bool
        """
        return self._failure_result

    @failure_result.setter
    def failure_result(self, failure_result):
        """Sets the failure_result of this PolicyBinding.

        Result if the Policy execution fails.

        :param failure_result: The failure_result of this PolicyBinding.
        :type failure_result: bool
        """

        self._failure_result = failure_result
