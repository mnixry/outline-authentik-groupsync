# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.group_matching_mode_enum import GroupMatchingModeEnum
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
from authentik_openapi.models.provider_type_enum import ProviderTypeEnum
from authentik_openapi.models.user_matching_mode_enum import UserMatchingModeEnum
import re
from authentik_openapi import util


class PatchedOAuthSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, slug: str=None, enabled: bool=None, authentication_flow: str=None, enrollment_flow: str=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, policy_engine_mode: PolicyEngineMode=None, user_matching_mode: UserMatchingModeEnum=None, user_path_template: str=None, group_matching_mode: GroupMatchingModeEnum=None, provider_type: ProviderTypeEnum=None, request_token_url: str=None, authorization_url: str=None, access_token_url: str=None, profile_url: str=None, consumer_key: str=None, consumer_secret: str=None, additional_scopes: str=None, oidc_well_known_url: str=None, oidc_jwks_url: str=None, oidc_jwks: object=None):
        """PatchedOAuthSourceRequest - a model defined in OpenAPI

        :param name: The name of this PatchedOAuthSourceRequest.
        :param slug: The slug of this PatchedOAuthSourceRequest.
        :param enabled: The enabled of this PatchedOAuthSourceRequest.
        :param authentication_flow: The authentication_flow of this PatchedOAuthSourceRequest.
        :param enrollment_flow: The enrollment_flow of this PatchedOAuthSourceRequest.
        :param user_property_mappings: The user_property_mappings of this PatchedOAuthSourceRequest.
        :param group_property_mappings: The group_property_mappings of this PatchedOAuthSourceRequest.
        :param policy_engine_mode: The policy_engine_mode of this PatchedOAuthSourceRequest.
        :param user_matching_mode: The user_matching_mode of this PatchedOAuthSourceRequest.
        :param user_path_template: The user_path_template of this PatchedOAuthSourceRequest.
        :param group_matching_mode: The group_matching_mode of this PatchedOAuthSourceRequest.
        :param provider_type: The provider_type of this PatchedOAuthSourceRequest.
        :param request_token_url: The request_token_url of this PatchedOAuthSourceRequest.
        :param authorization_url: The authorization_url of this PatchedOAuthSourceRequest.
        :param access_token_url: The access_token_url of this PatchedOAuthSourceRequest.
        :param profile_url: The profile_url of this PatchedOAuthSourceRequest.
        :param consumer_key: The consumer_key of this PatchedOAuthSourceRequest.
        :param consumer_secret: The consumer_secret of this PatchedOAuthSourceRequest.
        :param additional_scopes: The additional_scopes of this PatchedOAuthSourceRequest.
        :param oidc_well_known_url: The oidc_well_known_url of this PatchedOAuthSourceRequest.
        :param oidc_jwks_url: The oidc_jwks_url of this PatchedOAuthSourceRequest.
        :param oidc_jwks: The oidc_jwks of this PatchedOAuthSourceRequest.
        """
        self.openapi_types = {
            'name': str,
            'slug': str,
            'enabled': bool,
            'authentication_flow': str,
            'enrollment_flow': str,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'policy_engine_mode': PolicyEngineMode,
            'user_matching_mode': UserMatchingModeEnum,
            'user_path_template': str,
            'group_matching_mode': GroupMatchingModeEnum,
            'provider_type': ProviderTypeEnum,
            'request_token_url': str,
            'authorization_url': str,
            'access_token_url': str,
            'profile_url': str,
            'consumer_key': str,
            'consumer_secret': str,
            'additional_scopes': str,
            'oidc_well_known_url': str,
            'oidc_jwks_url': str,
            'oidc_jwks': object
        }

        self.attribute_map = {
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'authentication_flow': 'authentication_flow',
            'enrollment_flow': 'enrollment_flow',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'policy_engine_mode': 'policy_engine_mode',
            'user_matching_mode': 'user_matching_mode',
            'user_path_template': 'user_path_template',
            'group_matching_mode': 'group_matching_mode',
            'provider_type': 'provider_type',
            'request_token_url': 'request_token_url',
            'authorization_url': 'authorization_url',
            'access_token_url': 'access_token_url',
            'profile_url': 'profile_url',
            'consumer_key': 'consumer_key',
            'consumer_secret': 'consumer_secret',
            'additional_scopes': 'additional_scopes',
            'oidc_well_known_url': 'oidc_well_known_url',
            'oidc_jwks_url': 'oidc_jwks_url',
            'oidc_jwks': 'oidc_jwks'
        }

        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._authentication_flow = authentication_flow
        self._enrollment_flow = enrollment_flow
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._policy_engine_mode = policy_engine_mode
        self._user_matching_mode = user_matching_mode
        self._user_path_template = user_path_template
        self._group_matching_mode = group_matching_mode
        self._provider_type = provider_type
        self._request_token_url = request_token_url
        self._authorization_url = authorization_url
        self._access_token_url = access_token_url
        self._profile_url = profile_url
        self._consumer_key = consumer_key
        self._consumer_secret = consumer_secret
        self._additional_scopes = additional_scopes
        self._oidc_well_known_url = oidc_well_known_url
        self._oidc_jwks_url = oidc_jwks_url
        self._oidc_jwks = oidc_jwks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedOAuthSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedOAuthSourceRequest of this PatchedOAuthSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedOAuthSourceRequest.

        Source's display Name.

        :return: The name of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedOAuthSourceRequest.

        Source's display Name.

        :param name: The name of this PatchedOAuthSourceRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this PatchedOAuthSourceRequest.

        Internal source name, used in URLs.

        :return: The slug of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PatchedOAuthSourceRequest.

        Internal source name, used in URLs.

        :param slug: The slug of this PatchedOAuthSourceRequest.
        :type slug: str
        """
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this PatchedOAuthSourceRequest.


        :return: The enabled of this PatchedOAuthSourceRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PatchedOAuthSourceRequest.


        :param enabled: The enabled of this PatchedOAuthSourceRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this PatchedOAuthSourceRequest.

        Flow to use when authenticating existing users.

        :return: The authentication_flow of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this PatchedOAuthSourceRequest.

        Flow to use when authenticating existing users.

        :param authentication_flow: The authentication_flow of this PatchedOAuthSourceRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this PatchedOAuthSourceRequest.

        Flow to use when enrolling new users.

        :return: The enrollment_flow of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this PatchedOAuthSourceRequest.

        Flow to use when enrolling new users.

        :param enrollment_flow: The enrollment_flow of this PatchedOAuthSourceRequest.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this PatchedOAuthSourceRequest.


        :return: The user_property_mappings of this PatchedOAuthSourceRequest.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this PatchedOAuthSourceRequest.


        :param user_property_mappings: The user_property_mappings of this PatchedOAuthSourceRequest.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this PatchedOAuthSourceRequest.


        :return: The group_property_mappings of this PatchedOAuthSourceRequest.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this PatchedOAuthSourceRequest.


        :param group_property_mappings: The group_property_mappings of this PatchedOAuthSourceRequest.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this PatchedOAuthSourceRequest.


        :return: The policy_engine_mode of this PatchedOAuthSourceRequest.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this PatchedOAuthSourceRequest.


        :param policy_engine_mode: The policy_engine_mode of this PatchedOAuthSourceRequest.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def user_matching_mode(self):
        """Gets the user_matching_mode of this PatchedOAuthSourceRequest.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :return: The user_matching_mode of this PatchedOAuthSourceRequest.
        :rtype: UserMatchingModeEnum
        """
        return self._user_matching_mode

    @user_matching_mode.setter
    def user_matching_mode(self, user_matching_mode):
        """Sets the user_matching_mode of this PatchedOAuthSourceRequest.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :param user_matching_mode: The user_matching_mode of this PatchedOAuthSourceRequest.
        :type user_matching_mode: UserMatchingModeEnum
        """

        self._user_matching_mode = user_matching_mode

    @property
    def user_path_template(self):
        """Gets the user_path_template of this PatchedOAuthSourceRequest.


        :return: The user_path_template of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this PatchedOAuthSourceRequest.


        :param user_path_template: The user_path_template of this PatchedOAuthSourceRequest.
        :type user_path_template: str
        """
        if user_path_template is not None and len(user_path_template) < 1:
            raise ValueError("Invalid value for `user_path_template`, length must be greater than or equal to `1`")

        self._user_path_template = user_path_template

    @property
    def group_matching_mode(self):
        """Gets the group_matching_mode of this PatchedOAuthSourceRequest.

        How the source determines if an existing group should be used or a new group created.

        :return: The group_matching_mode of this PatchedOAuthSourceRequest.
        :rtype: GroupMatchingModeEnum
        """
        return self._group_matching_mode

    @group_matching_mode.setter
    def group_matching_mode(self, group_matching_mode):
        """Sets the group_matching_mode of this PatchedOAuthSourceRequest.

        How the source determines if an existing group should be used or a new group created.

        :param group_matching_mode: The group_matching_mode of this PatchedOAuthSourceRequest.
        :type group_matching_mode: GroupMatchingModeEnum
        """

        self._group_matching_mode = group_matching_mode

    @property
    def provider_type(self):
        """Gets the provider_type of this PatchedOAuthSourceRequest.


        :return: The provider_type of this PatchedOAuthSourceRequest.
        :rtype: ProviderTypeEnum
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this PatchedOAuthSourceRequest.


        :param provider_type: The provider_type of this PatchedOAuthSourceRequest.
        :type provider_type: ProviderTypeEnum
        """

        self._provider_type = provider_type

    @property
    def request_token_url(self):
        """Gets the request_token_url of this PatchedOAuthSourceRequest.

        URL used to request the initial token. This URL is only required for OAuth 1.

        :return: The request_token_url of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._request_token_url

    @request_token_url.setter
    def request_token_url(self, request_token_url):
        """Sets the request_token_url of this PatchedOAuthSourceRequest.

        URL used to request the initial token. This URL is only required for OAuth 1.

        :param request_token_url: The request_token_url of this PatchedOAuthSourceRequest.
        :type request_token_url: str
        """
        if request_token_url is not None and len(request_token_url) > 255:
            raise ValueError("Invalid value for `request_token_url`, length must be less than or equal to `255`")

        self._request_token_url = request_token_url

    @property
    def authorization_url(self):
        """Gets the authorization_url of this PatchedOAuthSourceRequest.

        URL the user is redirect to to conest the flow.

        :return: The authorization_url of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._authorization_url

    @authorization_url.setter
    def authorization_url(self, authorization_url):
        """Sets the authorization_url of this PatchedOAuthSourceRequest.

        URL the user is redirect to to conest the flow.

        :param authorization_url: The authorization_url of this PatchedOAuthSourceRequest.
        :type authorization_url: str
        """
        if authorization_url is not None and len(authorization_url) > 255:
            raise ValueError("Invalid value for `authorization_url`, length must be less than or equal to `255`")

        self._authorization_url = authorization_url

    @property
    def access_token_url(self):
        """Gets the access_token_url of this PatchedOAuthSourceRequest.

        URL used by authentik to retrieve tokens.

        :return: The access_token_url of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._access_token_url

    @access_token_url.setter
    def access_token_url(self, access_token_url):
        """Sets the access_token_url of this PatchedOAuthSourceRequest.

        URL used by authentik to retrieve tokens.

        :param access_token_url: The access_token_url of this PatchedOAuthSourceRequest.
        :type access_token_url: str
        """
        if access_token_url is not None and len(access_token_url) > 255:
            raise ValueError("Invalid value for `access_token_url`, length must be less than or equal to `255`")

        self._access_token_url = access_token_url

    @property
    def profile_url(self):
        """Gets the profile_url of this PatchedOAuthSourceRequest.

        URL used by authentik to get user information.

        :return: The profile_url of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this PatchedOAuthSourceRequest.

        URL used by authentik to get user information.

        :param profile_url: The profile_url of this PatchedOAuthSourceRequest.
        :type profile_url: str
        """
        if profile_url is not None and len(profile_url) > 255:
            raise ValueError("Invalid value for `profile_url`, length must be less than or equal to `255`")

        self._profile_url = profile_url

    @property
    def consumer_key(self):
        """Gets the consumer_key of this PatchedOAuthSourceRequest.


        :return: The consumer_key of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._consumer_key

    @consumer_key.setter
    def consumer_key(self, consumer_key):
        """Sets the consumer_key of this PatchedOAuthSourceRequest.


        :param consumer_key: The consumer_key of this PatchedOAuthSourceRequest.
        :type consumer_key: str
        """
        if consumer_key is not None and len(consumer_key) < 1:
            raise ValueError("Invalid value for `consumer_key`, length must be greater than or equal to `1`")

        self._consumer_key = consumer_key

    @property
    def consumer_secret(self):
        """Gets the consumer_secret of this PatchedOAuthSourceRequest.


        :return: The consumer_secret of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._consumer_secret

    @consumer_secret.setter
    def consumer_secret(self, consumer_secret):
        """Sets the consumer_secret of this PatchedOAuthSourceRequest.


        :param consumer_secret: The consumer_secret of this PatchedOAuthSourceRequest.
        :type consumer_secret: str
        """
        if consumer_secret is not None and len(consumer_secret) < 1:
            raise ValueError("Invalid value for `consumer_secret`, length must be greater than or equal to `1`")

        self._consumer_secret = consumer_secret

    @property
    def additional_scopes(self):
        """Gets the additional_scopes of this PatchedOAuthSourceRequest.


        :return: The additional_scopes of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._additional_scopes

    @additional_scopes.setter
    def additional_scopes(self, additional_scopes):
        """Sets the additional_scopes of this PatchedOAuthSourceRequest.


        :param additional_scopes: The additional_scopes of this PatchedOAuthSourceRequest.
        :type additional_scopes: str
        """

        self._additional_scopes = additional_scopes

    @property
    def oidc_well_known_url(self):
        """Gets the oidc_well_known_url of this PatchedOAuthSourceRequest.


        :return: The oidc_well_known_url of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._oidc_well_known_url

    @oidc_well_known_url.setter
    def oidc_well_known_url(self, oidc_well_known_url):
        """Sets the oidc_well_known_url of this PatchedOAuthSourceRequest.


        :param oidc_well_known_url: The oidc_well_known_url of this PatchedOAuthSourceRequest.
        :type oidc_well_known_url: str
        """

        self._oidc_well_known_url = oidc_well_known_url

    @property
    def oidc_jwks_url(self):
        """Gets the oidc_jwks_url of this PatchedOAuthSourceRequest.


        :return: The oidc_jwks_url of this PatchedOAuthSourceRequest.
        :rtype: str
        """
        return self._oidc_jwks_url

    @oidc_jwks_url.setter
    def oidc_jwks_url(self, oidc_jwks_url):
        """Sets the oidc_jwks_url of this PatchedOAuthSourceRequest.


        :param oidc_jwks_url: The oidc_jwks_url of this PatchedOAuthSourceRequest.
        :type oidc_jwks_url: str
        """

        self._oidc_jwks_url = oidc_jwks_url

    @property
    def oidc_jwks(self):
        """Gets the oidc_jwks of this PatchedOAuthSourceRequest.


        :return: The oidc_jwks of this PatchedOAuthSourceRequest.
        :rtype: object
        """
        return self._oidc_jwks

    @oidc_jwks.setter
    def oidc_jwks(self, oidc_jwks):
        """Sets the oidc_jwks of this PatchedOAuthSourceRequest.


        :param oidc_jwks: The oidc_jwks of this PatchedOAuthSourceRequest.
        :type oidc_jwks: object
        """

        self._oidc_jwks = oidc_jwks
