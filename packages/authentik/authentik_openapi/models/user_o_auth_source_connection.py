# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.source import Source
from authentik_openapi import util


class UserOAuthSourceConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, user: int=None, source: Source=None, created: datetime=None, identifier: str=None):
        """UserOAuthSourceConnection - a model defined in OpenAPI

        :param pk: The pk of this UserOAuthSourceConnection.
        :param user: The user of this UserOAuthSourceConnection.
        :param source: The source of this UserOAuthSourceConnection.
        :param created: The created of this UserOAuthSourceConnection.
        :param identifier: The identifier of this UserOAuthSourceConnection.
        """
        self.openapi_types = {
            'pk': int,
            'user': int,
            'source': Source,
            'created': datetime,
            'identifier': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'user': 'user',
            'source': 'source',
            'created': 'created',
            'identifier': 'identifier'
        }

        self._pk = pk
        self._user = user
        self._source = source
        self._created = created
        self._identifier = identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserOAuthSourceConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserOAuthSourceConnection of this UserOAuthSourceConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this UserOAuthSourceConnection.


        :return: The pk of this UserOAuthSourceConnection.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this UserOAuthSourceConnection.


        :param pk: The pk of this UserOAuthSourceConnection.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def user(self):
        """Gets the user of this UserOAuthSourceConnection.


        :return: The user of this UserOAuthSourceConnection.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserOAuthSourceConnection.


        :param user: The user of this UserOAuthSourceConnection.
        :type user: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def source(self):
        """Gets the source of this UserOAuthSourceConnection.


        :return: The source of this UserOAuthSourceConnection.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UserOAuthSourceConnection.


        :param source: The source of this UserOAuthSourceConnection.
        :type source: Source
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def created(self):
        """Gets the created of this UserOAuthSourceConnection.


        :return: The created of this UserOAuthSourceConnection.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UserOAuthSourceConnection.


        :param created: The created of this UserOAuthSourceConnection.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def identifier(self):
        """Gets the identifier of this UserOAuthSourceConnection.


        :return: The identifier of this UserOAuthSourceConnection.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UserOAuthSourceConnection.


        :param identifier: The identifier of this UserOAuthSourceConnection.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 255:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `255`")

        self._identifier = identifier
