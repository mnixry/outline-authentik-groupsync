# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.log_event import LogEvent
from authentik_openapi import util


class SyncObjectResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages: List[LogEvent]=None):
        """SyncObjectResult - a model defined in OpenAPI

        :param messages: The messages of this SyncObjectResult.
        """
        self.openapi_types = {
            'messages': List[LogEvent]
        }

        self.attribute_map = {
            'messages': 'messages'
        }

        self._messages = messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncObjectResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncObjectResult of this SyncObjectResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self):
        """Gets the messages of this SyncObjectResult.


        :return: The messages of this SyncObjectResult.
        :rtype: List[LogEvent]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this SyncObjectResult.


        :param messages: The messages of this SyncObjectResult.
        :type messages: List[LogEvent]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages
