# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class RadiusOutpostConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, application_slug: str=None, auth_flow_slug: str=None, client_networks: str=None, shared_secret: str=None, mfa_support: bool=None):
        """RadiusOutpostConfig - a model defined in OpenAPI

        :param pk: The pk of this RadiusOutpostConfig.
        :param name: The name of this RadiusOutpostConfig.
        :param application_slug: The application_slug of this RadiusOutpostConfig.
        :param auth_flow_slug: The auth_flow_slug of this RadiusOutpostConfig.
        :param client_networks: The client_networks of this RadiusOutpostConfig.
        :param shared_secret: The shared_secret of this RadiusOutpostConfig.
        :param mfa_support: The mfa_support of this RadiusOutpostConfig.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'application_slug': str,
            'auth_flow_slug': str,
            'client_networks': str,
            'shared_secret': str,
            'mfa_support': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'application_slug': 'application_slug',
            'auth_flow_slug': 'auth_flow_slug',
            'client_networks': 'client_networks',
            'shared_secret': 'shared_secret',
            'mfa_support': 'mfa_support'
        }

        self._pk = pk
        self._name = name
        self._application_slug = application_slug
        self._auth_flow_slug = auth_flow_slug
        self._client_networks = client_networks
        self._shared_secret = shared_secret
        self._mfa_support = mfa_support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RadiusOutpostConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RadiusOutpostConfig of this RadiusOutpostConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this RadiusOutpostConfig.


        :return: The pk of this RadiusOutpostConfig.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this RadiusOutpostConfig.


        :param pk: The pk of this RadiusOutpostConfig.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this RadiusOutpostConfig.


        :return: The name of this RadiusOutpostConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RadiusOutpostConfig.


        :param name: The name of this RadiusOutpostConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def application_slug(self):
        """Gets the application_slug of this RadiusOutpostConfig.


        :return: The application_slug of this RadiusOutpostConfig.
        :rtype: str
        """
        return self._application_slug

    @application_slug.setter
    def application_slug(self, application_slug):
        """Sets the application_slug of this RadiusOutpostConfig.


        :param application_slug: The application_slug of this RadiusOutpostConfig.
        :type application_slug: str
        """
        if application_slug is None:
            raise ValueError("Invalid value for `application_slug`, must not be `None`")

        self._application_slug = application_slug

    @property
    def auth_flow_slug(self):
        """Gets the auth_flow_slug of this RadiusOutpostConfig.


        :return: The auth_flow_slug of this RadiusOutpostConfig.
        :rtype: str
        """
        return self._auth_flow_slug

    @auth_flow_slug.setter
    def auth_flow_slug(self, auth_flow_slug):
        """Sets the auth_flow_slug of this RadiusOutpostConfig.


        :param auth_flow_slug: The auth_flow_slug of this RadiusOutpostConfig.
        :type auth_flow_slug: str
        """
        if auth_flow_slug is None:
            raise ValueError("Invalid value for `auth_flow_slug`, must not be `None`")

        self._auth_flow_slug = auth_flow_slug

    @property
    def client_networks(self):
        """Gets the client_networks of this RadiusOutpostConfig.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :return: The client_networks of this RadiusOutpostConfig.
        :rtype: str
        """
        return self._client_networks

    @client_networks.setter
    def client_networks(self, client_networks):
        """Sets the client_networks of this RadiusOutpostConfig.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :param client_networks: The client_networks of this RadiusOutpostConfig.
        :type client_networks: str
        """

        self._client_networks = client_networks

    @property
    def shared_secret(self):
        """Gets the shared_secret of this RadiusOutpostConfig.

        Shared secret between clients and server to hash packets.

        :return: The shared_secret of this RadiusOutpostConfig.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this RadiusOutpostConfig.

        Shared secret between clients and server to hash packets.

        :param shared_secret: The shared_secret of this RadiusOutpostConfig.
        :type shared_secret: str
        """

        self._shared_secret = shared_secret

    @property
    def mfa_support(self):
        """Gets the mfa_support of this RadiusOutpostConfig.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :return: The mfa_support of this RadiusOutpostConfig.
        :rtype: bool
        """
        return self._mfa_support

    @mfa_support.setter
    def mfa_support(self, mfa_support):
        """Sets the mfa_support of this RadiusOutpostConfig.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :param mfa_support: The mfa_support of this RadiusOutpostConfig.
        :type mfa_support: bool
        """

        self._mfa_support = mfa_support
