# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.auth_type_enum import AuthTypeEnum
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi.models.provider_enum import ProviderEnum
from authentik_openapi import util


class PatchedAuthenticatorSMSStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, configure_flow: str=None, friendly_name: str=None, provider: ProviderEnum=None, from_number: str=None, account_sid: str=None, auth: str=None, auth_password: str=None, auth_type: AuthTypeEnum=None, verify_only: bool=None, mapping: str=None):
        """PatchedAuthenticatorSMSStageRequest - a model defined in OpenAPI

        :param name: The name of this PatchedAuthenticatorSMSStageRequest.
        :param flow_set: The flow_set of this PatchedAuthenticatorSMSStageRequest.
        :param configure_flow: The configure_flow of this PatchedAuthenticatorSMSStageRequest.
        :param friendly_name: The friendly_name of this PatchedAuthenticatorSMSStageRequest.
        :param provider: The provider of this PatchedAuthenticatorSMSStageRequest.
        :param from_number: The from_number of this PatchedAuthenticatorSMSStageRequest.
        :param account_sid: The account_sid of this PatchedAuthenticatorSMSStageRequest.
        :param auth: The auth of this PatchedAuthenticatorSMSStageRequest.
        :param auth_password: The auth_password of this PatchedAuthenticatorSMSStageRequest.
        :param auth_type: The auth_type of this PatchedAuthenticatorSMSStageRequest.
        :param verify_only: The verify_only of this PatchedAuthenticatorSMSStageRequest.
        :param mapping: The mapping of this PatchedAuthenticatorSMSStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'configure_flow': str,
            'friendly_name': str,
            'provider': ProviderEnum,
            'from_number': str,
            'account_sid': str,
            'auth': str,
            'auth_password': str,
            'auth_type': AuthTypeEnum,
            'verify_only': bool,
            'mapping': str
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'configure_flow': 'configure_flow',
            'friendly_name': 'friendly_name',
            'provider': 'provider',
            'from_number': 'from_number',
            'account_sid': 'account_sid',
            'auth': 'auth',
            'auth_password': 'auth_password',
            'auth_type': 'auth_type',
            'verify_only': 'verify_only',
            'mapping': 'mapping'
        }

        self._name = name
        self._flow_set = flow_set
        self._configure_flow = configure_flow
        self._friendly_name = friendly_name
        self._provider = provider
        self._from_number = from_number
        self._account_sid = account_sid
        self._auth = auth
        self._auth_password = auth_password
        self._auth_type = auth_type
        self._verify_only = verify_only
        self._mapping = mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedAuthenticatorSMSStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedAuthenticatorSMSStageRequest of this PatchedAuthenticatorSMSStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedAuthenticatorSMSStageRequest.


        :return: The name of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedAuthenticatorSMSStageRequest.


        :param name: The name of this PatchedAuthenticatorSMSStageRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this PatchedAuthenticatorSMSStageRequest.


        :return: The flow_set of this PatchedAuthenticatorSMSStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this PatchedAuthenticatorSMSStageRequest.


        :param flow_set: The flow_set of this PatchedAuthenticatorSMSStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def configure_flow(self):
        """Gets the configure_flow of this PatchedAuthenticatorSMSStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :return: The configure_flow of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._configure_flow

    @configure_flow.setter
    def configure_flow(self, configure_flow):
        """Sets the configure_flow of this PatchedAuthenticatorSMSStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :param configure_flow: The configure_flow of this PatchedAuthenticatorSMSStageRequest.
        :type configure_flow: str
        """

        self._configure_flow = configure_flow

    @property
    def friendly_name(self):
        """Gets the friendly_name of this PatchedAuthenticatorSMSStageRequest.


        :return: The friendly_name of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this PatchedAuthenticatorSMSStageRequest.


        :param friendly_name: The friendly_name of this PatchedAuthenticatorSMSStageRequest.
        :type friendly_name: str
        """
        if friendly_name is not None and len(friendly_name) < 1:
            raise ValueError("Invalid value for `friendly_name`, length must be greater than or equal to `1`")

        self._friendly_name = friendly_name

    @property
    def provider(self):
        """Gets the provider of this PatchedAuthenticatorSMSStageRequest.


        :return: The provider of this PatchedAuthenticatorSMSStageRequest.
        :rtype: ProviderEnum
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PatchedAuthenticatorSMSStageRequest.


        :param provider: The provider of this PatchedAuthenticatorSMSStageRequest.
        :type provider: ProviderEnum
        """

        self._provider = provider

    @property
    def from_number(self):
        """Gets the from_number of this PatchedAuthenticatorSMSStageRequest.


        :return: The from_number of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this PatchedAuthenticatorSMSStageRequest.


        :param from_number: The from_number of this PatchedAuthenticatorSMSStageRequest.
        :type from_number: str
        """
        if from_number is not None and len(from_number) < 1:
            raise ValueError("Invalid value for `from_number`, length must be greater than or equal to `1`")

        self._from_number = from_number

    @property
    def account_sid(self):
        """Gets the account_sid of this PatchedAuthenticatorSMSStageRequest.


        :return: The account_sid of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this PatchedAuthenticatorSMSStageRequest.


        :param account_sid: The account_sid of this PatchedAuthenticatorSMSStageRequest.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) < 1:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `1`")

        self._account_sid = account_sid

    @property
    def auth(self):
        """Gets the auth of this PatchedAuthenticatorSMSStageRequest.


        :return: The auth of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this PatchedAuthenticatorSMSStageRequest.


        :param auth: The auth of this PatchedAuthenticatorSMSStageRequest.
        :type auth: str
        """
        if auth is not None and len(auth) < 1:
            raise ValueError("Invalid value for `auth`, length must be greater than or equal to `1`")

        self._auth = auth

    @property
    def auth_password(self):
        """Gets the auth_password of this PatchedAuthenticatorSMSStageRequest.


        :return: The auth_password of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this PatchedAuthenticatorSMSStageRequest.


        :param auth_password: The auth_password of this PatchedAuthenticatorSMSStageRequest.
        :type auth_password: str
        """

        self._auth_password = auth_password

    @property
    def auth_type(self):
        """Gets the auth_type of this PatchedAuthenticatorSMSStageRequest.


        :return: The auth_type of this PatchedAuthenticatorSMSStageRequest.
        :rtype: AuthTypeEnum
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this PatchedAuthenticatorSMSStageRequest.


        :param auth_type: The auth_type of this PatchedAuthenticatorSMSStageRequest.
        :type auth_type: AuthTypeEnum
        """

        self._auth_type = auth_type

    @property
    def verify_only(self):
        """Gets the verify_only of this PatchedAuthenticatorSMSStageRequest.

        When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.

        :return: The verify_only of this PatchedAuthenticatorSMSStageRequest.
        :rtype: bool
        """
        return self._verify_only

    @verify_only.setter
    def verify_only(self, verify_only):
        """Sets the verify_only of this PatchedAuthenticatorSMSStageRequest.

        When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.

        :param verify_only: The verify_only of this PatchedAuthenticatorSMSStageRequest.
        :type verify_only: bool
        """

        self._verify_only = verify_only

    @property
    def mapping(self):
        """Gets the mapping of this PatchedAuthenticatorSMSStageRequest.

        Optionally modify the payload being sent to custom providers.

        :return: The mapping of this PatchedAuthenticatorSMSStageRequest.
        :rtype: str
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this PatchedAuthenticatorSMSStageRequest.

        Optionally modify the payload being sent to custom providers.

        :param mapping: The mapping of this PatchedAuthenticatorSMSStageRequest.
        :type mapping: str
        """

        self._mapping = mapping
