# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.sync_object_model_enum import SyncObjectModelEnum
from authentik_openapi import util


class SyncObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sync_object_model: SyncObjectModelEnum=None, sync_object_id: str=None):
        """SyncObjectRequest - a model defined in OpenAPI

        :param sync_object_model: The sync_object_model of this SyncObjectRequest.
        :param sync_object_id: The sync_object_id of this SyncObjectRequest.
        """
        self.openapi_types = {
            'sync_object_model': SyncObjectModelEnum,
            'sync_object_id': str
        }

        self.attribute_map = {
            'sync_object_model': 'sync_object_model',
            'sync_object_id': 'sync_object_id'
        }

        self._sync_object_model = sync_object_model
        self._sync_object_id = sync_object_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncObjectRequest of this SyncObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sync_object_model(self):
        """Gets the sync_object_model of this SyncObjectRequest.


        :return: The sync_object_model of this SyncObjectRequest.
        :rtype: SyncObjectModelEnum
        """
        return self._sync_object_model

    @sync_object_model.setter
    def sync_object_model(self, sync_object_model):
        """Sets the sync_object_model of this SyncObjectRequest.


        :param sync_object_model: The sync_object_model of this SyncObjectRequest.
        :type sync_object_model: SyncObjectModelEnum
        """
        if sync_object_model is None:
            raise ValueError("Invalid value for `sync_object_model`, must not be `None`")

        self._sync_object_model = sync_object_model

    @property
    def sync_object_id(self):
        """Gets the sync_object_id of this SyncObjectRequest.


        :return: The sync_object_id of this SyncObjectRequest.
        :rtype: str
        """
        return self._sync_object_id

    @sync_object_id.setter
    def sync_object_id(self, sync_object_id):
        """Sets the sync_object_id of this SyncObjectRequest.


        :param sync_object_id: The sync_object_id of this SyncObjectRequest.
        :type sync_object_id: str
        """
        if sync_object_id is None:
            raise ValueError("Invalid value for `sync_object_id`, must not be `None`")
        if sync_object_id is not None and len(sync_object_id) < 1:
            raise ValueError("Invalid value for `sync_object_id`, length must be greater than or equal to `1`")

        self._sync_object_id = sync_object_id
