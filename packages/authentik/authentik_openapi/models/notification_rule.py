# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.group import Group
from authentik_openapi.models.severity_enum import SeverityEnum
from authentik_openapi import util


class NotificationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, transports: List[str]=None, severity: SeverityEnum=None, group: str=None, group_obj: Group=None):
        """NotificationRule - a model defined in OpenAPI

        :param pk: The pk of this NotificationRule.
        :param name: The name of this NotificationRule.
        :param transports: The transports of this NotificationRule.
        :param severity: The severity of this NotificationRule.
        :param group: The group of this NotificationRule.
        :param group_obj: The group_obj of this NotificationRule.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'transports': List[str],
            'severity': SeverityEnum,
            'group': str,
            'group_obj': Group
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'transports': 'transports',
            'severity': 'severity',
            'group': 'group',
            'group_obj': 'group_obj'
        }

        self._pk = pk
        self._name = name
        self._transports = transports
        self._severity = severity
        self._group = group
        self._group_obj = group_obj

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationRule of this NotificationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this NotificationRule.


        :return: The pk of this NotificationRule.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this NotificationRule.


        :param pk: The pk of this NotificationRule.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this NotificationRule.


        :return: The name of this NotificationRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationRule.


        :param name: The name of this NotificationRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def transports(self):
        """Gets the transports of this NotificationRule.

        Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.

        :return: The transports of this NotificationRule.
        :rtype: List[str]
        """
        return self._transports

    @transports.setter
    def transports(self, transports):
        """Sets the transports of this NotificationRule.

        Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.

        :param transports: The transports of this NotificationRule.
        :type transports: List[str]
        """

        self._transports = transports

    @property
    def severity(self):
        """Gets the severity of this NotificationRule.

        Controls which severity level the created notifications will have.

        :return: The severity of this NotificationRule.
        :rtype: SeverityEnum
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this NotificationRule.

        Controls which severity level the created notifications will have.

        :param severity: The severity of this NotificationRule.
        :type severity: SeverityEnum
        """

        self._severity = severity

    @property
    def group(self):
        """Gets the group of this NotificationRule.

        Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.

        :return: The group of this NotificationRule.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this NotificationRule.

        Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.

        :param group: The group of this NotificationRule.
        :type group: str
        """

        self._group = group

    @property
    def group_obj(self):
        """Gets the group_obj of this NotificationRule.


        :return: The group_obj of this NotificationRule.
        :rtype: Group
        """
        return self._group_obj

    @group_obj.setter
    def group_obj(self, group_obj):
        """Sets the group_obj of this NotificationRule.


        :param group_obj: The group_obj of this NotificationRule.
        :type group_obj: Group
        """
        if group_obj is None:
            raise ValueError("Invalid value for `group_obj`, must not be `None`")

        self._group_obj = group_obj
