# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class UserGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, num_pk: int=None, name: str=None, is_superuser: bool=None, parent: str=None, parent_name: str=None, attributes: Dict[str, object]=None):
        """UserGroup - a model defined in OpenAPI

        :param pk: The pk of this UserGroup.
        :param num_pk: The num_pk of this UserGroup.
        :param name: The name of this UserGroup.
        :param is_superuser: The is_superuser of this UserGroup.
        :param parent: The parent of this UserGroup.
        :param parent_name: The parent_name of this UserGroup.
        :param attributes: The attributes of this UserGroup.
        """
        self.openapi_types = {
            'pk': str,
            'num_pk': int,
            'name': str,
            'is_superuser': bool,
            'parent': str,
            'parent_name': str,
            'attributes': Dict[str, object]
        }

        self.attribute_map = {
            'pk': 'pk',
            'num_pk': 'num_pk',
            'name': 'name',
            'is_superuser': 'is_superuser',
            'parent': 'parent',
            'parent_name': 'parent_name',
            'attributes': 'attributes'
        }

        self._pk = pk
        self._num_pk = num_pk
        self._name = name
        self._is_superuser = is_superuser
        self._parent = parent
        self._parent_name = parent_name
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserGroup of this UserGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this UserGroup.


        :return: The pk of this UserGroup.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this UserGroup.


        :param pk: The pk of this UserGroup.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def num_pk(self):
        """Gets the num_pk of this UserGroup.

        Get a numerical, int32 ID for the group

        :return: The num_pk of this UserGroup.
        :rtype: int
        """
        return self._num_pk

    @num_pk.setter
    def num_pk(self, num_pk):
        """Sets the num_pk of this UserGroup.

        Get a numerical, int32 ID for the group

        :param num_pk: The num_pk of this UserGroup.
        :type num_pk: int
        """
        if num_pk is None:
            raise ValueError("Invalid value for `num_pk`, must not be `None`")

        self._num_pk = num_pk

    @property
    def name(self):
        """Gets the name of this UserGroup.


        :return: The name of this UserGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserGroup.


        :param name: The name of this UserGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def is_superuser(self):
        """Gets the is_superuser of this UserGroup.

        Users added to this group will be superusers.

        :return: The is_superuser of this UserGroup.
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this UserGroup.

        Users added to this group will be superusers.

        :param is_superuser: The is_superuser of this UserGroup.
        :type is_superuser: bool
        """

        self._is_superuser = is_superuser

    @property
    def parent(self):
        """Gets the parent of this UserGroup.


        :return: The parent of this UserGroup.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this UserGroup.


        :param parent: The parent of this UserGroup.
        :type parent: str
        """

        self._parent = parent

    @property
    def parent_name(self):
        """Gets the parent_name of this UserGroup.


        :return: The parent_name of this UserGroup.
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this UserGroup.


        :param parent_name: The parent_name of this UserGroup.
        :type parent_name: str
        """
        if parent_name is None:
            raise ValueError("Invalid value for `parent_name`, must not be `None`")

        self._parent_name = parent_name

    @property
    def attributes(self):
        """Gets the attributes of this UserGroup.


        :return: The attributes of this UserGroup.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this UserGroup.


        :param attributes: The attributes of this UserGroup.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes
