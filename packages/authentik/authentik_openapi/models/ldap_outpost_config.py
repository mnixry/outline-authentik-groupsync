# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.ldapapi_access_mode import LDAPAPIAccessMode
from authentik_openapi import util


class LDAPOutpostConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, base_dn: str=None, bind_flow_slug: str=None, application_slug: str=None, certificate: str=None, tls_server_name: str=None, uid_start_number: int=None, gid_start_number: int=None, search_mode: LDAPAPIAccessMode=None, bind_mode: LDAPAPIAccessMode=None, mfa_support: bool=None):
        """LDAPOutpostConfig - a model defined in OpenAPI

        :param pk: The pk of this LDAPOutpostConfig.
        :param name: The name of this LDAPOutpostConfig.
        :param base_dn: The base_dn of this LDAPOutpostConfig.
        :param bind_flow_slug: The bind_flow_slug of this LDAPOutpostConfig.
        :param application_slug: The application_slug of this LDAPOutpostConfig.
        :param certificate: The certificate of this LDAPOutpostConfig.
        :param tls_server_name: The tls_server_name of this LDAPOutpostConfig.
        :param uid_start_number: The uid_start_number of this LDAPOutpostConfig.
        :param gid_start_number: The gid_start_number of this LDAPOutpostConfig.
        :param search_mode: The search_mode of this LDAPOutpostConfig.
        :param bind_mode: The bind_mode of this LDAPOutpostConfig.
        :param mfa_support: The mfa_support of this LDAPOutpostConfig.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'base_dn': str,
            'bind_flow_slug': str,
            'application_slug': str,
            'certificate': str,
            'tls_server_name': str,
            'uid_start_number': int,
            'gid_start_number': int,
            'search_mode': LDAPAPIAccessMode,
            'bind_mode': LDAPAPIAccessMode,
            'mfa_support': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'base_dn': 'base_dn',
            'bind_flow_slug': 'bind_flow_slug',
            'application_slug': 'application_slug',
            'certificate': 'certificate',
            'tls_server_name': 'tls_server_name',
            'uid_start_number': 'uid_start_number',
            'gid_start_number': 'gid_start_number',
            'search_mode': 'search_mode',
            'bind_mode': 'bind_mode',
            'mfa_support': 'mfa_support'
        }

        self._pk = pk
        self._name = name
        self._base_dn = base_dn
        self._bind_flow_slug = bind_flow_slug
        self._application_slug = application_slug
        self._certificate = certificate
        self._tls_server_name = tls_server_name
        self._uid_start_number = uid_start_number
        self._gid_start_number = gid_start_number
        self._search_mode = search_mode
        self._bind_mode = bind_mode
        self._mfa_support = mfa_support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LDAPOutpostConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LDAPOutpostConfig of this LDAPOutpostConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this LDAPOutpostConfig.


        :return: The pk of this LDAPOutpostConfig.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this LDAPOutpostConfig.


        :param pk: The pk of this LDAPOutpostConfig.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this LDAPOutpostConfig.


        :return: The name of this LDAPOutpostConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LDAPOutpostConfig.


        :param name: The name of this LDAPOutpostConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def base_dn(self):
        """Gets the base_dn of this LDAPOutpostConfig.

        DN under which objects are accessible.

        :return: The base_dn of this LDAPOutpostConfig.
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this LDAPOutpostConfig.

        DN under which objects are accessible.

        :param base_dn: The base_dn of this LDAPOutpostConfig.
        :type base_dn: str
        """

        self._base_dn = base_dn

    @property
    def bind_flow_slug(self):
        """Gets the bind_flow_slug of this LDAPOutpostConfig.


        :return: The bind_flow_slug of this LDAPOutpostConfig.
        :rtype: str
        """
        return self._bind_flow_slug

    @bind_flow_slug.setter
    def bind_flow_slug(self, bind_flow_slug):
        """Sets the bind_flow_slug of this LDAPOutpostConfig.


        :param bind_flow_slug: The bind_flow_slug of this LDAPOutpostConfig.
        :type bind_flow_slug: str
        """
        if bind_flow_slug is None:
            raise ValueError("Invalid value for `bind_flow_slug`, must not be `None`")

        self._bind_flow_slug = bind_flow_slug

    @property
    def application_slug(self):
        """Gets the application_slug of this LDAPOutpostConfig.

        Prioritise backchannel slug over direct application slug

        :return: The application_slug of this LDAPOutpostConfig.
        :rtype: str
        """
        return self._application_slug

    @application_slug.setter
    def application_slug(self, application_slug):
        """Sets the application_slug of this LDAPOutpostConfig.

        Prioritise backchannel slug over direct application slug

        :param application_slug: The application_slug of this LDAPOutpostConfig.
        :type application_slug: str
        """
        if application_slug is None:
            raise ValueError("Invalid value for `application_slug`, must not be `None`")

        self._application_slug = application_slug

    @property
    def certificate(self):
        """Gets the certificate of this LDAPOutpostConfig.


        :return: The certificate of this LDAPOutpostConfig.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this LDAPOutpostConfig.


        :param certificate: The certificate of this LDAPOutpostConfig.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def tls_server_name(self):
        """Gets the tls_server_name of this LDAPOutpostConfig.


        :return: The tls_server_name of this LDAPOutpostConfig.
        :rtype: str
        """
        return self._tls_server_name

    @tls_server_name.setter
    def tls_server_name(self, tls_server_name):
        """Sets the tls_server_name of this LDAPOutpostConfig.


        :param tls_server_name: The tls_server_name of this LDAPOutpostConfig.
        :type tls_server_name: str
        """

        self._tls_server_name = tls_server_name

    @property
    def uid_start_number(self):
        """Gets the uid_start_number of this LDAPOutpostConfig.

        The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber

        :return: The uid_start_number of this LDAPOutpostConfig.
        :rtype: int
        """
        return self._uid_start_number

    @uid_start_number.setter
    def uid_start_number(self, uid_start_number):
        """Sets the uid_start_number of this LDAPOutpostConfig.

        The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber

        :param uid_start_number: The uid_start_number of this LDAPOutpostConfig.
        :type uid_start_number: int
        """
        if uid_start_number is not None and uid_start_number > 2147483647:
            raise ValueError("Invalid value for `uid_start_number`, must be a value less than or equal to `2147483647`")
        if uid_start_number is not None and uid_start_number < -2147483648:
            raise ValueError("Invalid value for `uid_start_number`, must be a value greater than or equal to `-2147483648`")

        self._uid_start_number = uid_start_number

    @property
    def gid_start_number(self):
        """Gets the gid_start_number of this LDAPOutpostConfig.

        The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber

        :return: The gid_start_number of this LDAPOutpostConfig.
        :rtype: int
        """
        return self._gid_start_number

    @gid_start_number.setter
    def gid_start_number(self, gid_start_number):
        """Sets the gid_start_number of this LDAPOutpostConfig.

        The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber

        :param gid_start_number: The gid_start_number of this LDAPOutpostConfig.
        :type gid_start_number: int
        """
        if gid_start_number is not None and gid_start_number > 2147483647:
            raise ValueError("Invalid value for `gid_start_number`, must be a value less than or equal to `2147483647`")
        if gid_start_number is not None and gid_start_number < -2147483648:
            raise ValueError("Invalid value for `gid_start_number`, must be a value greater than or equal to `-2147483648`")

        self._gid_start_number = gid_start_number

    @property
    def search_mode(self):
        """Gets the search_mode of this LDAPOutpostConfig.


        :return: The search_mode of this LDAPOutpostConfig.
        :rtype: LDAPAPIAccessMode
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this LDAPOutpostConfig.


        :param search_mode: The search_mode of this LDAPOutpostConfig.
        :type search_mode: LDAPAPIAccessMode
        """

        self._search_mode = search_mode

    @property
    def bind_mode(self):
        """Gets the bind_mode of this LDAPOutpostConfig.


        :return: The bind_mode of this LDAPOutpostConfig.
        :rtype: LDAPAPIAccessMode
        """
        return self._bind_mode

    @bind_mode.setter
    def bind_mode(self, bind_mode):
        """Sets the bind_mode of this LDAPOutpostConfig.


        :param bind_mode: The bind_mode of this LDAPOutpostConfig.
        :type bind_mode: LDAPAPIAccessMode
        """

        self._bind_mode = bind_mode

    @property
    def mfa_support(self):
        """Gets the mfa_support of this LDAPOutpostConfig.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :return: The mfa_support of this LDAPOutpostConfig.
        :rtype: bool
        """
        return self._mfa_support

    @mfa_support.setter
    def mfa_support(self, mfa_support):
        """Sets the mfa_support of this LDAPOutpostConfig.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :param mfa_support: The mfa_support of this LDAPOutpostConfig.
        :type mfa_support: bool
        """

        self._mfa_support = mfa_support
