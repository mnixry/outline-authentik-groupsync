# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.log_level_enum import LogLevelEnum
from authentik_openapi import util


class LogEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, log_level: LogLevelEnum=None, logger: str=None, event: str=None, attributes: Dict[str, object]=None):
        """LogEvent - a model defined in OpenAPI

        :param timestamp: The timestamp of this LogEvent.
        :param log_level: The log_level of this LogEvent.
        :param logger: The logger of this LogEvent.
        :param event: The event of this LogEvent.
        :param attributes: The attributes of this LogEvent.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'log_level': LogLevelEnum,
            'logger': str,
            'event': str,
            'attributes': Dict[str, object]
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'log_level': 'log_level',
            'logger': 'logger',
            'event': 'event',
            'attributes': 'attributes'
        }

        self._timestamp = timestamp
        self._log_level = log_level
        self._logger = logger
        self._event = event
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogEvent of this LogEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this LogEvent.


        :return: The timestamp of this LogEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LogEvent.


        :param timestamp: The timestamp of this LogEvent.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def log_level(self):
        """Gets the log_level of this LogEvent.


        :return: The log_level of this LogEvent.
        :rtype: LogLevelEnum
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this LogEvent.


        :param log_level: The log_level of this LogEvent.
        :type log_level: LogLevelEnum
        """
        if log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")

        self._log_level = log_level

    @property
    def logger(self):
        """Gets the logger of this LogEvent.


        :return: The logger of this LogEvent.
        :rtype: str
        """
        return self._logger

    @logger.setter
    def logger(self, logger):
        """Sets the logger of this LogEvent.


        :param logger: The logger of this LogEvent.
        :type logger: str
        """
        if logger is None:
            raise ValueError("Invalid value for `logger`, must not be `None`")

        self._logger = logger

    @property
    def event(self):
        """Gets the event of this LogEvent.


        :return: The event of this LogEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this LogEvent.


        :param event: The event of this LogEvent.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def attributes(self):
        """Gets the attributes of this LogEvent.


        :return: The attributes of this LogEvent.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this LogEvent.


        :param attributes: The attributes of this LogEvent.
        :type attributes: Dict[str, object]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes
