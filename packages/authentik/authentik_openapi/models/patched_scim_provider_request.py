# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PatchedSCIMProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, property_mappings: List[str]=None, property_mappings_group: List[str]=None, url: str=None, token: str=None, exclude_users_service_account: bool=None, filter_group: str=None):
        """PatchedSCIMProviderRequest - a model defined in OpenAPI

        :param name: The name of this PatchedSCIMProviderRequest.
        :param property_mappings: The property_mappings of this PatchedSCIMProviderRequest.
        :param property_mappings_group: The property_mappings_group of this PatchedSCIMProviderRequest.
        :param url: The url of this PatchedSCIMProviderRequest.
        :param token: The token of this PatchedSCIMProviderRequest.
        :param exclude_users_service_account: The exclude_users_service_account of this PatchedSCIMProviderRequest.
        :param filter_group: The filter_group of this PatchedSCIMProviderRequest.
        """
        self.openapi_types = {
            'name': str,
            'property_mappings': List[str],
            'property_mappings_group': List[str],
            'url': str,
            'token': str,
            'exclude_users_service_account': bool,
            'filter_group': str
        }

        self.attribute_map = {
            'name': 'name',
            'property_mappings': 'property_mappings',
            'property_mappings_group': 'property_mappings_group',
            'url': 'url',
            'token': 'token',
            'exclude_users_service_account': 'exclude_users_service_account',
            'filter_group': 'filter_group'
        }

        self._name = name
        self._property_mappings = property_mappings
        self._property_mappings_group = property_mappings_group
        self._url = url
        self._token = token
        self._exclude_users_service_account = exclude_users_service_account
        self._filter_group = filter_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedSCIMProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedSCIMProviderRequest of this PatchedSCIMProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedSCIMProviderRequest.


        :return: The name of this PatchedSCIMProviderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedSCIMProviderRequest.


        :param name: The name of this PatchedSCIMProviderRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def property_mappings(self):
        """Gets the property_mappings of this PatchedSCIMProviderRequest.


        :return: The property_mappings of this PatchedSCIMProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this PatchedSCIMProviderRequest.


        :param property_mappings: The property_mappings of this PatchedSCIMProviderRequest.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def property_mappings_group(self):
        """Gets the property_mappings_group of this PatchedSCIMProviderRequest.

        Property mappings used for group creation/updating.

        :return: The property_mappings_group of this PatchedSCIMProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings_group

    @property_mappings_group.setter
    def property_mappings_group(self, property_mappings_group):
        """Sets the property_mappings_group of this PatchedSCIMProviderRequest.

        Property mappings used for group creation/updating.

        :param property_mappings_group: The property_mappings_group of this PatchedSCIMProviderRequest.
        :type property_mappings_group: List[str]
        """

        self._property_mappings_group = property_mappings_group

    @property
    def url(self):
        """Gets the url of this PatchedSCIMProviderRequest.

        Base URL to SCIM requests, usually ends in /v2

        :return: The url of this PatchedSCIMProviderRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PatchedSCIMProviderRequest.

        Base URL to SCIM requests, usually ends in /v2

        :param url: The url of this PatchedSCIMProviderRequest.
        :type url: str
        """
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def token(self):
        """Gets the token of this PatchedSCIMProviderRequest.

        Authentication token

        :return: The token of this PatchedSCIMProviderRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PatchedSCIMProviderRequest.

        Authentication token

        :param token: The token of this PatchedSCIMProviderRequest.
        :type token: str
        """
        if token is not None and len(token) < 1:
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `1`")

        self._token = token

    @property
    def exclude_users_service_account(self):
        """Gets the exclude_users_service_account of this PatchedSCIMProviderRequest.


        :return: The exclude_users_service_account of this PatchedSCIMProviderRequest.
        :rtype: bool
        """
        return self._exclude_users_service_account

    @exclude_users_service_account.setter
    def exclude_users_service_account(self, exclude_users_service_account):
        """Sets the exclude_users_service_account of this PatchedSCIMProviderRequest.


        :param exclude_users_service_account: The exclude_users_service_account of this PatchedSCIMProviderRequest.
        :type exclude_users_service_account: bool
        """

        self._exclude_users_service_account = exclude_users_service_account

    @property
    def filter_group(self):
        """Gets the filter_group of this PatchedSCIMProviderRequest.


        :return: The filter_group of this PatchedSCIMProviderRequest.
        :rtype: str
        """
        return self._filter_group

    @filter_group.setter
    def filter_group(self, filter_group):
        """Sets the filter_group of this PatchedSCIMProviderRequest.


        :param filter_group: The filter_group of this PatchedSCIMProviderRequest.
        :type filter_group: str
        """

        self._filter_group = filter_group
