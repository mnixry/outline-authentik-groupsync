# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set import FlowSet
from authentik_openapi.models.geoip_binding_enum import GeoipBindingEnum
from authentik_openapi.models.network_binding_enum import NetworkBindingEnum
from authentik_openapi import util


class UserLoginStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, flow_set: List[FlowSet]=None, session_duration: str=None, terminate_other_sessions: bool=None, remember_me_offset: str=None, network_binding: NetworkBindingEnum=None, geoip_binding: GeoipBindingEnum=None):
        """UserLoginStage - a model defined in OpenAPI

        :param pk: The pk of this UserLoginStage.
        :param name: The name of this UserLoginStage.
        :param component: The component of this UserLoginStage.
        :param verbose_name: The verbose_name of this UserLoginStage.
        :param verbose_name_plural: The verbose_name_plural of this UserLoginStage.
        :param meta_model_name: The meta_model_name of this UserLoginStage.
        :param flow_set: The flow_set of this UserLoginStage.
        :param session_duration: The session_duration of this UserLoginStage.
        :param terminate_other_sessions: The terminate_other_sessions of this UserLoginStage.
        :param remember_me_offset: The remember_me_offset of this UserLoginStage.
        :param network_binding: The network_binding of this UserLoginStage.
        :param geoip_binding: The geoip_binding of this UserLoginStage.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'flow_set': List[FlowSet],
            'session_duration': str,
            'terminate_other_sessions': bool,
            'remember_me_offset': str,
            'network_binding': NetworkBindingEnum,
            'geoip_binding': GeoipBindingEnum
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'flow_set': 'flow_set',
            'session_duration': 'session_duration',
            'terminate_other_sessions': 'terminate_other_sessions',
            'remember_me_offset': 'remember_me_offset',
            'network_binding': 'network_binding',
            'geoip_binding': 'geoip_binding'
        }

        self._pk = pk
        self._name = name
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._flow_set = flow_set
        self._session_duration = session_duration
        self._terminate_other_sessions = terminate_other_sessions
        self._remember_me_offset = remember_me_offset
        self._network_binding = network_binding
        self._geoip_binding = geoip_binding

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserLoginStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserLoginStage of this UserLoginStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this UserLoginStage.


        :return: The pk of this UserLoginStage.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this UserLoginStage.


        :param pk: The pk of this UserLoginStage.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this UserLoginStage.


        :return: The name of this UserLoginStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserLoginStage.


        :param name: The name of this UserLoginStage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def component(self):
        """Gets the component of this UserLoginStage.

        Get object type so that we know how to edit the object

        :return: The component of this UserLoginStage.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this UserLoginStage.

        Get object type so that we know how to edit the object

        :param component: The component of this UserLoginStage.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this UserLoginStage.

        Return object's verbose_name

        :return: The verbose_name of this UserLoginStage.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this UserLoginStage.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this UserLoginStage.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this UserLoginStage.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this UserLoginStage.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this UserLoginStage.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this UserLoginStage.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this UserLoginStage.

        Return internal model name

        :return: The meta_model_name of this UserLoginStage.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this UserLoginStage.

        Return internal model name

        :param meta_model_name: The meta_model_name of this UserLoginStage.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def flow_set(self):
        """Gets the flow_set of this UserLoginStage.


        :return: The flow_set of this UserLoginStage.
        :rtype: List[FlowSet]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this UserLoginStage.


        :param flow_set: The flow_set of this UserLoginStage.
        :type flow_set: List[FlowSet]
        """

        self._flow_set = flow_set

    @property
    def session_duration(self):
        """Gets the session_duration of this UserLoginStage.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :return: The session_duration of this UserLoginStage.
        :rtype: str
        """
        return self._session_duration

    @session_duration.setter
    def session_duration(self, session_duration):
        """Sets the session_duration of this UserLoginStage.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :param session_duration: The session_duration of this UserLoginStage.
        :type session_duration: str
        """

        self._session_duration = session_duration

    @property
    def terminate_other_sessions(self):
        """Gets the terminate_other_sessions of this UserLoginStage.

        Terminate all other sessions of the user logging in.

        :return: The terminate_other_sessions of this UserLoginStage.
        :rtype: bool
        """
        return self._terminate_other_sessions

    @terminate_other_sessions.setter
    def terminate_other_sessions(self, terminate_other_sessions):
        """Sets the terminate_other_sessions of this UserLoginStage.

        Terminate all other sessions of the user logging in.

        :param terminate_other_sessions: The terminate_other_sessions of this UserLoginStage.
        :type terminate_other_sessions: bool
        """

        self._terminate_other_sessions = terminate_other_sessions

    @property
    def remember_me_offset(self):
        """Gets the remember_me_offset of this UserLoginStage.

        Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)

        :return: The remember_me_offset of this UserLoginStage.
        :rtype: str
        """
        return self._remember_me_offset

    @remember_me_offset.setter
    def remember_me_offset(self, remember_me_offset):
        """Sets the remember_me_offset of this UserLoginStage.

        Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)

        :param remember_me_offset: The remember_me_offset of this UserLoginStage.
        :type remember_me_offset: str
        """

        self._remember_me_offset = remember_me_offset

    @property
    def network_binding(self):
        """Gets the network_binding of this UserLoginStage.

        Bind sessions created by this stage to the configured network

        :return: The network_binding of this UserLoginStage.
        :rtype: NetworkBindingEnum
        """
        return self._network_binding

    @network_binding.setter
    def network_binding(self, network_binding):
        """Sets the network_binding of this UserLoginStage.

        Bind sessions created by this stage to the configured network

        :param network_binding: The network_binding of this UserLoginStage.
        :type network_binding: NetworkBindingEnum
        """

        self._network_binding = network_binding

    @property
    def geoip_binding(self):
        """Gets the geoip_binding of this UserLoginStage.

        Bind sessions created by this stage to the configured GeoIP location

        :return: The geoip_binding of this UserLoginStage.
        :rtype: GeoipBindingEnum
        """
        return self._geoip_binding

    @geoip_binding.setter
    def geoip_binding(self, geoip_binding):
        """Sets the geoip_binding of this UserLoginStage.

        Bind sessions created by this stage to the configured GeoIP location

        :param geoip_binding: The geoip_binding of this UserLoginStage.
        :type geoip_binding: GeoipBindingEnum
        """

        self._geoip_binding = geoip_binding
