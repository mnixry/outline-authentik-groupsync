# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.contextual_flow_info import ContextualFlowInfo
from authentik_openapi.models.error_detail import ErrorDetail
from authentik_openapi import util


class AppleLoginChallenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_info: ContextualFlowInfo=None, component: str='ak-source-oauth-apple', response_errors: Dict[str, List[ErrorDetail]]=None, client_id: str=None, scope: str=None, redirect_uri: str=None, state: str=None):
        """AppleLoginChallenge - a model defined in OpenAPI

        :param flow_info: The flow_info of this AppleLoginChallenge.
        :param component: The component of this AppleLoginChallenge.
        :param response_errors: The response_errors of this AppleLoginChallenge.
        :param client_id: The client_id of this AppleLoginChallenge.
        :param scope: The scope of this AppleLoginChallenge.
        :param redirect_uri: The redirect_uri of this AppleLoginChallenge.
        :param state: The state of this AppleLoginChallenge.
        """
        self.openapi_types = {
            'flow_info': ContextualFlowInfo,
            'component': str,
            'response_errors': Dict[str, List[ErrorDetail]],
            'client_id': str,
            'scope': str,
            'redirect_uri': str,
            'state': str
        }

        self.attribute_map = {
            'flow_info': 'flow_info',
            'component': 'component',
            'response_errors': 'response_errors',
            'client_id': 'client_id',
            'scope': 'scope',
            'redirect_uri': 'redirect_uri',
            'state': 'state'
        }

        self._flow_info = flow_info
        self._component = component
        self._response_errors = response_errors
        self._client_id = client_id
        self._scope = scope
        self._redirect_uri = redirect_uri
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppleLoginChallenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppleLoginChallenge of this AppleLoginChallenge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_info(self):
        """Gets the flow_info of this AppleLoginChallenge.


        :return: The flow_info of this AppleLoginChallenge.
        :rtype: ContextualFlowInfo
        """
        return self._flow_info

    @flow_info.setter
    def flow_info(self, flow_info):
        """Sets the flow_info of this AppleLoginChallenge.


        :param flow_info: The flow_info of this AppleLoginChallenge.
        :type flow_info: ContextualFlowInfo
        """

        self._flow_info = flow_info

    @property
    def component(self):
        """Gets the component of this AppleLoginChallenge.


        :return: The component of this AppleLoginChallenge.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this AppleLoginChallenge.


        :param component: The component of this AppleLoginChallenge.
        :type component: str
        """

        self._component = component

    @property
    def response_errors(self):
        """Gets the response_errors of this AppleLoginChallenge.


        :return: The response_errors of this AppleLoginChallenge.
        :rtype: Dict[str, List[ErrorDetail]]
        """
        return self._response_errors

    @response_errors.setter
    def response_errors(self, response_errors):
        """Sets the response_errors of this AppleLoginChallenge.


        :param response_errors: The response_errors of this AppleLoginChallenge.
        :type response_errors: Dict[str, List[ErrorDetail]]
        """

        self._response_errors = response_errors

    @property
    def client_id(self):
        """Gets the client_id of this AppleLoginChallenge.


        :return: The client_id of this AppleLoginChallenge.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AppleLoginChallenge.


        :param client_id: The client_id of this AppleLoginChallenge.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def scope(self):
        """Gets the scope of this AppleLoginChallenge.


        :return: The scope of this AppleLoginChallenge.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AppleLoginChallenge.


        :param scope: The scope of this AppleLoginChallenge.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this AppleLoginChallenge.


        :return: The redirect_uri of this AppleLoginChallenge.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this AppleLoginChallenge.


        :param redirect_uri: The redirect_uri of this AppleLoginChallenge.
        :type redirect_uri: str
        """
        if redirect_uri is None:
            raise ValueError("Invalid value for `redirect_uri`, must not be `None`")

        self._redirect_uri = redirect_uri

    @property
    def state(self):
        """Gets the state of this AppleLoginChallenge.


        :return: The state of this AppleLoginChallenge.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AppleLoginChallenge.


        :param state: The state of this AppleLoginChallenge.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
