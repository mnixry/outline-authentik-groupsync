# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.proxy_mode import ProxyMode
from authentik_openapi import util


class PatchedProxyProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, authentication_flow: str=None, authorization_flow: str=None, property_mappings: List[str]=None, internal_host: str=None, external_host: str=None, internal_host_ssl_validation: bool=None, certificate: str=None, skip_path_regex: str=None, basic_auth_enabled: bool=None, basic_auth_password_attribute: str=None, basic_auth_user_attribute: str=None, mode: ProxyMode=None, intercept_header_auth: bool=None, cookie_domain: str=None, jwks_sources: List[str]=None, access_token_validity: str=None, refresh_token_validity: str=None):
        """PatchedProxyProviderRequest - a model defined in OpenAPI

        :param name: The name of this PatchedProxyProviderRequest.
        :param authentication_flow: The authentication_flow of this PatchedProxyProviderRequest.
        :param authorization_flow: The authorization_flow of this PatchedProxyProviderRequest.
        :param property_mappings: The property_mappings of this PatchedProxyProviderRequest.
        :param internal_host: The internal_host of this PatchedProxyProviderRequest.
        :param external_host: The external_host of this PatchedProxyProviderRequest.
        :param internal_host_ssl_validation: The internal_host_ssl_validation of this PatchedProxyProviderRequest.
        :param certificate: The certificate of this PatchedProxyProviderRequest.
        :param skip_path_regex: The skip_path_regex of this PatchedProxyProviderRequest.
        :param basic_auth_enabled: The basic_auth_enabled of this PatchedProxyProviderRequest.
        :param basic_auth_password_attribute: The basic_auth_password_attribute of this PatchedProxyProviderRequest.
        :param basic_auth_user_attribute: The basic_auth_user_attribute of this PatchedProxyProviderRequest.
        :param mode: The mode of this PatchedProxyProviderRequest.
        :param intercept_header_auth: The intercept_header_auth of this PatchedProxyProviderRequest.
        :param cookie_domain: The cookie_domain of this PatchedProxyProviderRequest.
        :param jwks_sources: The jwks_sources of this PatchedProxyProviderRequest.
        :param access_token_validity: The access_token_validity of this PatchedProxyProviderRequest.
        :param refresh_token_validity: The refresh_token_validity of this PatchedProxyProviderRequest.
        """
        self.openapi_types = {
            'name': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'property_mappings': List[str],
            'internal_host': str,
            'external_host': str,
            'internal_host_ssl_validation': bool,
            'certificate': str,
            'skip_path_regex': str,
            'basic_auth_enabled': bool,
            'basic_auth_password_attribute': str,
            'basic_auth_user_attribute': str,
            'mode': ProxyMode,
            'intercept_header_auth': bool,
            'cookie_domain': str,
            'jwks_sources': List[str],
            'access_token_validity': str,
            'refresh_token_validity': str
        }

        self.attribute_map = {
            'name': 'name',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'property_mappings': 'property_mappings',
            'internal_host': 'internal_host',
            'external_host': 'external_host',
            'internal_host_ssl_validation': 'internal_host_ssl_validation',
            'certificate': 'certificate',
            'skip_path_regex': 'skip_path_regex',
            'basic_auth_enabled': 'basic_auth_enabled',
            'basic_auth_password_attribute': 'basic_auth_password_attribute',
            'basic_auth_user_attribute': 'basic_auth_user_attribute',
            'mode': 'mode',
            'intercept_header_auth': 'intercept_header_auth',
            'cookie_domain': 'cookie_domain',
            'jwks_sources': 'jwks_sources',
            'access_token_validity': 'access_token_validity',
            'refresh_token_validity': 'refresh_token_validity'
        }

        self._name = name
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._property_mappings = property_mappings
        self._internal_host = internal_host
        self._external_host = external_host
        self._internal_host_ssl_validation = internal_host_ssl_validation
        self._certificate = certificate
        self._skip_path_regex = skip_path_regex
        self._basic_auth_enabled = basic_auth_enabled
        self._basic_auth_password_attribute = basic_auth_password_attribute
        self._basic_auth_user_attribute = basic_auth_user_attribute
        self._mode = mode
        self._intercept_header_auth = intercept_header_auth
        self._cookie_domain = cookie_domain
        self._jwks_sources = jwks_sources
        self._access_token_validity = access_token_validity
        self._refresh_token_validity = refresh_token_validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedProxyProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedProxyProviderRequest of this PatchedProxyProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedProxyProviderRequest.


        :return: The name of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedProxyProviderRequest.


        :param name: The name of this PatchedProxyProviderRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this PatchedProxyProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this PatchedProxyProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this PatchedProxyProviderRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this PatchedProxyProviderRequest.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this PatchedProxyProviderRequest.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this PatchedProxyProviderRequest.
        :type authorization_flow: str
        """

        self._authorization_flow = authorization_flow

    @property
    def property_mappings(self):
        """Gets the property_mappings of this PatchedProxyProviderRequest.


        :return: The property_mappings of this PatchedProxyProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this PatchedProxyProviderRequest.


        :param property_mappings: The property_mappings of this PatchedProxyProviderRequest.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def internal_host(self):
        """Gets the internal_host of this PatchedProxyProviderRequest.


        :return: The internal_host of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._internal_host

    @internal_host.setter
    def internal_host(self, internal_host):
        """Sets the internal_host of this PatchedProxyProviderRequest.


        :param internal_host: The internal_host of this PatchedProxyProviderRequest.
        :type internal_host: str
        """

        self._internal_host = internal_host

    @property
    def external_host(self):
        """Gets the external_host of this PatchedProxyProviderRequest.


        :return: The external_host of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._external_host

    @external_host.setter
    def external_host(self, external_host):
        """Sets the external_host of this PatchedProxyProviderRequest.


        :param external_host: The external_host of this PatchedProxyProviderRequest.
        :type external_host: str
        """
        if external_host is not None and len(external_host) < 1:
            raise ValueError("Invalid value for `external_host`, length must be greater than or equal to `1`")

        self._external_host = external_host

    @property
    def internal_host_ssl_validation(self):
        """Gets the internal_host_ssl_validation of this PatchedProxyProviderRequest.

        Validate SSL Certificates of upstream servers

        :return: The internal_host_ssl_validation of this PatchedProxyProviderRequest.
        :rtype: bool
        """
        return self._internal_host_ssl_validation

    @internal_host_ssl_validation.setter
    def internal_host_ssl_validation(self, internal_host_ssl_validation):
        """Sets the internal_host_ssl_validation of this PatchedProxyProviderRequest.

        Validate SSL Certificates of upstream servers

        :param internal_host_ssl_validation: The internal_host_ssl_validation of this PatchedProxyProviderRequest.
        :type internal_host_ssl_validation: bool
        """

        self._internal_host_ssl_validation = internal_host_ssl_validation

    @property
    def certificate(self):
        """Gets the certificate of this PatchedProxyProviderRequest.


        :return: The certificate of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this PatchedProxyProviderRequest.


        :param certificate: The certificate of this PatchedProxyProviderRequest.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def skip_path_regex(self):
        """Gets the skip_path_regex of this PatchedProxyProviderRequest.

        Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.

        :return: The skip_path_regex of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._skip_path_regex

    @skip_path_regex.setter
    def skip_path_regex(self, skip_path_regex):
        """Sets the skip_path_regex of this PatchedProxyProviderRequest.

        Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.

        :param skip_path_regex: The skip_path_regex of this PatchedProxyProviderRequest.
        :type skip_path_regex: str
        """

        self._skip_path_regex = skip_path_regex

    @property
    def basic_auth_enabled(self):
        """Gets the basic_auth_enabled of this PatchedProxyProviderRequest.

        Set a custom HTTP-Basic Authentication header based on values from authentik.

        :return: The basic_auth_enabled of this PatchedProxyProviderRequest.
        :rtype: bool
        """
        return self._basic_auth_enabled

    @basic_auth_enabled.setter
    def basic_auth_enabled(self, basic_auth_enabled):
        """Sets the basic_auth_enabled of this PatchedProxyProviderRequest.

        Set a custom HTTP-Basic Authentication header based on values from authentik.

        :param basic_auth_enabled: The basic_auth_enabled of this PatchedProxyProviderRequest.
        :type basic_auth_enabled: bool
        """

        self._basic_auth_enabled = basic_auth_enabled

    @property
    def basic_auth_password_attribute(self):
        """Gets the basic_auth_password_attribute of this PatchedProxyProviderRequest.

        User/Group Attribute used for the password part of the HTTP-Basic Header.

        :return: The basic_auth_password_attribute of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._basic_auth_password_attribute

    @basic_auth_password_attribute.setter
    def basic_auth_password_attribute(self, basic_auth_password_attribute):
        """Sets the basic_auth_password_attribute of this PatchedProxyProviderRequest.

        User/Group Attribute used for the password part of the HTTP-Basic Header.

        :param basic_auth_password_attribute: The basic_auth_password_attribute of this PatchedProxyProviderRequest.
        :type basic_auth_password_attribute: str
        """

        self._basic_auth_password_attribute = basic_auth_password_attribute

    @property
    def basic_auth_user_attribute(self):
        """Gets the basic_auth_user_attribute of this PatchedProxyProviderRequest.

        User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.

        :return: The basic_auth_user_attribute of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._basic_auth_user_attribute

    @basic_auth_user_attribute.setter
    def basic_auth_user_attribute(self, basic_auth_user_attribute):
        """Sets the basic_auth_user_attribute of this PatchedProxyProviderRequest.

        User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.

        :param basic_auth_user_attribute: The basic_auth_user_attribute of this PatchedProxyProviderRequest.
        :type basic_auth_user_attribute: str
        """

        self._basic_auth_user_attribute = basic_auth_user_attribute

    @property
    def mode(self):
        """Gets the mode of this PatchedProxyProviderRequest.

        Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.

        :return: The mode of this PatchedProxyProviderRequest.
        :rtype: ProxyMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PatchedProxyProviderRequest.

        Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.

        :param mode: The mode of this PatchedProxyProviderRequest.
        :type mode: ProxyMode
        """

        self._mode = mode

    @property
    def intercept_header_auth(self):
        """Gets the intercept_header_auth of this PatchedProxyProviderRequest.

        When enabled, this provider will intercept the authorization header and authenticate requests based on its value.

        :return: The intercept_header_auth of this PatchedProxyProviderRequest.
        :rtype: bool
        """
        return self._intercept_header_auth

    @intercept_header_auth.setter
    def intercept_header_auth(self, intercept_header_auth):
        """Sets the intercept_header_auth of this PatchedProxyProviderRequest.

        When enabled, this provider will intercept the authorization header and authenticate requests based on its value.

        :param intercept_header_auth: The intercept_header_auth of this PatchedProxyProviderRequest.
        :type intercept_header_auth: bool
        """

        self._intercept_header_auth = intercept_header_auth

    @property
    def cookie_domain(self):
        """Gets the cookie_domain of this PatchedProxyProviderRequest.


        :return: The cookie_domain of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._cookie_domain

    @cookie_domain.setter
    def cookie_domain(self, cookie_domain):
        """Sets the cookie_domain of this PatchedProxyProviderRequest.


        :param cookie_domain: The cookie_domain of this PatchedProxyProviderRequest.
        :type cookie_domain: str
        """

        self._cookie_domain = cookie_domain

    @property
    def jwks_sources(self):
        """Gets the jwks_sources of this PatchedProxyProviderRequest.


        :return: The jwks_sources of this PatchedProxyProviderRequest.
        :rtype: List[str]
        """
        return self._jwks_sources

    @jwks_sources.setter
    def jwks_sources(self, jwks_sources):
        """Sets the jwks_sources of this PatchedProxyProviderRequest.


        :param jwks_sources: The jwks_sources of this PatchedProxyProviderRequest.
        :type jwks_sources: List[str]
        """

        self._jwks_sources = jwks_sources

    @property
    def access_token_validity(self):
        """Gets the access_token_validity of this PatchedProxyProviderRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The access_token_validity of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._access_token_validity

    @access_token_validity.setter
    def access_token_validity(self, access_token_validity):
        """Sets the access_token_validity of this PatchedProxyProviderRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param access_token_validity: The access_token_validity of this PatchedProxyProviderRequest.
        :type access_token_validity: str
        """
        if access_token_validity is not None and len(access_token_validity) < 1:
            raise ValueError("Invalid value for `access_token_validity`, length must be greater than or equal to `1`")

        self._access_token_validity = access_token_validity

    @property
    def refresh_token_validity(self):
        """Gets the refresh_token_validity of this PatchedProxyProviderRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The refresh_token_validity of this PatchedProxyProviderRequest.
        :rtype: str
        """
        return self._refresh_token_validity

    @refresh_token_validity.setter
    def refresh_token_validity(self, refresh_token_validity):
        """Sets the refresh_token_validity of this PatchedProxyProviderRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param refresh_token_validity: The refresh_token_validity of this PatchedProxyProviderRequest.
        :type refresh_token_validity: str
        """
        if refresh_token_validity is not None and len(refresh_token_validity) < 1:
            raise ValueError("Invalid value for `refresh_token_validity`, length must be greater than or equal to `1`")

        self._refresh_token_validity = refresh_token_validity
