# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PatchedDummyPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, execution_logging: bool=None, result: bool=None, wait_min: int=None, wait_max: int=None):
        """PatchedDummyPolicyRequest - a model defined in OpenAPI

        :param name: The name of this PatchedDummyPolicyRequest.
        :param execution_logging: The execution_logging of this PatchedDummyPolicyRequest.
        :param result: The result of this PatchedDummyPolicyRequest.
        :param wait_min: The wait_min of this PatchedDummyPolicyRequest.
        :param wait_max: The wait_max of this PatchedDummyPolicyRequest.
        """
        self.openapi_types = {
            'name': str,
            'execution_logging': bool,
            'result': bool,
            'wait_min': int,
            'wait_max': int
        }

        self.attribute_map = {
            'name': 'name',
            'execution_logging': 'execution_logging',
            'result': 'result',
            'wait_min': 'wait_min',
            'wait_max': 'wait_max'
        }

        self._name = name
        self._execution_logging = execution_logging
        self._result = result
        self._wait_min = wait_min
        self._wait_max = wait_max

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedDummyPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedDummyPolicyRequest of this PatchedDummyPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedDummyPolicyRequest.


        :return: The name of this PatchedDummyPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedDummyPolicyRequest.


        :param name: The name of this PatchedDummyPolicyRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def execution_logging(self):
        """Gets the execution_logging of this PatchedDummyPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :return: The execution_logging of this PatchedDummyPolicyRequest.
        :rtype: bool
        """
        return self._execution_logging

    @execution_logging.setter
    def execution_logging(self, execution_logging):
        """Sets the execution_logging of this PatchedDummyPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :param execution_logging: The execution_logging of this PatchedDummyPolicyRequest.
        :type execution_logging: bool
        """

        self._execution_logging = execution_logging

    @property
    def result(self):
        """Gets the result of this PatchedDummyPolicyRequest.


        :return: The result of this PatchedDummyPolicyRequest.
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PatchedDummyPolicyRequest.


        :param result: The result of this PatchedDummyPolicyRequest.
        :type result: bool
        """

        self._result = result

    @property
    def wait_min(self):
        """Gets the wait_min of this PatchedDummyPolicyRequest.


        :return: The wait_min of this PatchedDummyPolicyRequest.
        :rtype: int
        """
        return self._wait_min

    @wait_min.setter
    def wait_min(self, wait_min):
        """Sets the wait_min of this PatchedDummyPolicyRequest.


        :param wait_min: The wait_min of this PatchedDummyPolicyRequest.
        :type wait_min: int
        """
        if wait_min is not None and wait_min > 2147483647:
            raise ValueError("Invalid value for `wait_min`, must be a value less than or equal to `2147483647`")
        if wait_min is not None and wait_min < -2147483648:
            raise ValueError("Invalid value for `wait_min`, must be a value greater than or equal to `-2147483648`")

        self._wait_min = wait_min

    @property
    def wait_max(self):
        """Gets the wait_max of this PatchedDummyPolicyRequest.


        :return: The wait_max of this PatchedDummyPolicyRequest.
        :rtype: int
        """
        return self._wait_max

    @wait_max.setter
    def wait_max(self, wait_max):
        """Sets the wait_max of this PatchedDummyPolicyRequest.


        :param wait_max: The wait_max of this PatchedDummyPolicyRequest.
        :type wait_max: int
        """
        if wait_max is not None and wait_max > 2147483647:
            raise ValueError("Invalid value for `wait_max`, must be a value less than or equal to `2147483647`")
        if wait_max is not None and wait_max < -2147483648:
            raise ValueError("Invalid value for `wait_max`, must be a value greater than or equal to `-2147483648`")

        self._wait_max = wait_max
