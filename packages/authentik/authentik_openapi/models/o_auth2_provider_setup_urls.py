# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class OAuth2ProviderSetupURLs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuer: str=None, authorize: str=None, token: str=None, user_info: str=None, provider_info: str=None, logout: str=None, jwks: str=None):
        """OAuth2ProviderSetupURLs - a model defined in OpenAPI

        :param issuer: The issuer of this OAuth2ProviderSetupURLs.
        :param authorize: The authorize of this OAuth2ProviderSetupURLs.
        :param token: The token of this OAuth2ProviderSetupURLs.
        :param user_info: The user_info of this OAuth2ProviderSetupURLs.
        :param provider_info: The provider_info of this OAuth2ProviderSetupURLs.
        :param logout: The logout of this OAuth2ProviderSetupURLs.
        :param jwks: The jwks of this OAuth2ProviderSetupURLs.
        """
        self.openapi_types = {
            'issuer': str,
            'authorize': str,
            'token': str,
            'user_info': str,
            'provider_info': str,
            'logout': str,
            'jwks': str
        }

        self.attribute_map = {
            'issuer': 'issuer',
            'authorize': 'authorize',
            'token': 'token',
            'user_info': 'user_info',
            'provider_info': 'provider_info',
            'logout': 'logout',
            'jwks': 'jwks'
        }

        self._issuer = issuer
        self._authorize = authorize
        self._token = token
        self._user_info = user_info
        self._provider_info = provider_info
        self._logout = logout
        self._jwks = jwks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuth2ProviderSetupURLs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuth2ProviderSetupURLs of this OAuth2ProviderSetupURLs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer(self):
        """Gets the issuer of this OAuth2ProviderSetupURLs.


        :return: The issuer of this OAuth2ProviderSetupURLs.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this OAuth2ProviderSetupURLs.


        :param issuer: The issuer of this OAuth2ProviderSetupURLs.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def authorize(self):
        """Gets the authorize of this OAuth2ProviderSetupURLs.


        :return: The authorize of this OAuth2ProviderSetupURLs.
        :rtype: str
        """
        return self._authorize

    @authorize.setter
    def authorize(self, authorize):
        """Sets the authorize of this OAuth2ProviderSetupURLs.


        :param authorize: The authorize of this OAuth2ProviderSetupURLs.
        :type authorize: str
        """
        if authorize is None:
            raise ValueError("Invalid value for `authorize`, must not be `None`")

        self._authorize = authorize

    @property
    def token(self):
        """Gets the token of this OAuth2ProviderSetupURLs.


        :return: The token of this OAuth2ProviderSetupURLs.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this OAuth2ProviderSetupURLs.


        :param token: The token of this OAuth2ProviderSetupURLs.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def user_info(self):
        """Gets the user_info of this OAuth2ProviderSetupURLs.


        :return: The user_info of this OAuth2ProviderSetupURLs.
        :rtype: str
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this OAuth2ProviderSetupURLs.


        :param user_info: The user_info of this OAuth2ProviderSetupURLs.
        :type user_info: str
        """
        if user_info is None:
            raise ValueError("Invalid value for `user_info`, must not be `None`")

        self._user_info = user_info

    @property
    def provider_info(self):
        """Gets the provider_info of this OAuth2ProviderSetupURLs.


        :return: The provider_info of this OAuth2ProviderSetupURLs.
        :rtype: str
        """
        return self._provider_info

    @provider_info.setter
    def provider_info(self, provider_info):
        """Sets the provider_info of this OAuth2ProviderSetupURLs.


        :param provider_info: The provider_info of this OAuth2ProviderSetupURLs.
        :type provider_info: str
        """
        if provider_info is None:
            raise ValueError("Invalid value for `provider_info`, must not be `None`")

        self._provider_info = provider_info

    @property
    def logout(self):
        """Gets the logout of this OAuth2ProviderSetupURLs.


        :return: The logout of this OAuth2ProviderSetupURLs.
        :rtype: str
        """
        return self._logout

    @logout.setter
    def logout(self, logout):
        """Sets the logout of this OAuth2ProviderSetupURLs.


        :param logout: The logout of this OAuth2ProviderSetupURLs.
        :type logout: str
        """
        if logout is None:
            raise ValueError("Invalid value for `logout`, must not be `None`")

        self._logout = logout

    @property
    def jwks(self):
        """Gets the jwks of this OAuth2ProviderSetupURLs.


        :return: The jwks of this OAuth2ProviderSetupURLs.
        :rtype: str
        """
        return self._jwks

    @jwks.setter
    def jwks(self, jwks):
        """Sets the jwks of this OAuth2ProviderSetupURLs.


        :param jwks: The jwks of this OAuth2ProviderSetupURLs.
        :type jwks: str
        """
        if jwks is None:
            raise ValueError("Invalid value for `jwks`, must not be `None`")

        self._jwks = jwks
