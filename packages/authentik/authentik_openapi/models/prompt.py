# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.prompt_type_enum import PromptTypeEnum
from authentik_openapi.models.stage import Stage
from authentik_openapi import util


class Prompt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, field_key: str=None, label: str=None, type: PromptTypeEnum=None, required: bool=None, placeholder: str=None, initial_value: str=None, order: int=None, promptstage_set: List[Stage]=None, sub_text: str=None, placeholder_expression: bool=None, initial_value_expression: bool=None):
        """Prompt - a model defined in OpenAPI

        :param pk: The pk of this Prompt.
        :param name: The name of this Prompt.
        :param field_key: The field_key of this Prompt.
        :param label: The label of this Prompt.
        :param type: The type of this Prompt.
        :param required: The required of this Prompt.
        :param placeholder: The placeholder of this Prompt.
        :param initial_value: The initial_value of this Prompt.
        :param order: The order of this Prompt.
        :param promptstage_set: The promptstage_set of this Prompt.
        :param sub_text: The sub_text of this Prompt.
        :param placeholder_expression: The placeholder_expression of this Prompt.
        :param initial_value_expression: The initial_value_expression of this Prompt.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'field_key': str,
            'label': str,
            'type': PromptTypeEnum,
            'required': bool,
            'placeholder': str,
            'initial_value': str,
            'order': int,
            'promptstage_set': List[Stage],
            'sub_text': str,
            'placeholder_expression': bool,
            'initial_value_expression': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'field_key': 'field_key',
            'label': 'label',
            'type': 'type',
            'required': 'required',
            'placeholder': 'placeholder',
            'initial_value': 'initial_value',
            'order': 'order',
            'promptstage_set': 'promptstage_set',
            'sub_text': 'sub_text',
            'placeholder_expression': 'placeholder_expression',
            'initial_value_expression': 'initial_value_expression'
        }

        self._pk = pk
        self._name = name
        self._field_key = field_key
        self._label = label
        self._type = type
        self._required = required
        self._placeholder = placeholder
        self._initial_value = initial_value
        self._order = order
        self._promptstage_set = promptstage_set
        self._sub_text = sub_text
        self._placeholder_expression = placeholder_expression
        self._initial_value_expression = initial_value_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Prompt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prompt of this Prompt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Prompt.


        :return: The pk of this Prompt.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Prompt.


        :param pk: The pk of this Prompt.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this Prompt.


        :return: The name of this Prompt.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Prompt.


        :param name: The name of this Prompt.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def field_key(self):
        """Gets the field_key of this Prompt.

        Name of the form field, also used to store the value

        :return: The field_key of this Prompt.
        :rtype: str
        """
        return self._field_key

    @field_key.setter
    def field_key(self, field_key):
        """Sets the field_key of this Prompt.

        Name of the form field, also used to store the value

        :param field_key: The field_key of this Prompt.
        :type field_key: str
        """
        if field_key is None:
            raise ValueError("Invalid value for `field_key`, must not be `None`")

        self._field_key = field_key

    @property
    def label(self):
        """Gets the label of this Prompt.


        :return: The label of this Prompt.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Prompt.


        :param label: The label of this Prompt.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def type(self):
        """Gets the type of this Prompt.


        :return: The type of this Prompt.
        :rtype: PromptTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Prompt.


        :param type: The type of this Prompt.
        :type type: PromptTypeEnum
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def required(self):
        """Gets the required of this Prompt.


        :return: The required of this Prompt.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Prompt.


        :param required: The required of this Prompt.
        :type required: bool
        """

        self._required = required

    @property
    def placeholder(self):
        """Gets the placeholder of this Prompt.

        Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices.

        :return: The placeholder of this Prompt.
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this Prompt.

        Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices.

        :param placeholder: The placeholder of this Prompt.
        :type placeholder: str
        """

        self._placeholder = placeholder

    @property
    def initial_value(self):
        """Gets the initial_value of this Prompt.

        Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices.

        :return: The initial_value of this Prompt.
        :rtype: str
        """
        return self._initial_value

    @initial_value.setter
    def initial_value(self, initial_value):
        """Sets the initial_value of this Prompt.

        Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices.

        :param initial_value: The initial_value of this Prompt.
        :type initial_value: str
        """

        self._initial_value = initial_value

    @property
    def order(self):
        """Gets the order of this Prompt.


        :return: The order of this Prompt.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Prompt.


        :param order: The order of this Prompt.
        :type order: int
        """
        if order is not None and order > 2147483647:
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")
        if order is not None and order < -2147483648:
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `-2147483648`")

        self._order = order

    @property
    def promptstage_set(self):
        """Gets the promptstage_set of this Prompt.


        :return: The promptstage_set of this Prompt.
        :rtype: List[Stage]
        """
        return self._promptstage_set

    @promptstage_set.setter
    def promptstage_set(self, promptstage_set):
        """Sets the promptstage_set of this Prompt.


        :param promptstage_set: The promptstage_set of this Prompt.
        :type promptstage_set: List[Stage]
        """

        self._promptstage_set = promptstage_set

    @property
    def sub_text(self):
        """Gets the sub_text of this Prompt.


        :return: The sub_text of this Prompt.
        :rtype: str
        """
        return self._sub_text

    @sub_text.setter
    def sub_text(self, sub_text):
        """Sets the sub_text of this Prompt.


        :param sub_text: The sub_text of this Prompt.
        :type sub_text: str
        """

        self._sub_text = sub_text

    @property
    def placeholder_expression(self):
        """Gets the placeholder_expression of this Prompt.


        :return: The placeholder_expression of this Prompt.
        :rtype: bool
        """
        return self._placeholder_expression

    @placeholder_expression.setter
    def placeholder_expression(self, placeholder_expression):
        """Sets the placeholder_expression of this Prompt.


        :param placeholder_expression: The placeholder_expression of this Prompt.
        :type placeholder_expression: bool
        """

        self._placeholder_expression = placeholder_expression

    @property
    def initial_value_expression(self):
        """Gets the initial_value_expression of this Prompt.


        :return: The initial_value_expression of this Prompt.
        :rtype: bool
        """
        return self._initial_value_expression

    @initial_value_expression.setter
    def initial_value_expression(self, initial_value_expression):
        """Sets the initial_value_expression of this Prompt.


        :param initial_value_expression: The initial_value_expression of this Prompt.
        :type initial_value_expression: bool
        """

        self._initial_value_expression = initial_value_expression
