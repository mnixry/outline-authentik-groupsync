# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PatchedPasswordExpiryPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, execution_logging: bool=None, days: int=None, deny_only: bool=None):
        """PatchedPasswordExpiryPolicyRequest - a model defined in OpenAPI

        :param name: The name of this PatchedPasswordExpiryPolicyRequest.
        :param execution_logging: The execution_logging of this PatchedPasswordExpiryPolicyRequest.
        :param days: The days of this PatchedPasswordExpiryPolicyRequest.
        :param deny_only: The deny_only of this PatchedPasswordExpiryPolicyRequest.
        """
        self.openapi_types = {
            'name': str,
            'execution_logging': bool,
            'days': int,
            'deny_only': bool
        }

        self.attribute_map = {
            'name': 'name',
            'execution_logging': 'execution_logging',
            'days': 'days',
            'deny_only': 'deny_only'
        }

        self._name = name
        self._execution_logging = execution_logging
        self._days = days
        self._deny_only = deny_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedPasswordExpiryPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedPasswordExpiryPolicyRequest of this PatchedPasswordExpiryPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedPasswordExpiryPolicyRequest.


        :return: The name of this PatchedPasswordExpiryPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedPasswordExpiryPolicyRequest.


        :param name: The name of this PatchedPasswordExpiryPolicyRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def execution_logging(self):
        """Gets the execution_logging of this PatchedPasswordExpiryPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :return: The execution_logging of this PatchedPasswordExpiryPolicyRequest.
        :rtype: bool
        """
        return self._execution_logging

    @execution_logging.setter
    def execution_logging(self, execution_logging):
        """Sets the execution_logging of this PatchedPasswordExpiryPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :param execution_logging: The execution_logging of this PatchedPasswordExpiryPolicyRequest.
        :type execution_logging: bool
        """

        self._execution_logging = execution_logging

    @property
    def days(self):
        """Gets the days of this PatchedPasswordExpiryPolicyRequest.


        :return: The days of this PatchedPasswordExpiryPolicyRequest.
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this PatchedPasswordExpiryPolicyRequest.


        :param days: The days of this PatchedPasswordExpiryPolicyRequest.
        :type days: int
        """
        if days is not None and days > 2147483647:
            raise ValueError("Invalid value for `days`, must be a value less than or equal to `2147483647`")
        if days is not None and days < -2147483648:
            raise ValueError("Invalid value for `days`, must be a value greater than or equal to `-2147483648`")

        self._days = days

    @property
    def deny_only(self):
        """Gets the deny_only of this PatchedPasswordExpiryPolicyRequest.


        :return: The deny_only of this PatchedPasswordExpiryPolicyRequest.
        :rtype: bool
        """
        return self._deny_only

    @deny_only.setter
    def deny_only(self, deny_only):
        """Sets the deny_only of this PatchedPasswordExpiryPolicyRequest.


        :param deny_only: The deny_only of this PatchedPasswordExpiryPolicyRequest.
        :type deny_only: bool
        """

        self._deny_only = deny_only
