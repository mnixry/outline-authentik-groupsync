# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class ReputationPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, execution_logging: bool=None, check_ip: bool=None, check_username: bool=None, threshold: int=None):
        """ReputationPolicyRequest - a model defined in OpenAPI

        :param name: The name of this ReputationPolicyRequest.
        :param execution_logging: The execution_logging of this ReputationPolicyRequest.
        :param check_ip: The check_ip of this ReputationPolicyRequest.
        :param check_username: The check_username of this ReputationPolicyRequest.
        :param threshold: The threshold of this ReputationPolicyRequest.
        """
        self.openapi_types = {
            'name': str,
            'execution_logging': bool,
            'check_ip': bool,
            'check_username': bool,
            'threshold': int
        }

        self.attribute_map = {
            'name': 'name',
            'execution_logging': 'execution_logging',
            'check_ip': 'check_ip',
            'check_username': 'check_username',
            'threshold': 'threshold'
        }

        self._name = name
        self._execution_logging = execution_logging
        self._check_ip = check_ip
        self._check_username = check_username
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReputationPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReputationPolicyRequest of this ReputationPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ReputationPolicyRequest.


        :return: The name of this ReputationPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReputationPolicyRequest.


        :param name: The name of this ReputationPolicyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def execution_logging(self):
        """Gets the execution_logging of this ReputationPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :return: The execution_logging of this ReputationPolicyRequest.
        :rtype: bool
        """
        return self._execution_logging

    @execution_logging.setter
    def execution_logging(self, execution_logging):
        """Sets the execution_logging of this ReputationPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :param execution_logging: The execution_logging of this ReputationPolicyRequest.
        :type execution_logging: bool
        """

        self._execution_logging = execution_logging

    @property
    def check_ip(self):
        """Gets the check_ip of this ReputationPolicyRequest.


        :return: The check_ip of this ReputationPolicyRequest.
        :rtype: bool
        """
        return self._check_ip

    @check_ip.setter
    def check_ip(self, check_ip):
        """Sets the check_ip of this ReputationPolicyRequest.


        :param check_ip: The check_ip of this ReputationPolicyRequest.
        :type check_ip: bool
        """

        self._check_ip = check_ip

    @property
    def check_username(self):
        """Gets the check_username of this ReputationPolicyRequest.


        :return: The check_username of this ReputationPolicyRequest.
        :rtype: bool
        """
        return self._check_username

    @check_username.setter
    def check_username(self, check_username):
        """Sets the check_username of this ReputationPolicyRequest.


        :param check_username: The check_username of this ReputationPolicyRequest.
        :type check_username: bool
        """

        self._check_username = check_username

    @property
    def threshold(self):
        """Gets the threshold of this ReputationPolicyRequest.


        :return: The threshold of this ReputationPolicyRequest.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ReputationPolicyRequest.


        :param threshold: The threshold of this ReputationPolicyRequest.
        :type threshold: int
        """
        if threshold is not None and threshold > 2147483647:
            raise ValueError("Invalid value for `threshold`, must be a value less than or equal to `2147483647`")
        if threshold is not None and threshold < -2147483648:
            raise ValueError("Invalid value for `threshold`, must be a value greater than or equal to `-2147483648`")

        self._threshold = threshold
