# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.event_actions import EventActions
from authentik_openapi import util


class EventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user: object=None, action: EventActions=None, app: str=None, context: object=None, client_ip: str=None, expires: datetime=None, brand: object=None):
        """EventRequest - a model defined in OpenAPI

        :param user: The user of this EventRequest.
        :param action: The action of this EventRequest.
        :param app: The app of this EventRequest.
        :param context: The context of this EventRequest.
        :param client_ip: The client_ip of this EventRequest.
        :param expires: The expires of this EventRequest.
        :param brand: The brand of this EventRequest.
        """
        self.openapi_types = {
            'user': object,
            'action': EventActions,
            'app': str,
            'context': object,
            'client_ip': str,
            'expires': datetime,
            'brand': object
        }

        self.attribute_map = {
            'user': 'user',
            'action': 'action',
            'app': 'app',
            'context': 'context',
            'client_ip': 'client_ip',
            'expires': 'expires',
            'brand': 'brand'
        }

        self._user = user
        self._action = action
        self._app = app
        self._context = context
        self._client_ip = client_ip
        self._expires = expires
        self._brand = brand

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventRequest of this EventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self):
        """Gets the user of this EventRequest.


        :return: The user of this EventRequest.
        :rtype: object
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EventRequest.


        :param user: The user of this EventRequest.
        :type user: object
        """

        self._user = user

    @property
    def action(self):
        """Gets the action of this EventRequest.


        :return: The action of this EventRequest.
        :rtype: EventActions
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EventRequest.


        :param action: The action of this EventRequest.
        :type action: EventActions
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def app(self):
        """Gets the app of this EventRequest.


        :return: The app of this EventRequest.
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this EventRequest.


        :param app: The app of this EventRequest.
        :type app: str
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")
        if app is not None and len(app) < 1:
            raise ValueError("Invalid value for `app`, length must be greater than or equal to `1`")

        self._app = app

    @property
    def context(self):
        """Gets the context of this EventRequest.


        :return: The context of this EventRequest.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this EventRequest.


        :param context: The context of this EventRequest.
        :type context: object
        """

        self._context = context

    @property
    def client_ip(self):
        """Gets the client_ip of this EventRequest.


        :return: The client_ip of this EventRequest.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this EventRequest.


        :param client_ip: The client_ip of this EventRequest.
        :type client_ip: str
        """
        if client_ip is not None and len(client_ip) < 1:
            raise ValueError("Invalid value for `client_ip`, length must be greater than or equal to `1`")

        self._client_ip = client_ip

    @property
    def expires(self):
        """Gets the expires of this EventRequest.


        :return: The expires of this EventRequest.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this EventRequest.


        :param expires: The expires of this EventRequest.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def brand(self):
        """Gets the brand of this EventRequest.


        :return: The brand of this EventRequest.
        :rtype: object
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this EventRequest.


        :param brand: The brand of this EventRequest.
        :type brand: object
        """

        self._brand = brand
