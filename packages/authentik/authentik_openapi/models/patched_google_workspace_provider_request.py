# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.outgoing_sync_delete_action import OutgoingSyncDeleteAction
from authentik_openapi import util


class PatchedGoogleWorkspaceProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, property_mappings: List[str]=None, property_mappings_group: List[str]=None, delegated_subject: str=None, credentials: object=None, scopes: str=None, exclude_users_service_account: bool=None, filter_group: str=None, user_delete_action: OutgoingSyncDeleteAction=None, group_delete_action: OutgoingSyncDeleteAction=None, default_group_email_domain: str=None):
        """PatchedGoogleWorkspaceProviderRequest - a model defined in OpenAPI

        :param name: The name of this PatchedGoogleWorkspaceProviderRequest.
        :param property_mappings: The property_mappings of this PatchedGoogleWorkspaceProviderRequest.
        :param property_mappings_group: The property_mappings_group of this PatchedGoogleWorkspaceProviderRequest.
        :param delegated_subject: The delegated_subject of this PatchedGoogleWorkspaceProviderRequest.
        :param credentials: The credentials of this PatchedGoogleWorkspaceProviderRequest.
        :param scopes: The scopes of this PatchedGoogleWorkspaceProviderRequest.
        :param exclude_users_service_account: The exclude_users_service_account of this PatchedGoogleWorkspaceProviderRequest.
        :param filter_group: The filter_group of this PatchedGoogleWorkspaceProviderRequest.
        :param user_delete_action: The user_delete_action of this PatchedGoogleWorkspaceProviderRequest.
        :param group_delete_action: The group_delete_action of this PatchedGoogleWorkspaceProviderRequest.
        :param default_group_email_domain: The default_group_email_domain of this PatchedGoogleWorkspaceProviderRequest.
        """
        self.openapi_types = {
            'name': str,
            'property_mappings': List[str],
            'property_mappings_group': List[str],
            'delegated_subject': str,
            'credentials': object,
            'scopes': str,
            'exclude_users_service_account': bool,
            'filter_group': str,
            'user_delete_action': OutgoingSyncDeleteAction,
            'group_delete_action': OutgoingSyncDeleteAction,
            'default_group_email_domain': str
        }

        self.attribute_map = {
            'name': 'name',
            'property_mappings': 'property_mappings',
            'property_mappings_group': 'property_mappings_group',
            'delegated_subject': 'delegated_subject',
            'credentials': 'credentials',
            'scopes': 'scopes',
            'exclude_users_service_account': 'exclude_users_service_account',
            'filter_group': 'filter_group',
            'user_delete_action': 'user_delete_action',
            'group_delete_action': 'group_delete_action',
            'default_group_email_domain': 'default_group_email_domain'
        }

        self._name = name
        self._property_mappings = property_mappings
        self._property_mappings_group = property_mappings_group
        self._delegated_subject = delegated_subject
        self._credentials = credentials
        self._scopes = scopes
        self._exclude_users_service_account = exclude_users_service_account
        self._filter_group = filter_group
        self._user_delete_action = user_delete_action
        self._group_delete_action = group_delete_action
        self._default_group_email_domain = default_group_email_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedGoogleWorkspaceProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedGoogleWorkspaceProviderRequest of this PatchedGoogleWorkspaceProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedGoogleWorkspaceProviderRequest.


        :return: The name of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedGoogleWorkspaceProviderRequest.


        :param name: The name of this PatchedGoogleWorkspaceProviderRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def property_mappings(self):
        """Gets the property_mappings of this PatchedGoogleWorkspaceProviderRequest.


        :return: The property_mappings of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this PatchedGoogleWorkspaceProviderRequest.


        :param property_mappings: The property_mappings of this PatchedGoogleWorkspaceProviderRequest.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def property_mappings_group(self):
        """Gets the property_mappings_group of this PatchedGoogleWorkspaceProviderRequest.

        Property mappings used for group creation/updating.

        :return: The property_mappings_group of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings_group

    @property_mappings_group.setter
    def property_mappings_group(self, property_mappings_group):
        """Sets the property_mappings_group of this PatchedGoogleWorkspaceProviderRequest.

        Property mappings used for group creation/updating.

        :param property_mappings_group: The property_mappings_group of this PatchedGoogleWorkspaceProviderRequest.
        :type property_mappings_group: List[str]
        """

        self._property_mappings_group = property_mappings_group

    @property
    def delegated_subject(self):
        """Gets the delegated_subject of this PatchedGoogleWorkspaceProviderRequest.


        :return: The delegated_subject of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: str
        """
        return self._delegated_subject

    @delegated_subject.setter
    def delegated_subject(self, delegated_subject):
        """Sets the delegated_subject of this PatchedGoogleWorkspaceProviderRequest.


        :param delegated_subject: The delegated_subject of this PatchedGoogleWorkspaceProviderRequest.
        :type delegated_subject: str
        """
        if delegated_subject is not None and len(delegated_subject) > 254:
            raise ValueError("Invalid value for `delegated_subject`, length must be less than or equal to `254`")
        if delegated_subject is not None and len(delegated_subject) < 1:
            raise ValueError("Invalid value for `delegated_subject`, length must be greater than or equal to `1`")

        self._delegated_subject = delegated_subject

    @property
    def credentials(self):
        """Gets the credentials of this PatchedGoogleWorkspaceProviderRequest.


        :return: The credentials of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this PatchedGoogleWorkspaceProviderRequest.


        :param credentials: The credentials of this PatchedGoogleWorkspaceProviderRequest.
        :type credentials: object
        """

        self._credentials = credentials

    @property
    def scopes(self):
        """Gets the scopes of this PatchedGoogleWorkspaceProviderRequest.


        :return: The scopes of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this PatchedGoogleWorkspaceProviderRequest.


        :param scopes: The scopes of this PatchedGoogleWorkspaceProviderRequest.
        :type scopes: str
        """
        if scopes is not None and len(scopes) < 1:
            raise ValueError("Invalid value for `scopes`, length must be greater than or equal to `1`")

        self._scopes = scopes

    @property
    def exclude_users_service_account(self):
        """Gets the exclude_users_service_account of this PatchedGoogleWorkspaceProviderRequest.


        :return: The exclude_users_service_account of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: bool
        """
        return self._exclude_users_service_account

    @exclude_users_service_account.setter
    def exclude_users_service_account(self, exclude_users_service_account):
        """Sets the exclude_users_service_account of this PatchedGoogleWorkspaceProviderRequest.


        :param exclude_users_service_account: The exclude_users_service_account of this PatchedGoogleWorkspaceProviderRequest.
        :type exclude_users_service_account: bool
        """

        self._exclude_users_service_account = exclude_users_service_account

    @property
    def filter_group(self):
        """Gets the filter_group of this PatchedGoogleWorkspaceProviderRequest.


        :return: The filter_group of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: str
        """
        return self._filter_group

    @filter_group.setter
    def filter_group(self, filter_group):
        """Sets the filter_group of this PatchedGoogleWorkspaceProviderRequest.


        :param filter_group: The filter_group of this PatchedGoogleWorkspaceProviderRequest.
        :type filter_group: str
        """

        self._filter_group = filter_group

    @property
    def user_delete_action(self):
        """Gets the user_delete_action of this PatchedGoogleWorkspaceProviderRequest.


        :return: The user_delete_action of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: OutgoingSyncDeleteAction
        """
        return self._user_delete_action

    @user_delete_action.setter
    def user_delete_action(self, user_delete_action):
        """Sets the user_delete_action of this PatchedGoogleWorkspaceProviderRequest.


        :param user_delete_action: The user_delete_action of this PatchedGoogleWorkspaceProviderRequest.
        :type user_delete_action: OutgoingSyncDeleteAction
        """

        self._user_delete_action = user_delete_action

    @property
    def group_delete_action(self):
        """Gets the group_delete_action of this PatchedGoogleWorkspaceProviderRequest.


        :return: The group_delete_action of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: OutgoingSyncDeleteAction
        """
        return self._group_delete_action

    @group_delete_action.setter
    def group_delete_action(self, group_delete_action):
        """Sets the group_delete_action of this PatchedGoogleWorkspaceProviderRequest.


        :param group_delete_action: The group_delete_action of this PatchedGoogleWorkspaceProviderRequest.
        :type group_delete_action: OutgoingSyncDeleteAction
        """

        self._group_delete_action = group_delete_action

    @property
    def default_group_email_domain(self):
        """Gets the default_group_email_domain of this PatchedGoogleWorkspaceProviderRequest.


        :return: The default_group_email_domain of this PatchedGoogleWorkspaceProviderRequest.
        :rtype: str
        """
        return self._default_group_email_domain

    @default_group_email_domain.setter
    def default_group_email_domain(self, default_group_email_domain):
        """Sets the default_group_email_domain of this PatchedGoogleWorkspaceProviderRequest.


        :param default_group_email_domain: The default_group_email_domain of this PatchedGoogleWorkspaceProviderRequest.
        :type default_group_email_domain: str
        """
        if default_group_email_domain is not None and len(default_group_email_domain) < 1:
            raise ValueError("Invalid value for `default_group_email_domain`, length must be greater than or equal to `1`")

        self._default_group_email_domain = default_group_email_domain
