# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.contextual_flow_info_layout_enum import ContextualFlowInfoLayoutEnum
from authentik_openapi import util


class ContextualFlowInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, background: str=None, cancel_url: str=None, layout: ContextualFlowInfoLayoutEnum=None):
        """ContextualFlowInfo - a model defined in OpenAPI

        :param title: The title of this ContextualFlowInfo.
        :param background: The background of this ContextualFlowInfo.
        :param cancel_url: The cancel_url of this ContextualFlowInfo.
        :param layout: The layout of this ContextualFlowInfo.
        """
        self.openapi_types = {
            'title': str,
            'background': str,
            'cancel_url': str,
            'layout': ContextualFlowInfoLayoutEnum
        }

        self.attribute_map = {
            'title': 'title',
            'background': 'background',
            'cancel_url': 'cancel_url',
            'layout': 'layout'
        }

        self._title = title
        self._background = background
        self._cancel_url = cancel_url
        self._layout = layout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContextualFlowInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContextualFlowInfo of this ContextualFlowInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this ContextualFlowInfo.


        :return: The title of this ContextualFlowInfo.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContextualFlowInfo.


        :param title: The title of this ContextualFlowInfo.
        :type title: str
        """

        self._title = title

    @property
    def background(self):
        """Gets the background of this ContextualFlowInfo.


        :return: The background of this ContextualFlowInfo.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this ContextualFlowInfo.


        :param background: The background of this ContextualFlowInfo.
        :type background: str
        """

        self._background = background

    @property
    def cancel_url(self):
        """Gets the cancel_url of this ContextualFlowInfo.


        :return: The cancel_url of this ContextualFlowInfo.
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this ContextualFlowInfo.


        :param cancel_url: The cancel_url of this ContextualFlowInfo.
        :type cancel_url: str
        """
        if cancel_url is None:
            raise ValueError("Invalid value for `cancel_url`, must not be `None`")

        self._cancel_url = cancel_url

    @property
    def layout(self):
        """Gets the layout of this ContextualFlowInfo.


        :return: The layout of this ContextualFlowInfo.
        :rtype: ContextualFlowInfoLayoutEnum
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this ContextualFlowInfo.


        :param layout: The layout of this ContextualFlowInfo.
        :type layout: ContextualFlowInfoLayoutEnum
        """
        if layout is None:
            raise ValueError("Invalid value for `layout`, must not be `None`")

        self._layout = layout
