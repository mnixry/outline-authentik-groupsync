# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi.models.geoip_binding_enum import GeoipBindingEnum
from authentik_openapi.models.network_binding_enum import NetworkBindingEnum
from authentik_openapi import util


class PatchedUserLoginStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, session_duration: str=None, terminate_other_sessions: bool=None, remember_me_offset: str=None, network_binding: NetworkBindingEnum=None, geoip_binding: GeoipBindingEnum=None):
        """PatchedUserLoginStageRequest - a model defined in OpenAPI

        :param name: The name of this PatchedUserLoginStageRequest.
        :param flow_set: The flow_set of this PatchedUserLoginStageRequest.
        :param session_duration: The session_duration of this PatchedUserLoginStageRequest.
        :param terminate_other_sessions: The terminate_other_sessions of this PatchedUserLoginStageRequest.
        :param remember_me_offset: The remember_me_offset of this PatchedUserLoginStageRequest.
        :param network_binding: The network_binding of this PatchedUserLoginStageRequest.
        :param geoip_binding: The geoip_binding of this PatchedUserLoginStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'session_duration': str,
            'terminate_other_sessions': bool,
            'remember_me_offset': str,
            'network_binding': NetworkBindingEnum,
            'geoip_binding': GeoipBindingEnum
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'session_duration': 'session_duration',
            'terminate_other_sessions': 'terminate_other_sessions',
            'remember_me_offset': 'remember_me_offset',
            'network_binding': 'network_binding',
            'geoip_binding': 'geoip_binding'
        }

        self._name = name
        self._flow_set = flow_set
        self._session_duration = session_duration
        self._terminate_other_sessions = terminate_other_sessions
        self._remember_me_offset = remember_me_offset
        self._network_binding = network_binding
        self._geoip_binding = geoip_binding

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedUserLoginStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedUserLoginStageRequest of this PatchedUserLoginStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedUserLoginStageRequest.


        :return: The name of this PatchedUserLoginStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedUserLoginStageRequest.


        :param name: The name of this PatchedUserLoginStageRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this PatchedUserLoginStageRequest.


        :return: The flow_set of this PatchedUserLoginStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this PatchedUserLoginStageRequest.


        :param flow_set: The flow_set of this PatchedUserLoginStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def session_duration(self):
        """Gets the session_duration of this PatchedUserLoginStageRequest.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :return: The session_duration of this PatchedUserLoginStageRequest.
        :rtype: str
        """
        return self._session_duration

    @session_duration.setter
    def session_duration(self, session_duration):
        """Sets the session_duration of this PatchedUserLoginStageRequest.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :param session_duration: The session_duration of this PatchedUserLoginStageRequest.
        :type session_duration: str
        """
        if session_duration is not None and len(session_duration) < 1:
            raise ValueError("Invalid value for `session_duration`, length must be greater than or equal to `1`")

        self._session_duration = session_duration

    @property
    def terminate_other_sessions(self):
        """Gets the terminate_other_sessions of this PatchedUserLoginStageRequest.

        Terminate all other sessions of the user logging in.

        :return: The terminate_other_sessions of this PatchedUserLoginStageRequest.
        :rtype: bool
        """
        return self._terminate_other_sessions

    @terminate_other_sessions.setter
    def terminate_other_sessions(self, terminate_other_sessions):
        """Sets the terminate_other_sessions of this PatchedUserLoginStageRequest.

        Terminate all other sessions of the user logging in.

        :param terminate_other_sessions: The terminate_other_sessions of this PatchedUserLoginStageRequest.
        :type terminate_other_sessions: bool
        """

        self._terminate_other_sessions = terminate_other_sessions

    @property
    def remember_me_offset(self):
        """Gets the remember_me_offset of this PatchedUserLoginStageRequest.

        Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)

        :return: The remember_me_offset of this PatchedUserLoginStageRequest.
        :rtype: str
        """
        return self._remember_me_offset

    @remember_me_offset.setter
    def remember_me_offset(self, remember_me_offset):
        """Sets the remember_me_offset of this PatchedUserLoginStageRequest.

        Offset the session will be extended by when the user picks the remember me option. Default of 0 means that the remember me option will not be shown. (Format: hours=-1;minutes=-2;seconds=-3)

        :param remember_me_offset: The remember_me_offset of this PatchedUserLoginStageRequest.
        :type remember_me_offset: str
        """
        if remember_me_offset is not None and len(remember_me_offset) < 1:
            raise ValueError("Invalid value for `remember_me_offset`, length must be greater than or equal to `1`")

        self._remember_me_offset = remember_me_offset

    @property
    def network_binding(self):
        """Gets the network_binding of this PatchedUserLoginStageRequest.

        Bind sessions created by this stage to the configured network

        :return: The network_binding of this PatchedUserLoginStageRequest.
        :rtype: NetworkBindingEnum
        """
        return self._network_binding

    @network_binding.setter
    def network_binding(self, network_binding):
        """Sets the network_binding of this PatchedUserLoginStageRequest.

        Bind sessions created by this stage to the configured network

        :param network_binding: The network_binding of this PatchedUserLoginStageRequest.
        :type network_binding: NetworkBindingEnum
        """

        self._network_binding = network_binding

    @property
    def geoip_binding(self):
        """Gets the geoip_binding of this PatchedUserLoginStageRequest.

        Bind sessions created by this stage to the configured GeoIP location

        :return: The geoip_binding of this PatchedUserLoginStageRequest.
        :rtype: GeoipBindingEnum
        """
        return self._geoip_binding

    @geoip_binding.setter
    def geoip_binding(self, geoip_binding):
        """Sets the geoip_binding of this PatchedUserLoginStageRequest.

        Bind sessions created by this stage to the configured GeoIP location

        :param geoip_binding: The geoip_binding of this PatchedUserLoginStageRequest.
        :type geoip_binding: GeoipBindingEnum
        """

        self._geoip_binding = geoip_binding
