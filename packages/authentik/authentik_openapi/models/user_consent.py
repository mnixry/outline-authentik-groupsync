# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.application import Application
from authentik_openapi.models.user import User
from authentik_openapi import util


class UserConsent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, expires: datetime=None, expiring: bool=None, user: User=None, application: Application=None, permissions: str=''):
        """UserConsent - a model defined in OpenAPI

        :param pk: The pk of this UserConsent.
        :param expires: The expires of this UserConsent.
        :param expiring: The expiring of this UserConsent.
        :param user: The user of this UserConsent.
        :param application: The application of this UserConsent.
        :param permissions: The permissions of this UserConsent.
        """
        self.openapi_types = {
            'pk': int,
            'expires': datetime,
            'expiring': bool,
            'user': User,
            'application': Application,
            'permissions': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'expires': 'expires',
            'expiring': 'expiring',
            'user': 'user',
            'application': 'application',
            'permissions': 'permissions'
        }

        self._pk = pk
        self._expires = expires
        self._expiring = expiring
        self._user = user
        self._application = application
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserConsent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserConsent of this UserConsent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this UserConsent.


        :return: The pk of this UserConsent.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this UserConsent.


        :param pk: The pk of this UserConsent.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def expires(self):
        """Gets the expires of this UserConsent.


        :return: The expires of this UserConsent.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this UserConsent.


        :param expires: The expires of this UserConsent.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def expiring(self):
        """Gets the expiring of this UserConsent.


        :return: The expiring of this UserConsent.
        :rtype: bool
        """
        return self._expiring

    @expiring.setter
    def expiring(self, expiring):
        """Sets the expiring of this UserConsent.


        :param expiring: The expiring of this UserConsent.
        :type expiring: bool
        """

        self._expiring = expiring

    @property
    def user(self):
        """Gets the user of this UserConsent.


        :return: The user of this UserConsent.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserConsent.


        :param user: The user of this UserConsent.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def application(self):
        """Gets the application of this UserConsent.


        :return: The application of this UserConsent.
        :rtype: Application
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this UserConsent.


        :param application: The application of this UserConsent.
        :type application: Application
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")

        self._application = application

    @property
    def permissions(self):
        """Gets the permissions of this UserConsent.


        :return: The permissions of this UserConsent.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserConsent.


        :param permissions: The permissions of this UserConsent.
        :type permissions: str
        """

        self._permissions = permissions
