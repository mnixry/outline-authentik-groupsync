# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class LDAPDebug(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user: List[Dict[str, object]]=None, group: List[Dict[str, object]]=None, membership: List[Dict[str, object]]=None):
        """LDAPDebug - a model defined in OpenAPI

        :param user: The user of this LDAPDebug.
        :param group: The group of this LDAPDebug.
        :param membership: The membership of this LDAPDebug.
        """
        self.openapi_types = {
            'user': List[Dict[str, object]],
            'group': List[Dict[str, object]],
            'membership': List[Dict[str, object]]
        }

        self.attribute_map = {
            'user': 'user',
            'group': 'group',
            'membership': 'membership'
        }

        self._user = user
        self._group = group
        self._membership = membership

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LDAPDebug':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LDAPDebug of this LDAPDebug.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self):
        """Gets the user of this LDAPDebug.


        :return: The user of this LDAPDebug.
        :rtype: List[Dict[str, object]]
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LDAPDebug.


        :param user: The user of this LDAPDebug.
        :type user: List[Dict[str, object]]
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def group(self):
        """Gets the group of this LDAPDebug.


        :return: The group of this LDAPDebug.
        :rtype: List[Dict[str, object]]
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this LDAPDebug.


        :param group: The group of this LDAPDebug.
        :type group: List[Dict[str, object]]
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def membership(self):
        """Gets the membership of this LDAPDebug.


        :return: The membership of this LDAPDebug.
        :rtype: List[Dict[str, object]]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this LDAPDebug.


        :param membership: The membership of this LDAPDebug.
        :type membership: List[Dict[str, object]]
        """
        if membership is None:
            raise ValueError("Invalid value for `membership`, must not be `None`")

        self._membership = membership
