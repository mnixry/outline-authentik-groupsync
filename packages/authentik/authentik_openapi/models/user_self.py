# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.user_self_groups import UserSelfGroups
from authentik_openapi.models.user_type_enum import UserTypeEnum
import re
from authentik_openapi import util


class UserSelf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, username: str=None, name: str=None, is_active: bool=None, is_superuser: bool=None, groups: List[UserSelfGroups]=None, email: str=None, avatar: str=None, uid: str=None, settings: Dict[str, object]=None, type: UserTypeEnum=None, system_permissions: List[str]=None):
        """UserSelf - a model defined in OpenAPI

        :param pk: The pk of this UserSelf.
        :param username: The username of this UserSelf.
        :param name: The name of this UserSelf.
        :param is_active: The is_active of this UserSelf.
        :param is_superuser: The is_superuser of this UserSelf.
        :param groups: The groups of this UserSelf.
        :param email: The email of this UserSelf.
        :param avatar: The avatar of this UserSelf.
        :param uid: The uid of this UserSelf.
        :param settings: The settings of this UserSelf.
        :param type: The type of this UserSelf.
        :param system_permissions: The system_permissions of this UserSelf.
        """
        self.openapi_types = {
            'pk': int,
            'username': str,
            'name': str,
            'is_active': bool,
            'is_superuser': bool,
            'groups': List[UserSelfGroups],
            'email': str,
            'avatar': str,
            'uid': str,
            'settings': Dict[str, object],
            'type': UserTypeEnum,
            'system_permissions': List[str]
        }

        self.attribute_map = {
            'pk': 'pk',
            'username': 'username',
            'name': 'name',
            'is_active': 'is_active',
            'is_superuser': 'is_superuser',
            'groups': 'groups',
            'email': 'email',
            'avatar': 'avatar',
            'uid': 'uid',
            'settings': 'settings',
            'type': 'type',
            'system_permissions': 'system_permissions'
        }

        self._pk = pk
        self._username = username
        self._name = name
        self._is_active = is_active
        self._is_superuser = is_superuser
        self._groups = groups
        self._email = email
        self._avatar = avatar
        self._uid = uid
        self._settings = settings
        self._type = type
        self._system_permissions = system_permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserSelf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserSelf of this UserSelf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this UserSelf.


        :return: The pk of this UserSelf.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this UserSelf.


        :param pk: The pk of this UserSelf.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def username(self):
        """Gets the username of this UserSelf.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.

        :return: The username of this UserSelf.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserSelf.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.

        :param username: The username of this UserSelf.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 150:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `150`")
        if username is not None and not re.search(r'^[\w.@+-]+$', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[\w.@+-]+$/`")

        self._username = username

    @property
    def name(self):
        """Gets the name of this UserSelf.

        User's display name.

        :return: The name of this UserSelf.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserSelf.

        User's display name.

        :param name: The name of this UserSelf.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def is_active(self):
        """Gets the is_active of this UserSelf.

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.

        :return: The is_active of this UserSelf.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserSelf.

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.

        :param is_active: The is_active of this UserSelf.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_superuser(self):
        """Gets the is_superuser of this UserSelf.


        :return: The is_superuser of this UserSelf.
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this UserSelf.


        :param is_superuser: The is_superuser of this UserSelf.
        :type is_superuser: bool
        """
        if is_superuser is None:
            raise ValueError("Invalid value for `is_superuser`, must not be `None`")

        self._is_superuser = is_superuser

    @property
    def groups(self):
        """Gets the groups of this UserSelf.


        :return: The groups of this UserSelf.
        :rtype: List[UserSelfGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserSelf.


        :param groups: The groups of this UserSelf.
        :type groups: List[UserSelfGroups]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def email(self):
        """Gets the email of this UserSelf.


        :return: The email of this UserSelf.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSelf.


        :param email: The email of this UserSelf.
        :type email: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")

        self._email = email

    @property
    def avatar(self):
        """Gets the avatar of this UserSelf.

        User's avatar, either a http/https URL or a data URI

        :return: The avatar of this UserSelf.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this UserSelf.

        User's avatar, either a http/https URL or a data URI

        :param avatar: The avatar of this UserSelf.
        :type avatar: str
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")

        self._avatar = avatar

    @property
    def uid(self):
        """Gets the uid of this UserSelf.


        :return: The uid of this UserSelf.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UserSelf.


        :param uid: The uid of this UserSelf.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def settings(self):
        """Gets the settings of this UserSelf.

        Get user settings with brand and group settings applied

        :return: The settings of this UserSelf.
        :rtype: Dict[str, object]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UserSelf.

        Get user settings with brand and group settings applied

        :param settings: The settings of this UserSelf.
        :type settings: Dict[str, object]
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def type(self):
        """Gets the type of this UserSelf.


        :return: The type of this UserSelf.
        :rtype: UserTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserSelf.


        :param type: The type of this UserSelf.
        :type type: UserTypeEnum
        """

        self._type = type

    @property
    def system_permissions(self):
        """Gets the system_permissions of this UserSelf.

        Get all system permissions assigned to the user

        :return: The system_permissions of this UserSelf.
        :rtype: List[str]
        """
        return self._system_permissions

    @system_permissions.setter
    def system_permissions(self, system_permissions):
        """Sets the system_permissions of this UserSelf.

        Get all system permissions assigned to the user

        :param system_permissions: The system_permissions of this UserSelf.
        :type system_permissions: List[str]
        """
        if system_permissions is None:
            raise ValueError("Invalid value for `system_permissions`, must not be `None`")

        self._system_permissions = system_permissions
