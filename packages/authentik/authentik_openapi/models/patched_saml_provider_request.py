# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.digest_algorithm_enum import DigestAlgorithmEnum
from authentik_openapi.models.signature_algorithm_enum import SignatureAlgorithmEnum
from authentik_openapi.models.sp_binding_enum import SpBindingEnum
from authentik_openapi import util


class PatchedSAMLProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, authentication_flow: str=None, authorization_flow: str=None, property_mappings: List[str]=None, acs_url: str=None, audience: str=None, issuer: str=None, assertion_valid_not_before: str=None, assertion_valid_not_on_or_after: str=None, session_valid_not_on_or_after: str=None, name_id_mapping: str=None, digest_algorithm: DigestAlgorithmEnum=None, signature_algorithm: SignatureAlgorithmEnum=None, signing_kp: str=None, verification_kp: str=None, encryption_kp: str=None, sign_assertion: bool=None, sign_response: bool=None, sp_binding: SpBindingEnum=None, default_relay_state: str=None):
        """PatchedSAMLProviderRequest - a model defined in OpenAPI

        :param name: The name of this PatchedSAMLProviderRequest.
        :param authentication_flow: The authentication_flow of this PatchedSAMLProviderRequest.
        :param authorization_flow: The authorization_flow of this PatchedSAMLProviderRequest.
        :param property_mappings: The property_mappings of this PatchedSAMLProviderRequest.
        :param acs_url: The acs_url of this PatchedSAMLProviderRequest.
        :param audience: The audience of this PatchedSAMLProviderRequest.
        :param issuer: The issuer of this PatchedSAMLProviderRequest.
        :param assertion_valid_not_before: The assertion_valid_not_before of this PatchedSAMLProviderRequest.
        :param assertion_valid_not_on_or_after: The assertion_valid_not_on_or_after of this PatchedSAMLProviderRequest.
        :param session_valid_not_on_or_after: The session_valid_not_on_or_after of this PatchedSAMLProviderRequest.
        :param name_id_mapping: The name_id_mapping of this PatchedSAMLProviderRequest.
        :param digest_algorithm: The digest_algorithm of this PatchedSAMLProviderRequest.
        :param signature_algorithm: The signature_algorithm of this PatchedSAMLProviderRequest.
        :param signing_kp: The signing_kp of this PatchedSAMLProviderRequest.
        :param verification_kp: The verification_kp of this PatchedSAMLProviderRequest.
        :param encryption_kp: The encryption_kp of this PatchedSAMLProviderRequest.
        :param sign_assertion: The sign_assertion of this PatchedSAMLProviderRequest.
        :param sign_response: The sign_response of this PatchedSAMLProviderRequest.
        :param sp_binding: The sp_binding of this PatchedSAMLProviderRequest.
        :param default_relay_state: The default_relay_state of this PatchedSAMLProviderRequest.
        """
        self.openapi_types = {
            'name': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'property_mappings': List[str],
            'acs_url': str,
            'audience': str,
            'issuer': str,
            'assertion_valid_not_before': str,
            'assertion_valid_not_on_or_after': str,
            'session_valid_not_on_or_after': str,
            'name_id_mapping': str,
            'digest_algorithm': DigestAlgorithmEnum,
            'signature_algorithm': SignatureAlgorithmEnum,
            'signing_kp': str,
            'verification_kp': str,
            'encryption_kp': str,
            'sign_assertion': bool,
            'sign_response': bool,
            'sp_binding': SpBindingEnum,
            'default_relay_state': str
        }

        self.attribute_map = {
            'name': 'name',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'property_mappings': 'property_mappings',
            'acs_url': 'acs_url',
            'audience': 'audience',
            'issuer': 'issuer',
            'assertion_valid_not_before': 'assertion_valid_not_before',
            'assertion_valid_not_on_or_after': 'assertion_valid_not_on_or_after',
            'session_valid_not_on_or_after': 'session_valid_not_on_or_after',
            'name_id_mapping': 'name_id_mapping',
            'digest_algorithm': 'digest_algorithm',
            'signature_algorithm': 'signature_algorithm',
            'signing_kp': 'signing_kp',
            'verification_kp': 'verification_kp',
            'encryption_kp': 'encryption_kp',
            'sign_assertion': 'sign_assertion',
            'sign_response': 'sign_response',
            'sp_binding': 'sp_binding',
            'default_relay_state': 'default_relay_state'
        }

        self._name = name
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._property_mappings = property_mappings
        self._acs_url = acs_url
        self._audience = audience
        self._issuer = issuer
        self._assertion_valid_not_before = assertion_valid_not_before
        self._assertion_valid_not_on_or_after = assertion_valid_not_on_or_after
        self._session_valid_not_on_or_after = session_valid_not_on_or_after
        self._name_id_mapping = name_id_mapping
        self._digest_algorithm = digest_algorithm
        self._signature_algorithm = signature_algorithm
        self._signing_kp = signing_kp
        self._verification_kp = verification_kp
        self._encryption_kp = encryption_kp
        self._sign_assertion = sign_assertion
        self._sign_response = sign_response
        self._sp_binding = sp_binding
        self._default_relay_state = default_relay_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedSAMLProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedSAMLProviderRequest of this PatchedSAMLProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedSAMLProviderRequest.


        :return: The name of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedSAMLProviderRequest.


        :param name: The name of this PatchedSAMLProviderRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this PatchedSAMLProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this PatchedSAMLProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this PatchedSAMLProviderRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this PatchedSAMLProviderRequest.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this PatchedSAMLProviderRequest.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this PatchedSAMLProviderRequest.
        :type authorization_flow: str
        """

        self._authorization_flow = authorization_flow

    @property
    def property_mappings(self):
        """Gets the property_mappings of this PatchedSAMLProviderRequest.


        :return: The property_mappings of this PatchedSAMLProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this PatchedSAMLProviderRequest.


        :param property_mappings: The property_mappings of this PatchedSAMLProviderRequest.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def acs_url(self):
        """Gets the acs_url of this PatchedSAMLProviderRequest.


        :return: The acs_url of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._acs_url

    @acs_url.setter
    def acs_url(self, acs_url):
        """Sets the acs_url of this PatchedSAMLProviderRequest.


        :param acs_url: The acs_url of this PatchedSAMLProviderRequest.
        :type acs_url: str
        """
        if acs_url is not None and len(acs_url) > 200:
            raise ValueError("Invalid value for `acs_url`, length must be less than or equal to `200`")
        if acs_url is not None and len(acs_url) < 1:
            raise ValueError("Invalid value for `acs_url`, length must be greater than or equal to `1`")

        self._acs_url = acs_url

    @property
    def audience(self):
        """Gets the audience of this PatchedSAMLProviderRequest.

        Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.

        :return: The audience of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this PatchedSAMLProviderRequest.

        Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.

        :param audience: The audience of this PatchedSAMLProviderRequest.
        :type audience: str
        """

        self._audience = audience

    @property
    def issuer(self):
        """Gets the issuer of this PatchedSAMLProviderRequest.

        Also known as EntityID

        :return: The issuer of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this PatchedSAMLProviderRequest.

        Also known as EntityID

        :param issuer: The issuer of this PatchedSAMLProviderRequest.
        :type issuer: str
        """
        if issuer is not None and len(issuer) < 1:
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")

        self._issuer = issuer

    @property
    def assertion_valid_not_before(self):
        """Gets the assertion_valid_not_before of this PatchedSAMLProviderRequest.

        Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).

        :return: The assertion_valid_not_before of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._assertion_valid_not_before

    @assertion_valid_not_before.setter
    def assertion_valid_not_before(self, assertion_valid_not_before):
        """Sets the assertion_valid_not_before of this PatchedSAMLProviderRequest.

        Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).

        :param assertion_valid_not_before: The assertion_valid_not_before of this PatchedSAMLProviderRequest.
        :type assertion_valid_not_before: str
        """
        if assertion_valid_not_before is not None and len(assertion_valid_not_before) < 1:
            raise ValueError("Invalid value for `assertion_valid_not_before`, length must be greater than or equal to `1`")

        self._assertion_valid_not_before = assertion_valid_not_before

    @property
    def assertion_valid_not_on_or_after(self):
        """Gets the assertion_valid_not_on_or_after of this PatchedSAMLProviderRequest.

        Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The assertion_valid_not_on_or_after of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._assertion_valid_not_on_or_after

    @assertion_valid_not_on_or_after.setter
    def assertion_valid_not_on_or_after(self, assertion_valid_not_on_or_after):
        """Sets the assertion_valid_not_on_or_after of this PatchedSAMLProviderRequest.

        Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param assertion_valid_not_on_or_after: The assertion_valid_not_on_or_after of this PatchedSAMLProviderRequest.
        :type assertion_valid_not_on_or_after: str
        """
        if assertion_valid_not_on_or_after is not None and len(assertion_valid_not_on_or_after) < 1:
            raise ValueError("Invalid value for `assertion_valid_not_on_or_after`, length must be greater than or equal to `1`")

        self._assertion_valid_not_on_or_after = assertion_valid_not_on_or_after

    @property
    def session_valid_not_on_or_after(self):
        """Gets the session_valid_not_on_or_after of this PatchedSAMLProviderRequest.

        Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The session_valid_not_on_or_after of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._session_valid_not_on_or_after

    @session_valid_not_on_or_after.setter
    def session_valid_not_on_or_after(self, session_valid_not_on_or_after):
        """Sets the session_valid_not_on_or_after of this PatchedSAMLProviderRequest.

        Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param session_valid_not_on_or_after: The session_valid_not_on_or_after of this PatchedSAMLProviderRequest.
        :type session_valid_not_on_or_after: str
        """
        if session_valid_not_on_or_after is not None and len(session_valid_not_on_or_after) < 1:
            raise ValueError("Invalid value for `session_valid_not_on_or_after`, length must be greater than or equal to `1`")

        self._session_valid_not_on_or_after = session_valid_not_on_or_after

    @property
    def name_id_mapping(self):
        """Gets the name_id_mapping of this PatchedSAMLProviderRequest.

        Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered

        :return: The name_id_mapping of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._name_id_mapping

    @name_id_mapping.setter
    def name_id_mapping(self, name_id_mapping):
        """Sets the name_id_mapping of this PatchedSAMLProviderRequest.

        Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered

        :param name_id_mapping: The name_id_mapping of this PatchedSAMLProviderRequest.
        :type name_id_mapping: str
        """

        self._name_id_mapping = name_id_mapping

    @property
    def digest_algorithm(self):
        """Gets the digest_algorithm of this PatchedSAMLProviderRequest.


        :return: The digest_algorithm of this PatchedSAMLProviderRequest.
        :rtype: DigestAlgorithmEnum
        """
        return self._digest_algorithm

    @digest_algorithm.setter
    def digest_algorithm(self, digest_algorithm):
        """Sets the digest_algorithm of this PatchedSAMLProviderRequest.


        :param digest_algorithm: The digest_algorithm of this PatchedSAMLProviderRequest.
        :type digest_algorithm: DigestAlgorithmEnum
        """

        self._digest_algorithm = digest_algorithm

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this PatchedSAMLProviderRequest.


        :return: The signature_algorithm of this PatchedSAMLProviderRequest.
        :rtype: SignatureAlgorithmEnum
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this PatchedSAMLProviderRequest.


        :param signature_algorithm: The signature_algorithm of this PatchedSAMLProviderRequest.
        :type signature_algorithm: SignatureAlgorithmEnum
        """

        self._signature_algorithm = signature_algorithm

    @property
    def signing_kp(self):
        """Gets the signing_kp of this PatchedSAMLProviderRequest.

        Keypair used to sign outgoing Responses going to the Service Provider.

        :return: The signing_kp of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._signing_kp

    @signing_kp.setter
    def signing_kp(self, signing_kp):
        """Sets the signing_kp of this PatchedSAMLProviderRequest.

        Keypair used to sign outgoing Responses going to the Service Provider.

        :param signing_kp: The signing_kp of this PatchedSAMLProviderRequest.
        :type signing_kp: str
        """

        self._signing_kp = signing_kp

    @property
    def verification_kp(self):
        """Gets the verification_kp of this PatchedSAMLProviderRequest.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :return: The verification_kp of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._verification_kp

    @verification_kp.setter
    def verification_kp(self, verification_kp):
        """Sets the verification_kp of this PatchedSAMLProviderRequest.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :param verification_kp: The verification_kp of this PatchedSAMLProviderRequest.
        :type verification_kp: str
        """

        self._verification_kp = verification_kp

    @property
    def encryption_kp(self):
        """Gets the encryption_kp of this PatchedSAMLProviderRequest.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :return: The encryption_kp of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._encryption_kp

    @encryption_kp.setter
    def encryption_kp(self, encryption_kp):
        """Sets the encryption_kp of this PatchedSAMLProviderRequest.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :param encryption_kp: The encryption_kp of this PatchedSAMLProviderRequest.
        :type encryption_kp: str
        """

        self._encryption_kp = encryption_kp

    @property
    def sign_assertion(self):
        """Gets the sign_assertion of this PatchedSAMLProviderRequest.


        :return: The sign_assertion of this PatchedSAMLProviderRequest.
        :rtype: bool
        """
        return self._sign_assertion

    @sign_assertion.setter
    def sign_assertion(self, sign_assertion):
        """Sets the sign_assertion of this PatchedSAMLProviderRequest.


        :param sign_assertion: The sign_assertion of this PatchedSAMLProviderRequest.
        :type sign_assertion: bool
        """

        self._sign_assertion = sign_assertion

    @property
    def sign_response(self):
        """Gets the sign_response of this PatchedSAMLProviderRequest.


        :return: The sign_response of this PatchedSAMLProviderRequest.
        :rtype: bool
        """
        return self._sign_response

    @sign_response.setter
    def sign_response(self, sign_response):
        """Sets the sign_response of this PatchedSAMLProviderRequest.


        :param sign_response: The sign_response of this PatchedSAMLProviderRequest.
        :type sign_response: bool
        """

        self._sign_response = sign_response

    @property
    def sp_binding(self):
        """Gets the sp_binding of this PatchedSAMLProviderRequest.

        This determines how authentik sends the response back to the Service Provider.

        :return: The sp_binding of this PatchedSAMLProviderRequest.
        :rtype: SpBindingEnum
        """
        return self._sp_binding

    @sp_binding.setter
    def sp_binding(self, sp_binding):
        """Sets the sp_binding of this PatchedSAMLProviderRequest.

        This determines how authentik sends the response back to the Service Provider.

        :param sp_binding: The sp_binding of this PatchedSAMLProviderRequest.
        :type sp_binding: SpBindingEnum
        """

        self._sp_binding = sp_binding

    @property
    def default_relay_state(self):
        """Gets the default_relay_state of this PatchedSAMLProviderRequest.

        Default relay_state value for IDP-initiated logins

        :return: The default_relay_state of this PatchedSAMLProviderRequest.
        :rtype: str
        """
        return self._default_relay_state

    @default_relay_state.setter
    def default_relay_state(self, default_relay_state):
        """Sets the default_relay_state of this PatchedSAMLProviderRequest.

        Default relay_state value for IDP-initiated logins

        :param default_relay_state: The default_relay_state of this PatchedSAMLProviderRequest.
        :type default_relay_state: str
        """

        self._default_relay_state = default_relay_state
