# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PatchedRACPropertyMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed: str=None, name: str=None, expression: str=None, static_settings: Dict[str, object]=None):
        """PatchedRACPropertyMappingRequest - a model defined in OpenAPI

        :param managed: The managed of this PatchedRACPropertyMappingRequest.
        :param name: The name of this PatchedRACPropertyMappingRequest.
        :param expression: The expression of this PatchedRACPropertyMappingRequest.
        :param static_settings: The static_settings of this PatchedRACPropertyMappingRequest.
        """
        self.openapi_types = {
            'managed': str,
            'name': str,
            'expression': str,
            'static_settings': Dict[str, object]
        }

        self.attribute_map = {
            'managed': 'managed',
            'name': 'name',
            'expression': 'expression',
            'static_settings': 'static_settings'
        }

        self._managed = managed
        self._name = name
        self._expression = expression
        self._static_settings = static_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedRACPropertyMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedRACPropertyMappingRequest of this PatchedRACPropertyMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed(self):
        """Gets the managed of this PatchedRACPropertyMappingRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this PatchedRACPropertyMappingRequest.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this PatchedRACPropertyMappingRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this PatchedRACPropertyMappingRequest.
        :type managed: str
        """
        if managed is not None and len(managed) < 1:
            raise ValueError("Invalid value for `managed`, length must be greater than or equal to `1`")

        self._managed = managed

    @property
    def name(self):
        """Gets the name of this PatchedRACPropertyMappingRequest.


        :return: The name of this PatchedRACPropertyMappingRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedRACPropertyMappingRequest.


        :param name: The name of this PatchedRACPropertyMappingRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def expression(self):
        """Gets the expression of this PatchedRACPropertyMappingRequest.


        :return: The expression of this PatchedRACPropertyMappingRequest.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this PatchedRACPropertyMappingRequest.


        :param expression: The expression of this PatchedRACPropertyMappingRequest.
        :type expression: str
        """

        self._expression = expression

    @property
    def static_settings(self):
        """Gets the static_settings of this PatchedRACPropertyMappingRequest.


        :return: The static_settings of this PatchedRACPropertyMappingRequest.
        :rtype: Dict[str, object]
        """
        return self._static_settings

    @static_settings.setter
    def static_settings(self, static_settings):
        """Sets the static_settings of this PatchedRACPropertyMappingRequest.


        :param static_settings: The static_settings of this PatchedRACPropertyMappingRequest.
        :type static_settings: Dict[str, object]
        """

        self._static_settings = static_settings
