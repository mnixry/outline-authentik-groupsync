# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.backends_enum import BackendsEnum
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class PasswordStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, backends: List[BackendsEnum]=None, configure_flow: str=None, failed_attempts_before_cancel: int=None, allow_show_password: bool=None):
        """PasswordStageRequest - a model defined in OpenAPI

        :param name: The name of this PasswordStageRequest.
        :param flow_set: The flow_set of this PasswordStageRequest.
        :param backends: The backends of this PasswordStageRequest.
        :param configure_flow: The configure_flow of this PasswordStageRequest.
        :param failed_attempts_before_cancel: The failed_attempts_before_cancel of this PasswordStageRequest.
        :param allow_show_password: The allow_show_password of this PasswordStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'backends': List[BackendsEnum],
            'configure_flow': str,
            'failed_attempts_before_cancel': int,
            'allow_show_password': bool
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'backends': 'backends',
            'configure_flow': 'configure_flow',
            'failed_attempts_before_cancel': 'failed_attempts_before_cancel',
            'allow_show_password': 'allow_show_password'
        }

        self._name = name
        self._flow_set = flow_set
        self._backends = backends
        self._configure_flow = configure_flow
        self._failed_attempts_before_cancel = failed_attempts_before_cancel
        self._allow_show_password = allow_show_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordStageRequest of this PasswordStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PasswordStageRequest.


        :return: The name of this PasswordStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PasswordStageRequest.


        :param name: The name of this PasswordStageRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this PasswordStageRequest.


        :return: The flow_set of this PasswordStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this PasswordStageRequest.


        :param flow_set: The flow_set of this PasswordStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def backends(self):
        """Gets the backends of this PasswordStageRequest.

        Selection of backends to test the password against.

        :return: The backends of this PasswordStageRequest.
        :rtype: List[BackendsEnum]
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this PasswordStageRequest.

        Selection of backends to test the password against.

        :param backends: The backends of this PasswordStageRequest.
        :type backends: List[BackendsEnum]
        """
        if backends is None:
            raise ValueError("Invalid value for `backends`, must not be `None`")

        self._backends = backends

    @property
    def configure_flow(self):
        """Gets the configure_flow of this PasswordStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :return: The configure_flow of this PasswordStageRequest.
        :rtype: str
        """
        return self._configure_flow

    @configure_flow.setter
    def configure_flow(self, configure_flow):
        """Sets the configure_flow of this PasswordStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :param configure_flow: The configure_flow of this PasswordStageRequest.
        :type configure_flow: str
        """

        self._configure_flow = configure_flow

    @property
    def failed_attempts_before_cancel(self):
        """Gets the failed_attempts_before_cancel of this PasswordStageRequest.

        How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage.

        :return: The failed_attempts_before_cancel of this PasswordStageRequest.
        :rtype: int
        """
        return self._failed_attempts_before_cancel

    @failed_attempts_before_cancel.setter
    def failed_attempts_before_cancel(self, failed_attempts_before_cancel):
        """Sets the failed_attempts_before_cancel of this PasswordStageRequest.

        How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage.

        :param failed_attempts_before_cancel: The failed_attempts_before_cancel of this PasswordStageRequest.
        :type failed_attempts_before_cancel: int
        """
        if failed_attempts_before_cancel is not None and failed_attempts_before_cancel > 2147483647:
            raise ValueError("Invalid value for `failed_attempts_before_cancel`, must be a value less than or equal to `2147483647`")
        if failed_attempts_before_cancel is not None and failed_attempts_before_cancel < -2147483648:
            raise ValueError("Invalid value for `failed_attempts_before_cancel`, must be a value greater than or equal to `-2147483648`")

        self._failed_attempts_before_cancel = failed_attempts_before_cancel

    @property
    def allow_show_password(self):
        """Gets the allow_show_password of this PasswordStageRequest.

        When enabled, provides a 'show password' button with the password input field.

        :return: The allow_show_password of this PasswordStageRequest.
        :rtype: bool
        """
        return self._allow_show_password

    @allow_show_password.setter
    def allow_show_password(self, allow_show_password):
        """Sets the allow_show_password of this PasswordStageRequest.

        When enabled, provides a 'show password' button with the password input field.

        :param allow_show_password: The allow_show_password of this PasswordStageRequest.
        :type allow_show_password: bool
        """

        self._allow_show_password = allow_show_password
