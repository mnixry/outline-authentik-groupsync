# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.alg_enum import AlgEnum
from authentik_openapi import util


class CertificateGenerationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_name: str=None, subject_alt_name: str=None, validity_days: int=None, alg: AlgEnum=None):
        """CertificateGenerationRequest - a model defined in OpenAPI

        :param common_name: The common_name of this CertificateGenerationRequest.
        :param subject_alt_name: The subject_alt_name of this CertificateGenerationRequest.
        :param validity_days: The validity_days of this CertificateGenerationRequest.
        :param alg: The alg of this CertificateGenerationRequest.
        """
        self.openapi_types = {
            'common_name': str,
            'subject_alt_name': str,
            'validity_days': int,
            'alg': AlgEnum
        }

        self.attribute_map = {
            'common_name': 'common_name',
            'subject_alt_name': 'subject_alt_name',
            'validity_days': 'validity_days',
            'alg': 'alg'
        }

        self._common_name = common_name
        self._subject_alt_name = subject_alt_name
        self._validity_days = validity_days
        self._alg = alg

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateGenerationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateGenerationRequest of this CertificateGenerationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_name(self):
        """Gets the common_name of this CertificateGenerationRequest.


        :return: The common_name of this CertificateGenerationRequest.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this CertificateGenerationRequest.


        :param common_name: The common_name of this CertificateGenerationRequest.
        :type common_name: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")
        if common_name is not None and len(common_name) < 1:
            raise ValueError("Invalid value for `common_name`, length must be greater than or equal to `1`")

        self._common_name = common_name

    @property
    def subject_alt_name(self):
        """Gets the subject_alt_name of this CertificateGenerationRequest.


        :return: The subject_alt_name of this CertificateGenerationRequest.
        :rtype: str
        """
        return self._subject_alt_name

    @subject_alt_name.setter
    def subject_alt_name(self, subject_alt_name):
        """Sets the subject_alt_name of this CertificateGenerationRequest.


        :param subject_alt_name: The subject_alt_name of this CertificateGenerationRequest.
        :type subject_alt_name: str
        """

        self._subject_alt_name = subject_alt_name

    @property
    def validity_days(self):
        """Gets the validity_days of this CertificateGenerationRequest.


        :return: The validity_days of this CertificateGenerationRequest.
        :rtype: int
        """
        return self._validity_days

    @validity_days.setter
    def validity_days(self, validity_days):
        """Sets the validity_days of this CertificateGenerationRequest.


        :param validity_days: The validity_days of this CertificateGenerationRequest.
        :type validity_days: int
        """
        if validity_days is None:
            raise ValueError("Invalid value for `validity_days`, must not be `None`")

        self._validity_days = validity_days

    @property
    def alg(self):
        """Gets the alg of this CertificateGenerationRequest.


        :return: The alg of this CertificateGenerationRequest.
        :rtype: AlgEnum
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this CertificateGenerationRequest.


        :param alg: The alg of this CertificateGenerationRequest.
        :type alg: AlgEnum
        """

        self._alg = alg
