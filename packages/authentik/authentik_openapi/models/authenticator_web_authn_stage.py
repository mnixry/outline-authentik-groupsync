# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.authenticator_attachment_enum import AuthenticatorAttachmentEnum
from authentik_openapi.models.flow_set import FlowSet
from authentik_openapi.models.resident_key_requirement_enum import ResidentKeyRequirementEnum
from authentik_openapi.models.user_verification_enum import UserVerificationEnum
from authentik_openapi.models.web_authn_device_type import WebAuthnDeviceType
from authentik_openapi import util


class AuthenticatorWebAuthnStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, flow_set: List[FlowSet]=None, configure_flow: str=None, friendly_name: str=None, user_verification: UserVerificationEnum=None, authenticator_attachment: AuthenticatorAttachmentEnum=None, resident_key_requirement: ResidentKeyRequirementEnum=None, device_type_restrictions: List[str]=None, device_type_restrictions_obj: List[WebAuthnDeviceType]=None):
        """AuthenticatorWebAuthnStage - a model defined in OpenAPI

        :param pk: The pk of this AuthenticatorWebAuthnStage.
        :param name: The name of this AuthenticatorWebAuthnStage.
        :param component: The component of this AuthenticatorWebAuthnStage.
        :param verbose_name: The verbose_name of this AuthenticatorWebAuthnStage.
        :param verbose_name_plural: The verbose_name_plural of this AuthenticatorWebAuthnStage.
        :param meta_model_name: The meta_model_name of this AuthenticatorWebAuthnStage.
        :param flow_set: The flow_set of this AuthenticatorWebAuthnStage.
        :param configure_flow: The configure_flow of this AuthenticatorWebAuthnStage.
        :param friendly_name: The friendly_name of this AuthenticatorWebAuthnStage.
        :param user_verification: The user_verification of this AuthenticatorWebAuthnStage.
        :param authenticator_attachment: The authenticator_attachment of this AuthenticatorWebAuthnStage.
        :param resident_key_requirement: The resident_key_requirement of this AuthenticatorWebAuthnStage.
        :param device_type_restrictions: The device_type_restrictions of this AuthenticatorWebAuthnStage.
        :param device_type_restrictions_obj: The device_type_restrictions_obj of this AuthenticatorWebAuthnStage.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'flow_set': List[FlowSet],
            'configure_flow': str,
            'friendly_name': str,
            'user_verification': UserVerificationEnum,
            'authenticator_attachment': AuthenticatorAttachmentEnum,
            'resident_key_requirement': ResidentKeyRequirementEnum,
            'device_type_restrictions': List[str],
            'device_type_restrictions_obj': List[WebAuthnDeviceType]
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'flow_set': 'flow_set',
            'configure_flow': 'configure_flow',
            'friendly_name': 'friendly_name',
            'user_verification': 'user_verification',
            'authenticator_attachment': 'authenticator_attachment',
            'resident_key_requirement': 'resident_key_requirement',
            'device_type_restrictions': 'device_type_restrictions',
            'device_type_restrictions_obj': 'device_type_restrictions_obj'
        }

        self._pk = pk
        self._name = name
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._flow_set = flow_set
        self._configure_flow = configure_flow
        self._friendly_name = friendly_name
        self._user_verification = user_verification
        self._authenticator_attachment = authenticator_attachment
        self._resident_key_requirement = resident_key_requirement
        self._device_type_restrictions = device_type_restrictions
        self._device_type_restrictions_obj = device_type_restrictions_obj

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatorWebAuthnStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatorWebAuthnStage of this AuthenticatorWebAuthnStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this AuthenticatorWebAuthnStage.


        :return: The pk of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this AuthenticatorWebAuthnStage.


        :param pk: The pk of this AuthenticatorWebAuthnStage.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this AuthenticatorWebAuthnStage.


        :return: The name of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticatorWebAuthnStage.


        :param name: The name of this AuthenticatorWebAuthnStage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def component(self):
        """Gets the component of this AuthenticatorWebAuthnStage.

        Get object type so that we know how to edit the object

        :return: The component of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this AuthenticatorWebAuthnStage.

        Get object type so that we know how to edit the object

        :param component: The component of this AuthenticatorWebAuthnStage.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this AuthenticatorWebAuthnStage.

        Return object's verbose_name

        :return: The verbose_name of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this AuthenticatorWebAuthnStage.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this AuthenticatorWebAuthnStage.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this AuthenticatorWebAuthnStage.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this AuthenticatorWebAuthnStage.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this AuthenticatorWebAuthnStage.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this AuthenticatorWebAuthnStage.

        Return internal model name

        :return: The meta_model_name of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this AuthenticatorWebAuthnStage.

        Return internal model name

        :param meta_model_name: The meta_model_name of this AuthenticatorWebAuthnStage.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def flow_set(self):
        """Gets the flow_set of this AuthenticatorWebAuthnStage.


        :return: The flow_set of this AuthenticatorWebAuthnStage.
        :rtype: List[FlowSet]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this AuthenticatorWebAuthnStage.


        :param flow_set: The flow_set of this AuthenticatorWebAuthnStage.
        :type flow_set: List[FlowSet]
        """

        self._flow_set = flow_set

    @property
    def configure_flow(self):
        """Gets the configure_flow of this AuthenticatorWebAuthnStage.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :return: The configure_flow of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._configure_flow

    @configure_flow.setter
    def configure_flow(self, configure_flow):
        """Sets the configure_flow of this AuthenticatorWebAuthnStage.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :param configure_flow: The configure_flow of this AuthenticatorWebAuthnStage.
        :type configure_flow: str
        """

        self._configure_flow = configure_flow

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AuthenticatorWebAuthnStage.


        :return: The friendly_name of this AuthenticatorWebAuthnStage.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AuthenticatorWebAuthnStage.


        :param friendly_name: The friendly_name of this AuthenticatorWebAuthnStage.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def user_verification(self):
        """Gets the user_verification of this AuthenticatorWebAuthnStage.


        :return: The user_verification of this AuthenticatorWebAuthnStage.
        :rtype: UserVerificationEnum
        """
        return self._user_verification

    @user_verification.setter
    def user_verification(self, user_verification):
        """Sets the user_verification of this AuthenticatorWebAuthnStage.


        :param user_verification: The user_verification of this AuthenticatorWebAuthnStage.
        :type user_verification: UserVerificationEnum
        """

        self._user_verification = user_verification

    @property
    def authenticator_attachment(self):
        """Gets the authenticator_attachment of this AuthenticatorWebAuthnStage.


        :return: The authenticator_attachment of this AuthenticatorWebAuthnStage.
        :rtype: AuthenticatorAttachmentEnum
        """
        return self._authenticator_attachment

    @authenticator_attachment.setter
    def authenticator_attachment(self, authenticator_attachment):
        """Sets the authenticator_attachment of this AuthenticatorWebAuthnStage.


        :param authenticator_attachment: The authenticator_attachment of this AuthenticatorWebAuthnStage.
        :type authenticator_attachment: AuthenticatorAttachmentEnum
        """

        self._authenticator_attachment = authenticator_attachment

    @property
    def resident_key_requirement(self):
        """Gets the resident_key_requirement of this AuthenticatorWebAuthnStage.


        :return: The resident_key_requirement of this AuthenticatorWebAuthnStage.
        :rtype: ResidentKeyRequirementEnum
        """
        return self._resident_key_requirement

    @resident_key_requirement.setter
    def resident_key_requirement(self, resident_key_requirement):
        """Sets the resident_key_requirement of this AuthenticatorWebAuthnStage.


        :param resident_key_requirement: The resident_key_requirement of this AuthenticatorWebAuthnStage.
        :type resident_key_requirement: ResidentKeyRequirementEnum
        """

        self._resident_key_requirement = resident_key_requirement

    @property
    def device_type_restrictions(self):
        """Gets the device_type_restrictions of this AuthenticatorWebAuthnStage.


        :return: The device_type_restrictions of this AuthenticatorWebAuthnStage.
        :rtype: List[str]
        """
        return self._device_type_restrictions

    @device_type_restrictions.setter
    def device_type_restrictions(self, device_type_restrictions):
        """Sets the device_type_restrictions of this AuthenticatorWebAuthnStage.


        :param device_type_restrictions: The device_type_restrictions of this AuthenticatorWebAuthnStage.
        :type device_type_restrictions: List[str]
        """

        self._device_type_restrictions = device_type_restrictions

    @property
    def device_type_restrictions_obj(self):
        """Gets the device_type_restrictions_obj of this AuthenticatorWebAuthnStage.


        :return: The device_type_restrictions_obj of this AuthenticatorWebAuthnStage.
        :rtype: List[WebAuthnDeviceType]
        """
        return self._device_type_restrictions_obj

    @device_type_restrictions_obj.setter
    def device_type_restrictions_obj(self, device_type_restrictions_obj):
        """Sets the device_type_restrictions_obj of this AuthenticatorWebAuthnStage.


        :param device_type_restrictions_obj: The device_type_restrictions_obj of this AuthenticatorWebAuthnStage.
        :type device_type_restrictions_obj: List[WebAuthnDeviceType]
        """
        if device_type_restrictions_obj is None:
            raise ValueError("Invalid value for `device_type_restrictions_obj`, must not be `None`")

        self._device_type_restrictions_obj = device_type_restrictions_obj
