# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.authenticated_session_user_agent_device import AuthenticatedSessionUserAgentDevice
from authentik_openapi.models.authenticated_session_user_agent_os import AuthenticatedSessionUserAgentOs
from authentik_openapi.models.authenticated_session_user_agent_user_agent import AuthenticatedSessionUserAgentUserAgent
from authentik_openapi import util


class AuthenticatedSessionUserAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: AuthenticatedSessionUserAgentDevice=None, os: AuthenticatedSessionUserAgentOs=None, user_agent: AuthenticatedSessionUserAgentUserAgent=None, string: str=None):
        """AuthenticatedSessionUserAgent - a model defined in OpenAPI

        :param device: The device of this AuthenticatedSessionUserAgent.
        :param os: The os of this AuthenticatedSessionUserAgent.
        :param user_agent: The user_agent of this AuthenticatedSessionUserAgent.
        :param string: The string of this AuthenticatedSessionUserAgent.
        """
        self.openapi_types = {
            'device': AuthenticatedSessionUserAgentDevice,
            'os': AuthenticatedSessionUserAgentOs,
            'user_agent': AuthenticatedSessionUserAgentUserAgent,
            'string': str
        }

        self.attribute_map = {
            'device': 'device',
            'os': 'os',
            'user_agent': 'user_agent',
            'string': 'string'
        }

        self._device = device
        self._os = os
        self._user_agent = user_agent
        self._string = string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatedSessionUserAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatedSession_user_agent of this AuthenticatedSessionUserAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this AuthenticatedSessionUserAgent.


        :return: The device of this AuthenticatedSessionUserAgent.
        :rtype: AuthenticatedSessionUserAgentDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this AuthenticatedSessionUserAgent.


        :param device: The device of this AuthenticatedSessionUserAgent.
        :type device: AuthenticatedSessionUserAgentDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def os(self):
        """Gets the os of this AuthenticatedSessionUserAgent.


        :return: The os of this AuthenticatedSessionUserAgent.
        :rtype: AuthenticatedSessionUserAgentOs
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this AuthenticatedSessionUserAgent.


        :param os: The os of this AuthenticatedSessionUserAgent.
        :type os: AuthenticatedSessionUserAgentOs
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def user_agent(self):
        """Gets the user_agent of this AuthenticatedSessionUserAgent.


        :return: The user_agent of this AuthenticatedSessionUserAgent.
        :rtype: AuthenticatedSessionUserAgentUserAgent
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this AuthenticatedSessionUserAgent.


        :param user_agent: The user_agent of this AuthenticatedSessionUserAgent.
        :type user_agent: AuthenticatedSessionUserAgentUserAgent
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent

    @property
    def string(self):
        """Gets the string of this AuthenticatedSessionUserAgent.


        :return: The string of this AuthenticatedSessionUserAgent.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this AuthenticatedSessionUserAgent.


        :param string: The string of this AuthenticatedSessionUserAgent.
        :type string: str
        """
        if string is None:
            raise ValueError("Invalid value for `string`, must not be `None`")

        self._string = string
