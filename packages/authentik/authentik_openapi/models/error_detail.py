# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class ErrorDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, string: str=None, code: str=None):
        """ErrorDetail - a model defined in OpenAPI

        :param string: The string of this ErrorDetail.
        :param code: The code of this ErrorDetail.
        """
        self.openapi_types = {
            'string': str,
            'code': str
        }

        self.attribute_map = {
            'string': 'string',
            'code': 'code'
        }

        self._string = string
        self._code = code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorDetail of this ErrorDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def string(self):
        """Gets the string of this ErrorDetail.


        :return: The string of this ErrorDetail.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this ErrorDetail.


        :param string: The string of this ErrorDetail.
        :type string: str
        """
        if string is None:
            raise ValueError("Invalid value for `string`, must not be `None`")

        self._string = string

    @property
    def code(self):
        """Gets the code of this ErrorDetail.


        :return: The code of this ErrorDetail.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorDetail.


        :param code: The code of this ErrorDetail.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code
