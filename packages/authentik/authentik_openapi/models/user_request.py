# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.user_type_enum import UserTypeEnum
from authentik_openapi import util


class UserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, name: str=None, is_active: bool=None, last_login: datetime=None, groups: List[str]=None, email: str=None, attributes: Dict[str, object]=None, path: str=None, type: UserTypeEnum=None):
        """UserRequest - a model defined in OpenAPI

        :param username: The username of this UserRequest.
        :param name: The name of this UserRequest.
        :param is_active: The is_active of this UserRequest.
        :param last_login: The last_login of this UserRequest.
        :param groups: The groups of this UserRequest.
        :param email: The email of this UserRequest.
        :param attributes: The attributes of this UserRequest.
        :param path: The path of this UserRequest.
        :param type: The type of this UserRequest.
        """
        self.openapi_types = {
            'username': str,
            'name': str,
            'is_active': bool,
            'last_login': datetime,
            'groups': List[str],
            'email': str,
            'attributes': Dict[str, object],
            'path': str,
            'type': UserTypeEnum
        }

        self.attribute_map = {
            'username': 'username',
            'name': 'name',
            'is_active': 'is_active',
            'last_login': 'last_login',
            'groups': 'groups',
            'email': 'email',
            'attributes': 'attributes',
            'path': 'path',
            'type': 'type'
        }

        self._username = username
        self._name = name
        self._is_active = is_active
        self._last_login = last_login
        self._groups = groups
        self._email = email
        self._attributes = attributes
        self._path = path
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRequest of this UserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this UserRequest.


        :return: The username of this UserRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserRequest.


        :param username: The username of this UserRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 150:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `150`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username

    @property
    def name(self):
        """Gets the name of this UserRequest.

        User's display name.

        :return: The name of this UserRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserRequest.

        User's display name.

        :param name: The name of this UserRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def is_active(self):
        """Gets the is_active of this UserRequest.

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.

        :return: The is_active of this UserRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserRequest.

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.

        :param is_active: The is_active of this UserRequest.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def last_login(self):
        """Gets the last_login of this UserRequest.


        :return: The last_login of this UserRequest.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserRequest.


        :param last_login: The last_login of this UserRequest.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def groups(self):
        """Gets the groups of this UserRequest.


        :return: The groups of this UserRequest.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserRequest.


        :param groups: The groups of this UserRequest.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def email(self):
        """Gets the email of this UserRequest.


        :return: The email of this UserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRequest.


        :param email: The email of this UserRequest.
        :type email: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")

        self._email = email

    @property
    def attributes(self):
        """Gets the attributes of this UserRequest.


        :return: The attributes of this UserRequest.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this UserRequest.


        :param attributes: The attributes of this UserRequest.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def path(self):
        """Gets the path of this UserRequest.


        :return: The path of this UserRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this UserRequest.


        :param path: The path of this UserRequest.
        :type path: str
        """
        if path is not None and len(path) < 1:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")

        self._path = path

    @property
    def type(self):
        """Gets the type of this UserRequest.


        :return: The type of this UserRequest.
        :rtype: UserTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserRequest.


        :param type: The type of this UserRequest.
        :type type: UserTypeEnum
        """

        self._type = type
