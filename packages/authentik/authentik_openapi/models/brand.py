# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class Brand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_uuid: str=None, domain: str=None, default: bool=None, branding_title: str=None, branding_logo: str=None, branding_favicon: str=None, flow_authentication: str=None, flow_invalidation: str=None, flow_recovery: str=None, flow_unenrollment: str=None, flow_user_settings: str=None, flow_device_code: str=None, default_application: str=None, web_certificate: str=None, attributes: object=None):
        """Brand - a model defined in OpenAPI

        :param brand_uuid: The brand_uuid of this Brand.
        :param domain: The domain of this Brand.
        :param default: The default of this Brand.
        :param branding_title: The branding_title of this Brand.
        :param branding_logo: The branding_logo of this Brand.
        :param branding_favicon: The branding_favicon of this Brand.
        :param flow_authentication: The flow_authentication of this Brand.
        :param flow_invalidation: The flow_invalidation of this Brand.
        :param flow_recovery: The flow_recovery of this Brand.
        :param flow_unenrollment: The flow_unenrollment of this Brand.
        :param flow_user_settings: The flow_user_settings of this Brand.
        :param flow_device_code: The flow_device_code of this Brand.
        :param default_application: The default_application of this Brand.
        :param web_certificate: The web_certificate of this Brand.
        :param attributes: The attributes of this Brand.
        """
        self.openapi_types = {
            'brand_uuid': str,
            'domain': str,
            'default': bool,
            'branding_title': str,
            'branding_logo': str,
            'branding_favicon': str,
            'flow_authentication': str,
            'flow_invalidation': str,
            'flow_recovery': str,
            'flow_unenrollment': str,
            'flow_user_settings': str,
            'flow_device_code': str,
            'default_application': str,
            'web_certificate': str,
            'attributes': object
        }

        self.attribute_map = {
            'brand_uuid': 'brand_uuid',
            'domain': 'domain',
            'default': 'default',
            'branding_title': 'branding_title',
            'branding_logo': 'branding_logo',
            'branding_favicon': 'branding_favicon',
            'flow_authentication': 'flow_authentication',
            'flow_invalidation': 'flow_invalidation',
            'flow_recovery': 'flow_recovery',
            'flow_unenrollment': 'flow_unenrollment',
            'flow_user_settings': 'flow_user_settings',
            'flow_device_code': 'flow_device_code',
            'default_application': 'default_application',
            'web_certificate': 'web_certificate',
            'attributes': 'attributes'
        }

        self._brand_uuid = brand_uuid
        self._domain = domain
        self._default = default
        self._branding_title = branding_title
        self._branding_logo = branding_logo
        self._branding_favicon = branding_favicon
        self._flow_authentication = flow_authentication
        self._flow_invalidation = flow_invalidation
        self._flow_recovery = flow_recovery
        self._flow_unenrollment = flow_unenrollment
        self._flow_user_settings = flow_user_settings
        self._flow_device_code = flow_device_code
        self._default_application = default_application
        self._web_certificate = web_certificate
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Brand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand of this Brand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_uuid(self):
        """Gets the brand_uuid of this Brand.


        :return: The brand_uuid of this Brand.
        :rtype: str
        """
        return self._brand_uuid

    @brand_uuid.setter
    def brand_uuid(self, brand_uuid):
        """Sets the brand_uuid of this Brand.


        :param brand_uuid: The brand_uuid of this Brand.
        :type brand_uuid: str
        """
        if brand_uuid is None:
            raise ValueError("Invalid value for `brand_uuid`, must not be `None`")

        self._brand_uuid = brand_uuid

    @property
    def domain(self):
        """Gets the domain of this Brand.

        Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b`

        :return: The domain of this Brand.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Brand.

        Domain that activates this brand. Can be a superset, i.e. `a.b` for `aa.b` and `ba.b`

        :param domain: The domain of this Brand.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def default(self):
        """Gets the default of this Brand.


        :return: The default of this Brand.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Brand.


        :param default: The default of this Brand.
        :type default: bool
        """

        self._default = default

    @property
    def branding_title(self):
        """Gets the branding_title of this Brand.


        :return: The branding_title of this Brand.
        :rtype: str
        """
        return self._branding_title

    @branding_title.setter
    def branding_title(self, branding_title):
        """Sets the branding_title of this Brand.


        :param branding_title: The branding_title of this Brand.
        :type branding_title: str
        """

        self._branding_title = branding_title

    @property
    def branding_logo(self):
        """Gets the branding_logo of this Brand.


        :return: The branding_logo of this Brand.
        :rtype: str
        """
        return self._branding_logo

    @branding_logo.setter
    def branding_logo(self, branding_logo):
        """Sets the branding_logo of this Brand.


        :param branding_logo: The branding_logo of this Brand.
        :type branding_logo: str
        """

        self._branding_logo = branding_logo

    @property
    def branding_favicon(self):
        """Gets the branding_favicon of this Brand.


        :return: The branding_favicon of this Brand.
        :rtype: str
        """
        return self._branding_favicon

    @branding_favicon.setter
    def branding_favicon(self, branding_favicon):
        """Sets the branding_favicon of this Brand.


        :param branding_favicon: The branding_favicon of this Brand.
        :type branding_favicon: str
        """

        self._branding_favicon = branding_favicon

    @property
    def flow_authentication(self):
        """Gets the flow_authentication of this Brand.


        :return: The flow_authentication of this Brand.
        :rtype: str
        """
        return self._flow_authentication

    @flow_authentication.setter
    def flow_authentication(self, flow_authentication):
        """Sets the flow_authentication of this Brand.


        :param flow_authentication: The flow_authentication of this Brand.
        :type flow_authentication: str
        """

        self._flow_authentication = flow_authentication

    @property
    def flow_invalidation(self):
        """Gets the flow_invalidation of this Brand.


        :return: The flow_invalidation of this Brand.
        :rtype: str
        """
        return self._flow_invalidation

    @flow_invalidation.setter
    def flow_invalidation(self, flow_invalidation):
        """Sets the flow_invalidation of this Brand.


        :param flow_invalidation: The flow_invalidation of this Brand.
        :type flow_invalidation: str
        """

        self._flow_invalidation = flow_invalidation

    @property
    def flow_recovery(self):
        """Gets the flow_recovery of this Brand.


        :return: The flow_recovery of this Brand.
        :rtype: str
        """
        return self._flow_recovery

    @flow_recovery.setter
    def flow_recovery(self, flow_recovery):
        """Sets the flow_recovery of this Brand.


        :param flow_recovery: The flow_recovery of this Brand.
        :type flow_recovery: str
        """

        self._flow_recovery = flow_recovery

    @property
    def flow_unenrollment(self):
        """Gets the flow_unenrollment of this Brand.


        :return: The flow_unenrollment of this Brand.
        :rtype: str
        """
        return self._flow_unenrollment

    @flow_unenrollment.setter
    def flow_unenrollment(self, flow_unenrollment):
        """Sets the flow_unenrollment of this Brand.


        :param flow_unenrollment: The flow_unenrollment of this Brand.
        :type flow_unenrollment: str
        """

        self._flow_unenrollment = flow_unenrollment

    @property
    def flow_user_settings(self):
        """Gets the flow_user_settings of this Brand.


        :return: The flow_user_settings of this Brand.
        :rtype: str
        """
        return self._flow_user_settings

    @flow_user_settings.setter
    def flow_user_settings(self, flow_user_settings):
        """Sets the flow_user_settings of this Brand.


        :param flow_user_settings: The flow_user_settings of this Brand.
        :type flow_user_settings: str
        """

        self._flow_user_settings = flow_user_settings

    @property
    def flow_device_code(self):
        """Gets the flow_device_code of this Brand.


        :return: The flow_device_code of this Brand.
        :rtype: str
        """
        return self._flow_device_code

    @flow_device_code.setter
    def flow_device_code(self, flow_device_code):
        """Sets the flow_device_code of this Brand.


        :param flow_device_code: The flow_device_code of this Brand.
        :type flow_device_code: str
        """

        self._flow_device_code = flow_device_code

    @property
    def default_application(self):
        """Gets the default_application of this Brand.

        When set, external users will be redirected to this application after authenticating.

        :return: The default_application of this Brand.
        :rtype: str
        """
        return self._default_application

    @default_application.setter
    def default_application(self, default_application):
        """Sets the default_application of this Brand.

        When set, external users will be redirected to this application after authenticating.

        :param default_application: The default_application of this Brand.
        :type default_application: str
        """

        self._default_application = default_application

    @property
    def web_certificate(self):
        """Gets the web_certificate of this Brand.

        Web Certificate used by the authentik Core webserver.

        :return: The web_certificate of this Brand.
        :rtype: str
        """
        return self._web_certificate

    @web_certificate.setter
    def web_certificate(self, web_certificate):
        """Sets the web_certificate of this Brand.

        Web Certificate used by the authentik Core webserver.

        :param web_certificate: The web_certificate of this Brand.
        :type web_certificate: str
        """

        self._web_certificate = web_certificate

    @property
    def attributes(self):
        """Gets the attributes of this Brand.


        :return: The attributes of this Brand.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Brand.


        :param attributes: The attributes of this Brand.
        :type attributes: object
        """

        self._attributes = attributes
