# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class ConnectionTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, provider: int=None, endpoint: str=None):
        """ConnectionTokenRequest - a model defined in OpenAPI

        :param pk: The pk of this ConnectionTokenRequest.
        :param provider: The provider of this ConnectionTokenRequest.
        :param endpoint: The endpoint of this ConnectionTokenRequest.
        """
        self.openapi_types = {
            'pk': str,
            'provider': int,
            'endpoint': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'provider': 'provider',
            'endpoint': 'endpoint'
        }

        self._pk = pk
        self._provider = provider
        self._endpoint = endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionTokenRequest of this ConnectionTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this ConnectionTokenRequest.


        :return: The pk of this ConnectionTokenRequest.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this ConnectionTokenRequest.


        :param pk: The pk of this ConnectionTokenRequest.
        :type pk: str
        """

        self._pk = pk

    @property
    def provider(self):
        """Gets the provider of this ConnectionTokenRequest.


        :return: The provider of this ConnectionTokenRequest.
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ConnectionTokenRequest.


        :param provider: The provider of this ConnectionTokenRequest.
        :type provider: int
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def endpoint(self):
        """Gets the endpoint of this ConnectionTokenRequest.


        :return: The endpoint of this ConnectionTokenRequest.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ConnectionTokenRequest.


        :param endpoint: The endpoint of this ConnectionTokenRequest.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint
