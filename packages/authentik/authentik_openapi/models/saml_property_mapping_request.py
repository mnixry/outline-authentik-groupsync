# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class SAMLPropertyMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed: str=None, name: str=None, expression: str=None, saml_name: str=None, friendly_name: str=None):
        """SAMLPropertyMappingRequest - a model defined in OpenAPI

        :param managed: The managed of this SAMLPropertyMappingRequest.
        :param name: The name of this SAMLPropertyMappingRequest.
        :param expression: The expression of this SAMLPropertyMappingRequest.
        :param saml_name: The saml_name of this SAMLPropertyMappingRequest.
        :param friendly_name: The friendly_name of this SAMLPropertyMappingRequest.
        """
        self.openapi_types = {
            'managed': str,
            'name': str,
            'expression': str,
            'saml_name': str,
            'friendly_name': str
        }

        self.attribute_map = {
            'managed': 'managed',
            'name': 'name',
            'expression': 'expression',
            'saml_name': 'saml_name',
            'friendly_name': 'friendly_name'
        }

        self._managed = managed
        self._name = name
        self._expression = expression
        self._saml_name = saml_name
        self._friendly_name = friendly_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SAMLPropertyMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SAMLPropertyMappingRequest of this SAMLPropertyMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed(self):
        """Gets the managed of this SAMLPropertyMappingRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this SAMLPropertyMappingRequest.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this SAMLPropertyMappingRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this SAMLPropertyMappingRequest.
        :type managed: str
        """
        if managed is not None and len(managed) < 1:
            raise ValueError("Invalid value for `managed`, length must be greater than or equal to `1`")

        self._managed = managed

    @property
    def name(self):
        """Gets the name of this SAMLPropertyMappingRequest.


        :return: The name of this SAMLPropertyMappingRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SAMLPropertyMappingRequest.


        :param name: The name of this SAMLPropertyMappingRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def expression(self):
        """Gets the expression of this SAMLPropertyMappingRequest.


        :return: The expression of this SAMLPropertyMappingRequest.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this SAMLPropertyMappingRequest.


        :param expression: The expression of this SAMLPropertyMappingRequest.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")
        if expression is not None and len(expression) < 1:
            raise ValueError("Invalid value for `expression`, length must be greater than or equal to `1`")

        self._expression = expression

    @property
    def saml_name(self):
        """Gets the saml_name of this SAMLPropertyMappingRequest.


        :return: The saml_name of this SAMLPropertyMappingRequest.
        :rtype: str
        """
        return self._saml_name

    @saml_name.setter
    def saml_name(self, saml_name):
        """Sets the saml_name of this SAMLPropertyMappingRequest.


        :param saml_name: The saml_name of this SAMLPropertyMappingRequest.
        :type saml_name: str
        """
        if saml_name is None:
            raise ValueError("Invalid value for `saml_name`, must not be `None`")
        if saml_name is not None and len(saml_name) < 1:
            raise ValueError("Invalid value for `saml_name`, length must be greater than or equal to `1`")

        self._saml_name = saml_name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this SAMLPropertyMappingRequest.


        :return: The friendly_name of this SAMLPropertyMappingRequest.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this SAMLPropertyMappingRequest.


        :param friendly_name: The friendly_name of this SAMLPropertyMappingRequest.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name
