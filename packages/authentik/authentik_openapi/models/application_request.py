# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
import re
from authentik_openapi import util


class ApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, slug: str=None, provider: int=None, backchannel_providers: List[int]=None, open_in_new_tab: bool=None, meta_launch_url: str=None, meta_description: str=None, meta_publisher: str=None, policy_engine_mode: PolicyEngineMode=None, group: str=None):
        """ApplicationRequest - a model defined in OpenAPI

        :param name: The name of this ApplicationRequest.
        :param slug: The slug of this ApplicationRequest.
        :param provider: The provider of this ApplicationRequest.
        :param backchannel_providers: The backchannel_providers of this ApplicationRequest.
        :param open_in_new_tab: The open_in_new_tab of this ApplicationRequest.
        :param meta_launch_url: The meta_launch_url of this ApplicationRequest.
        :param meta_description: The meta_description of this ApplicationRequest.
        :param meta_publisher: The meta_publisher of this ApplicationRequest.
        :param policy_engine_mode: The policy_engine_mode of this ApplicationRequest.
        :param group: The group of this ApplicationRequest.
        """
        self.openapi_types = {
            'name': str,
            'slug': str,
            'provider': int,
            'backchannel_providers': List[int],
            'open_in_new_tab': bool,
            'meta_launch_url': str,
            'meta_description': str,
            'meta_publisher': str,
            'policy_engine_mode': PolicyEngineMode,
            'group': str
        }

        self.attribute_map = {
            'name': 'name',
            'slug': 'slug',
            'provider': 'provider',
            'backchannel_providers': 'backchannel_providers',
            'open_in_new_tab': 'open_in_new_tab',
            'meta_launch_url': 'meta_launch_url',
            'meta_description': 'meta_description',
            'meta_publisher': 'meta_publisher',
            'policy_engine_mode': 'policy_engine_mode',
            'group': 'group'
        }

        self._name = name
        self._slug = slug
        self._provider = provider
        self._backchannel_providers = backchannel_providers
        self._open_in_new_tab = open_in_new_tab
        self._meta_launch_url = meta_launch_url
        self._meta_description = meta_description
        self._meta_publisher = meta_publisher
        self._policy_engine_mode = policy_engine_mode
        self._group = group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationRequest of this ApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ApplicationRequest.

        Application's display Name.

        :return: The name of this ApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationRequest.

        Application's display Name.

        :param name: The name of this ApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this ApplicationRequest.

        Internal application name, used in URLs.

        :return: The slug of this ApplicationRequest.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ApplicationRequest.

        Internal application name, used in URLs.

        :param slug: The slug of this ApplicationRequest.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def provider(self):
        """Gets the provider of this ApplicationRequest.


        :return: The provider of this ApplicationRequest.
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ApplicationRequest.


        :param provider: The provider of this ApplicationRequest.
        :type provider: int
        """

        self._provider = provider

    @property
    def backchannel_providers(self):
        """Gets the backchannel_providers of this ApplicationRequest.


        :return: The backchannel_providers of this ApplicationRequest.
        :rtype: List[int]
        """
        return self._backchannel_providers

    @backchannel_providers.setter
    def backchannel_providers(self, backchannel_providers):
        """Sets the backchannel_providers of this ApplicationRequest.


        :param backchannel_providers: The backchannel_providers of this ApplicationRequest.
        :type backchannel_providers: List[int]
        """

        self._backchannel_providers = backchannel_providers

    @property
    def open_in_new_tab(self):
        """Gets the open_in_new_tab of this ApplicationRequest.

        Open launch URL in a new browser tab or window.

        :return: The open_in_new_tab of this ApplicationRequest.
        :rtype: bool
        """
        return self._open_in_new_tab

    @open_in_new_tab.setter
    def open_in_new_tab(self, open_in_new_tab):
        """Sets the open_in_new_tab of this ApplicationRequest.

        Open launch URL in a new browser tab or window.

        :param open_in_new_tab: The open_in_new_tab of this ApplicationRequest.
        :type open_in_new_tab: bool
        """

        self._open_in_new_tab = open_in_new_tab

    @property
    def meta_launch_url(self):
        """Gets the meta_launch_url of this ApplicationRequest.


        :return: The meta_launch_url of this ApplicationRequest.
        :rtype: str
        """
        return self._meta_launch_url

    @meta_launch_url.setter
    def meta_launch_url(self, meta_launch_url):
        """Sets the meta_launch_url of this ApplicationRequest.


        :param meta_launch_url: The meta_launch_url of this ApplicationRequest.
        :type meta_launch_url: str
        """

        self._meta_launch_url = meta_launch_url

    @property
    def meta_description(self):
        """Gets the meta_description of this ApplicationRequest.


        :return: The meta_description of this ApplicationRequest.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ApplicationRequest.


        :param meta_description: The meta_description of this ApplicationRequest.
        :type meta_description: str
        """

        self._meta_description = meta_description

    @property
    def meta_publisher(self):
        """Gets the meta_publisher of this ApplicationRequest.


        :return: The meta_publisher of this ApplicationRequest.
        :rtype: str
        """
        return self._meta_publisher

    @meta_publisher.setter
    def meta_publisher(self, meta_publisher):
        """Sets the meta_publisher of this ApplicationRequest.


        :param meta_publisher: The meta_publisher of this ApplicationRequest.
        :type meta_publisher: str
        """

        self._meta_publisher = meta_publisher

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this ApplicationRequest.


        :return: The policy_engine_mode of this ApplicationRequest.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this ApplicationRequest.


        :param policy_engine_mode: The policy_engine_mode of this ApplicationRequest.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def group(self):
        """Gets the group of this ApplicationRequest.


        :return: The group of this ApplicationRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ApplicationRequest.


        :param group: The group of this ApplicationRequest.
        :type group: str
        """

        self._group = group
