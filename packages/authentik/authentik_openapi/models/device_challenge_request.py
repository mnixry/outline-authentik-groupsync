# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class DeviceChallengeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_class: str=None, device_uid: str=None, challenge: Dict[str, object]=None):
        """DeviceChallengeRequest - a model defined in OpenAPI

        :param device_class: The device_class of this DeviceChallengeRequest.
        :param device_uid: The device_uid of this DeviceChallengeRequest.
        :param challenge: The challenge of this DeviceChallengeRequest.
        """
        self.openapi_types = {
            'device_class': str,
            'device_uid': str,
            'challenge': Dict[str, object]
        }

        self.attribute_map = {
            'device_class': 'device_class',
            'device_uid': 'device_uid',
            'challenge': 'challenge'
        }

        self._device_class = device_class
        self._device_uid = device_uid
        self._challenge = challenge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceChallengeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceChallengeRequest of this DeviceChallengeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_class(self):
        """Gets the device_class of this DeviceChallengeRequest.


        :return: The device_class of this DeviceChallengeRequest.
        :rtype: str
        """
        return self._device_class

    @device_class.setter
    def device_class(self, device_class):
        """Sets the device_class of this DeviceChallengeRequest.


        :param device_class: The device_class of this DeviceChallengeRequest.
        :type device_class: str
        """
        if device_class is None:
            raise ValueError("Invalid value for `device_class`, must not be `None`")
        if device_class is not None and len(device_class) < 1:
            raise ValueError("Invalid value for `device_class`, length must be greater than or equal to `1`")

        self._device_class = device_class

    @property
    def device_uid(self):
        """Gets the device_uid of this DeviceChallengeRequest.


        :return: The device_uid of this DeviceChallengeRequest.
        :rtype: str
        """
        return self._device_uid

    @device_uid.setter
    def device_uid(self, device_uid):
        """Sets the device_uid of this DeviceChallengeRequest.


        :param device_uid: The device_uid of this DeviceChallengeRequest.
        :type device_uid: str
        """
        if device_uid is None:
            raise ValueError("Invalid value for `device_uid`, must not be `None`")
        if device_uid is not None and len(device_uid) < 1:
            raise ValueError("Invalid value for `device_uid`, length must be greater than or equal to `1`")

        self._device_uid = device_uid

    @property
    def challenge(self):
        """Gets the challenge of this DeviceChallengeRequest.


        :return: The challenge of this DeviceChallengeRequest.
        :rtype: Dict[str, object]
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this DeviceChallengeRequest.


        :param challenge: The challenge of this DeviceChallengeRequest.
        :type challenge: Dict[str, object]
        """
        if challenge is None:
            raise ValueError("Invalid value for `challenge`, must not be `None`")

        self._challenge = challenge
