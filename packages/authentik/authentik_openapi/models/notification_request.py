# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.event_request import EventRequest
from authentik_openapi import util


class NotificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: EventRequest=None, seen: bool=None):
        """NotificationRequest - a model defined in OpenAPI

        :param event: The event of this NotificationRequest.
        :param seen: The seen of this NotificationRequest.
        """
        self.openapi_types = {
            'event': EventRequest,
            'seen': bool
        }

        self.attribute_map = {
            'event': 'event',
            'seen': 'seen'
        }

        self._event = event
        self._seen = seen

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationRequest of this NotificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this NotificationRequest.


        :return: The event of this NotificationRequest.
        :rtype: EventRequest
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this NotificationRequest.


        :param event: The event of this NotificationRequest.
        :type event: EventRequest
        """

        self._event = event

    @property
    def seen(self):
        """Gets the seen of this NotificationRequest.


        :return: The seen of this NotificationRequest.
        :rtype: bool
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """Sets the seen of this NotificationRequest.


        :param seen: The seen of this NotificationRequest.
        :type seen: bool
        """

        self._seen = seen
