# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi.models.user_creation_mode_enum import UserCreationModeEnum
from authentik_openapi.models.user_type_enum import UserTypeEnum
from authentik_openapi import util


class PatchedUserWriteStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, user_creation_mode: UserCreationModeEnum=None, create_users_as_inactive: bool=None, create_users_group: str=None, user_type: UserTypeEnum=None, user_path_template: str=None):
        """PatchedUserWriteStageRequest - a model defined in OpenAPI

        :param name: The name of this PatchedUserWriteStageRequest.
        :param flow_set: The flow_set of this PatchedUserWriteStageRequest.
        :param user_creation_mode: The user_creation_mode of this PatchedUserWriteStageRequest.
        :param create_users_as_inactive: The create_users_as_inactive of this PatchedUserWriteStageRequest.
        :param create_users_group: The create_users_group of this PatchedUserWriteStageRequest.
        :param user_type: The user_type of this PatchedUserWriteStageRequest.
        :param user_path_template: The user_path_template of this PatchedUserWriteStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'user_creation_mode': UserCreationModeEnum,
            'create_users_as_inactive': bool,
            'create_users_group': str,
            'user_type': UserTypeEnum,
            'user_path_template': str
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'user_creation_mode': 'user_creation_mode',
            'create_users_as_inactive': 'create_users_as_inactive',
            'create_users_group': 'create_users_group',
            'user_type': 'user_type',
            'user_path_template': 'user_path_template'
        }

        self._name = name
        self._flow_set = flow_set
        self._user_creation_mode = user_creation_mode
        self._create_users_as_inactive = create_users_as_inactive
        self._create_users_group = create_users_group
        self._user_type = user_type
        self._user_path_template = user_path_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedUserWriteStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedUserWriteStageRequest of this PatchedUserWriteStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedUserWriteStageRequest.


        :return: The name of this PatchedUserWriteStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedUserWriteStageRequest.


        :param name: The name of this PatchedUserWriteStageRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this PatchedUserWriteStageRequest.


        :return: The flow_set of this PatchedUserWriteStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this PatchedUserWriteStageRequest.


        :param flow_set: The flow_set of this PatchedUserWriteStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def user_creation_mode(self):
        """Gets the user_creation_mode of this PatchedUserWriteStageRequest.


        :return: The user_creation_mode of this PatchedUserWriteStageRequest.
        :rtype: UserCreationModeEnum
        """
        return self._user_creation_mode

    @user_creation_mode.setter
    def user_creation_mode(self, user_creation_mode):
        """Sets the user_creation_mode of this PatchedUserWriteStageRequest.


        :param user_creation_mode: The user_creation_mode of this PatchedUserWriteStageRequest.
        :type user_creation_mode: UserCreationModeEnum
        """

        self._user_creation_mode = user_creation_mode

    @property
    def create_users_as_inactive(self):
        """Gets the create_users_as_inactive of this PatchedUserWriteStageRequest.

        When set, newly created users are inactive and cannot login.

        :return: The create_users_as_inactive of this PatchedUserWriteStageRequest.
        :rtype: bool
        """
        return self._create_users_as_inactive

    @create_users_as_inactive.setter
    def create_users_as_inactive(self, create_users_as_inactive):
        """Sets the create_users_as_inactive of this PatchedUserWriteStageRequest.

        When set, newly created users are inactive and cannot login.

        :param create_users_as_inactive: The create_users_as_inactive of this PatchedUserWriteStageRequest.
        :type create_users_as_inactive: bool
        """

        self._create_users_as_inactive = create_users_as_inactive

    @property
    def create_users_group(self):
        """Gets the create_users_group of this PatchedUserWriteStageRequest.

        Optionally add newly created users to this group.

        :return: The create_users_group of this PatchedUserWriteStageRequest.
        :rtype: str
        """
        return self._create_users_group

    @create_users_group.setter
    def create_users_group(self, create_users_group):
        """Sets the create_users_group of this PatchedUserWriteStageRequest.

        Optionally add newly created users to this group.

        :param create_users_group: The create_users_group of this PatchedUserWriteStageRequest.
        :type create_users_group: str
        """

        self._create_users_group = create_users_group

    @property
    def user_type(self):
        """Gets the user_type of this PatchedUserWriteStageRequest.


        :return: The user_type of this PatchedUserWriteStageRequest.
        :rtype: UserTypeEnum
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this PatchedUserWriteStageRequest.


        :param user_type: The user_type of this PatchedUserWriteStageRequest.
        :type user_type: UserTypeEnum
        """

        self._user_type = user_type

    @property
    def user_path_template(self):
        """Gets the user_path_template of this PatchedUserWriteStageRequest.


        :return: The user_path_template of this PatchedUserWriteStageRequest.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this PatchedUserWriteStageRequest.


        :param user_path_template: The user_path_template of this PatchedUserWriteStageRequest.
        :type user_path_template: str
        """

        self._user_path_template = user_path_template
