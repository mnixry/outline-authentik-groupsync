# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.policy_test_result import PolicyTestResult
from authentik_openapi import util


class LDAPCheckAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_search_permission: bool=None, access: PolicyTestResult=None):
        """LDAPCheckAccess - a model defined in OpenAPI

        :param has_search_permission: The has_search_permission of this LDAPCheckAccess.
        :param access: The access of this LDAPCheckAccess.
        """
        self.openapi_types = {
            'has_search_permission': bool,
            'access': PolicyTestResult
        }

        self.attribute_map = {
            'has_search_permission': 'has_search_permission',
            'access': 'access'
        }

        self._has_search_permission = has_search_permission
        self._access = access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LDAPCheckAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LDAPCheckAccess of this LDAPCheckAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_search_permission(self):
        """Gets the has_search_permission of this LDAPCheckAccess.


        :return: The has_search_permission of this LDAPCheckAccess.
        :rtype: bool
        """
        return self._has_search_permission

    @has_search_permission.setter
    def has_search_permission(self, has_search_permission):
        """Sets the has_search_permission of this LDAPCheckAccess.


        :param has_search_permission: The has_search_permission of this LDAPCheckAccess.
        :type has_search_permission: bool
        """

        self._has_search_permission = has_search_permission

    @property
    def access(self):
        """Gets the access of this LDAPCheckAccess.


        :return: The access of this LDAPCheckAccess.
        :rtype: PolicyTestResult
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this LDAPCheckAccess.


        :param access: The access of this LDAPCheckAccess.
        :type access: PolicyTestResult
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")

        self._access = access
