# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class UserObjectPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, codename: str=None, model: str=None, app_label: str=None, object_pk: str=None, name: str=None):
        """UserObjectPermission - a model defined in OpenAPI

        :param id: The id of this UserObjectPermission.
        :param codename: The codename of this UserObjectPermission.
        :param model: The model of this UserObjectPermission.
        :param app_label: The app_label of this UserObjectPermission.
        :param object_pk: The object_pk of this UserObjectPermission.
        :param name: The name of this UserObjectPermission.
        """
        self.openapi_types = {
            'id': int,
            'codename': str,
            'model': str,
            'app_label': str,
            'object_pk': str,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'codename': 'codename',
            'model': 'model',
            'app_label': 'app_label',
            'object_pk': 'object_pk',
            'name': 'name'
        }

        self._id = id
        self._codename = codename
        self._model = model
        self._app_label = app_label
        self._object_pk = object_pk
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserObjectPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserObjectPermission of this UserObjectPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserObjectPermission.


        :return: The id of this UserObjectPermission.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserObjectPermission.


        :param id: The id of this UserObjectPermission.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def codename(self):
        """Gets the codename of this UserObjectPermission.


        :return: The codename of this UserObjectPermission.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this UserObjectPermission.


        :param codename: The codename of this UserObjectPermission.
        :type codename: str
        """
        if codename is None:
            raise ValueError("Invalid value for `codename`, must not be `None`")

        self._codename = codename

    @property
    def model(self):
        """Gets the model of this UserObjectPermission.


        :return: The model of this UserObjectPermission.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this UserObjectPermission.


        :param model: The model of this UserObjectPermission.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def app_label(self):
        """Gets the app_label of this UserObjectPermission.


        :return: The app_label of this UserObjectPermission.
        :rtype: str
        """
        return self._app_label

    @app_label.setter
    def app_label(self, app_label):
        """Sets the app_label of this UserObjectPermission.


        :param app_label: The app_label of this UserObjectPermission.
        :type app_label: str
        """
        if app_label is None:
            raise ValueError("Invalid value for `app_label`, must not be `None`")

        self._app_label = app_label

    @property
    def object_pk(self):
        """Gets the object_pk of this UserObjectPermission.


        :return: The object_pk of this UserObjectPermission.
        :rtype: str
        """
        return self._object_pk

    @object_pk.setter
    def object_pk(self, object_pk):
        """Sets the object_pk of this UserObjectPermission.


        :param object_pk: The object_pk of this UserObjectPermission.
        :type object_pk: str
        """
        if object_pk is None:
            raise ValueError("Invalid value for `object_pk`, must not be `None`")

        self._object_pk = object_pk

    @property
    def name(self):
        """Gets the name of this UserObjectPermission.


        :return: The name of this UserObjectPermission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserObjectPermission.


        :param name: The name of this UserObjectPermission.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
