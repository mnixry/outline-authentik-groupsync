# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class DummyStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, throw_error: bool=None):
        """DummyStageRequest - a model defined in OpenAPI

        :param name: The name of this DummyStageRequest.
        :param flow_set: The flow_set of this DummyStageRequest.
        :param throw_error: The throw_error of this DummyStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'throw_error': bool
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'throw_error': 'throw_error'
        }

        self._name = name
        self._flow_set = flow_set
        self._throw_error = throw_error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DummyStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DummyStageRequest of this DummyStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DummyStageRequest.


        :return: The name of this DummyStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DummyStageRequest.


        :param name: The name of this DummyStageRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this DummyStageRequest.


        :return: The flow_set of this DummyStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this DummyStageRequest.


        :param flow_set: The flow_set of this DummyStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def throw_error(self):
        """Gets the throw_error of this DummyStageRequest.


        :return: The throw_error of this DummyStageRequest.
        :rtype: bool
        """
        return self._throw_error

    @throw_error.setter
    def throw_error(self, throw_error):
        """Sets the throw_error of this DummyStageRequest.


        :param throw_error: The throw_error of this DummyStageRequest.
        :type throw_error: bool
        """

        self._throw_error = throw_error
