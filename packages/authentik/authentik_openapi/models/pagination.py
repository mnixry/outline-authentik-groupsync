# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next: float=None, previous: float=None, count: float=None, current: float=None, total_pages: float=None, start_index: float=None, end_index: float=None):
        """Pagination - a model defined in OpenAPI

        :param next: The next of this Pagination.
        :param previous: The previous of this Pagination.
        :param count: The count of this Pagination.
        :param current: The current of this Pagination.
        :param total_pages: The total_pages of this Pagination.
        :param start_index: The start_index of this Pagination.
        :param end_index: The end_index of this Pagination.
        """
        self.openapi_types = {
            'next': float,
            'previous': float,
            'count': float,
            'current': float,
            'total_pages': float,
            'start_index': float,
            'end_index': float
        }

        self.attribute_map = {
            'next': 'next',
            'previous': 'previous',
            'count': 'count',
            'current': 'current',
            'total_pages': 'total_pages',
            'start_index': 'start_index',
            'end_index': 'end_index'
        }

        self._next = next
        self._previous = previous
        self._count = count
        self._current = current
        self._total_pages = total_pages
        self._start_index = start_index
        self._end_index = end_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next(self):
        """Gets the next of this Pagination.


        :return: The next of this Pagination.
        :rtype: float
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Pagination.


        :param next: The next of this Pagination.
        :type next: float
        """
        if next is None:
            raise ValueError("Invalid value for `next`, must not be `None`")

        self._next = next

    @property
    def previous(self):
        """Gets the previous of this Pagination.


        :return: The previous of this Pagination.
        :rtype: float
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this Pagination.


        :param previous: The previous of this Pagination.
        :type previous: float
        """
        if previous is None:
            raise ValueError("Invalid value for `previous`, must not be `None`")

        self._previous = previous

    @property
    def count(self):
        """Gets the count of this Pagination.


        :return: The count of this Pagination.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Pagination.


        :param count: The count of this Pagination.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def current(self):
        """Gets the current of this Pagination.


        :return: The current of this Pagination.
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Pagination.


        :param current: The current of this Pagination.
        :type current: float
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")

        self._current = current

    @property
    def total_pages(self):
        """Gets the total_pages of this Pagination.


        :return: The total_pages of this Pagination.
        :rtype: float
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this Pagination.


        :param total_pages: The total_pages of this Pagination.
        :type total_pages: float
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")

        self._total_pages = total_pages

    @property
    def start_index(self):
        """Gets the start_index of this Pagination.


        :return: The start_index of this Pagination.
        :rtype: float
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this Pagination.


        :param start_index: The start_index of this Pagination.
        :type start_index: float
        """
        if start_index is None:
            raise ValueError("Invalid value for `start_index`, must not be `None`")

        self._start_index = start_index

    @property
    def end_index(self):
        """Gets the end_index of this Pagination.


        :return: The end_index of this Pagination.
        :rtype: float
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this Pagination.


        :param end_index: The end_index of this Pagination.
        :type end_index: float
        """
        if end_index is None:
            raise ValueError("Invalid value for `end_index`, must not be `None`")

        self._end_index = end_index
