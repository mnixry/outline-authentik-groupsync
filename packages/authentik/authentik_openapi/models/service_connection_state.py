# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class ServiceConnectionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, healthy: bool=None, version: str=None):
        """ServiceConnectionState - a model defined in OpenAPI

        :param healthy: The healthy of this ServiceConnectionState.
        :param version: The version of this ServiceConnectionState.
        """
        self.openapi_types = {
            'healthy': bool,
            'version': str
        }

        self.attribute_map = {
            'healthy': 'healthy',
            'version': 'version'
        }

        self._healthy = healthy
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceConnectionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceConnectionState of this ServiceConnectionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def healthy(self):
        """Gets the healthy of this ServiceConnectionState.


        :return: The healthy of this ServiceConnectionState.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this ServiceConnectionState.


        :param healthy: The healthy of this ServiceConnectionState.
        :type healthy: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def version(self):
        """Gets the version of this ServiceConnectionState.


        :return: The version of this ServiceConnectionState.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceConnectionState.


        :param version: The version of this ServiceConnectionState.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
