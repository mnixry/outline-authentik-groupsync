# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.web_authn_device_type import WebAuthnDeviceType
from authentik_openapi import util


class WebAuthnDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, created_on: datetime=None, device_type: WebAuthnDeviceType=None, aaguid: str=None):
        """WebAuthnDevice - a model defined in OpenAPI

        :param pk: The pk of this WebAuthnDevice.
        :param name: The name of this WebAuthnDevice.
        :param created_on: The created_on of this WebAuthnDevice.
        :param device_type: The device_type of this WebAuthnDevice.
        :param aaguid: The aaguid of this WebAuthnDevice.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'created_on': datetime,
            'device_type': WebAuthnDeviceType,
            'aaguid': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'created_on': 'created_on',
            'device_type': 'device_type',
            'aaguid': 'aaguid'
        }

        self._pk = pk
        self._name = name
        self._created_on = created_on
        self._device_type = device_type
        self._aaguid = aaguid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebAuthnDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebAuthnDevice of this WebAuthnDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this WebAuthnDevice.


        :return: The pk of this WebAuthnDevice.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this WebAuthnDevice.


        :param pk: The pk of this WebAuthnDevice.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this WebAuthnDevice.


        :return: The name of this WebAuthnDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebAuthnDevice.


        :param name: The name of this WebAuthnDevice.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")

        self._name = name

    @property
    def created_on(self):
        """Gets the created_on of this WebAuthnDevice.


        :return: The created_on of this WebAuthnDevice.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this WebAuthnDevice.


        :param created_on: The created_on of this WebAuthnDevice.
        :type created_on: datetime
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def device_type(self):
        """Gets the device_type of this WebAuthnDevice.


        :return: The device_type of this WebAuthnDevice.
        :rtype: WebAuthnDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WebAuthnDevice.


        :param device_type: The device_type of this WebAuthnDevice.
        :type device_type: WebAuthnDeviceType
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def aaguid(self):
        """Gets the aaguid of this WebAuthnDevice.


        :return: The aaguid of this WebAuthnDevice.
        :rtype: str
        """
        return self._aaguid

    @aaguid.setter
    def aaguid(self, aaguid):
        """Sets the aaguid of this WebAuthnDevice.


        :param aaguid: The aaguid of this WebAuthnDevice.
        :type aaguid: str
        """
        if aaguid is None:
            raise ValueError("Invalid value for `aaguid`, must not be `None`")

        self._aaguid = aaguid
