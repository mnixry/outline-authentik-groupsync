# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.client_type_enum import ClientTypeEnum
from authentik_openapi.models.issuer_mode_enum import IssuerModeEnum
from authentik_openapi.models.sub_mode_enum import SubModeEnum
from authentik_openapi import util


class OAuth2Provider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, authentication_flow: str=None, authorization_flow: str=None, property_mappings: List[str]=None, component: str=None, assigned_application_slug: str=None, assigned_application_name: str=None, assigned_backchannel_application_slug: str=None, assigned_backchannel_application_name: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, client_type: ClientTypeEnum=None, client_id: str=None, client_secret: str=None, access_code_validity: str=None, access_token_validity: str=None, refresh_token_validity: str=None, include_claims_in_id_token: bool=None, signing_key: str=None, redirect_uris: str=None, sub_mode: SubModeEnum=None, issuer_mode: IssuerModeEnum=None, jwks_sources: List[str]=None):
        """OAuth2Provider - a model defined in OpenAPI

        :param pk: The pk of this OAuth2Provider.
        :param name: The name of this OAuth2Provider.
        :param authentication_flow: The authentication_flow of this OAuth2Provider.
        :param authorization_flow: The authorization_flow of this OAuth2Provider.
        :param property_mappings: The property_mappings of this OAuth2Provider.
        :param component: The component of this OAuth2Provider.
        :param assigned_application_slug: The assigned_application_slug of this OAuth2Provider.
        :param assigned_application_name: The assigned_application_name of this OAuth2Provider.
        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this OAuth2Provider.
        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this OAuth2Provider.
        :param verbose_name: The verbose_name of this OAuth2Provider.
        :param verbose_name_plural: The verbose_name_plural of this OAuth2Provider.
        :param meta_model_name: The meta_model_name of this OAuth2Provider.
        :param client_type: The client_type of this OAuth2Provider.
        :param client_id: The client_id of this OAuth2Provider.
        :param client_secret: The client_secret of this OAuth2Provider.
        :param access_code_validity: The access_code_validity of this OAuth2Provider.
        :param access_token_validity: The access_token_validity of this OAuth2Provider.
        :param refresh_token_validity: The refresh_token_validity of this OAuth2Provider.
        :param include_claims_in_id_token: The include_claims_in_id_token of this OAuth2Provider.
        :param signing_key: The signing_key of this OAuth2Provider.
        :param redirect_uris: The redirect_uris of this OAuth2Provider.
        :param sub_mode: The sub_mode of this OAuth2Provider.
        :param issuer_mode: The issuer_mode of this OAuth2Provider.
        :param jwks_sources: The jwks_sources of this OAuth2Provider.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'property_mappings': List[str],
            'component': str,
            'assigned_application_slug': str,
            'assigned_application_name': str,
            'assigned_backchannel_application_slug': str,
            'assigned_backchannel_application_name': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'client_type': ClientTypeEnum,
            'client_id': str,
            'client_secret': str,
            'access_code_validity': str,
            'access_token_validity': str,
            'refresh_token_validity': str,
            'include_claims_in_id_token': bool,
            'signing_key': str,
            'redirect_uris': str,
            'sub_mode': SubModeEnum,
            'issuer_mode': IssuerModeEnum,
            'jwks_sources': List[str]
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'property_mappings': 'property_mappings',
            'component': 'component',
            'assigned_application_slug': 'assigned_application_slug',
            'assigned_application_name': 'assigned_application_name',
            'assigned_backchannel_application_slug': 'assigned_backchannel_application_slug',
            'assigned_backchannel_application_name': 'assigned_backchannel_application_name',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'client_type': 'client_type',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'access_code_validity': 'access_code_validity',
            'access_token_validity': 'access_token_validity',
            'refresh_token_validity': 'refresh_token_validity',
            'include_claims_in_id_token': 'include_claims_in_id_token',
            'signing_key': 'signing_key',
            'redirect_uris': 'redirect_uris',
            'sub_mode': 'sub_mode',
            'issuer_mode': 'issuer_mode',
            'jwks_sources': 'jwks_sources'
        }

        self._pk = pk
        self._name = name
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._property_mappings = property_mappings
        self._component = component
        self._assigned_application_slug = assigned_application_slug
        self._assigned_application_name = assigned_application_name
        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug
        self._assigned_backchannel_application_name = assigned_backchannel_application_name
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._client_type = client_type
        self._client_id = client_id
        self._client_secret = client_secret
        self._access_code_validity = access_code_validity
        self._access_token_validity = access_token_validity
        self._refresh_token_validity = refresh_token_validity
        self._include_claims_in_id_token = include_claims_in_id_token
        self._signing_key = signing_key
        self._redirect_uris = redirect_uris
        self._sub_mode = sub_mode
        self._issuer_mode = issuer_mode
        self._jwks_sources = jwks_sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuth2Provider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuth2Provider of this OAuth2Provider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this OAuth2Provider.


        :return: The pk of this OAuth2Provider.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this OAuth2Provider.


        :param pk: The pk of this OAuth2Provider.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this OAuth2Provider.


        :return: The name of this OAuth2Provider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuth2Provider.


        :param name: The name of this OAuth2Provider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this OAuth2Provider.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this OAuth2Provider.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this OAuth2Provider.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this OAuth2Provider.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this OAuth2Provider.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this OAuth2Provider.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this OAuth2Provider.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this OAuth2Provider.
        :type authorization_flow: str
        """
        if authorization_flow is None:
            raise ValueError("Invalid value for `authorization_flow`, must not be `None`")

        self._authorization_flow = authorization_flow

    @property
    def property_mappings(self):
        """Gets the property_mappings of this OAuth2Provider.


        :return: The property_mappings of this OAuth2Provider.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this OAuth2Provider.


        :param property_mappings: The property_mappings of this OAuth2Provider.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def component(self):
        """Gets the component of this OAuth2Provider.

        Get object component so that we know how to edit the object

        :return: The component of this OAuth2Provider.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this OAuth2Provider.

        Get object component so that we know how to edit the object

        :param component: The component of this OAuth2Provider.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def assigned_application_slug(self):
        """Gets the assigned_application_slug of this OAuth2Provider.

        Internal application name, used in URLs.

        :return: The assigned_application_slug of this OAuth2Provider.
        :rtype: str
        """
        return self._assigned_application_slug

    @assigned_application_slug.setter
    def assigned_application_slug(self, assigned_application_slug):
        """Sets the assigned_application_slug of this OAuth2Provider.

        Internal application name, used in URLs.

        :param assigned_application_slug: The assigned_application_slug of this OAuth2Provider.
        :type assigned_application_slug: str
        """
        if assigned_application_slug is None:
            raise ValueError("Invalid value for `assigned_application_slug`, must not be `None`")

        self._assigned_application_slug = assigned_application_slug

    @property
    def assigned_application_name(self):
        """Gets the assigned_application_name of this OAuth2Provider.

        Application's display Name.

        :return: The assigned_application_name of this OAuth2Provider.
        :rtype: str
        """
        return self._assigned_application_name

    @assigned_application_name.setter
    def assigned_application_name(self, assigned_application_name):
        """Sets the assigned_application_name of this OAuth2Provider.

        Application's display Name.

        :param assigned_application_name: The assigned_application_name of this OAuth2Provider.
        :type assigned_application_name: str
        """
        if assigned_application_name is None:
            raise ValueError("Invalid value for `assigned_application_name`, must not be `None`")

        self._assigned_application_name = assigned_application_name

    @property
    def assigned_backchannel_application_slug(self):
        """Gets the assigned_backchannel_application_slug of this OAuth2Provider.

        Internal application name, used in URLs.

        :return: The assigned_backchannel_application_slug of this OAuth2Provider.
        :rtype: str
        """
        return self._assigned_backchannel_application_slug

    @assigned_backchannel_application_slug.setter
    def assigned_backchannel_application_slug(self, assigned_backchannel_application_slug):
        """Sets the assigned_backchannel_application_slug of this OAuth2Provider.

        Internal application name, used in URLs.

        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this OAuth2Provider.
        :type assigned_backchannel_application_slug: str
        """
        if assigned_backchannel_application_slug is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_slug`, must not be `None`")

        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug

    @property
    def assigned_backchannel_application_name(self):
        """Gets the assigned_backchannel_application_name of this OAuth2Provider.

        Application's display Name.

        :return: The assigned_backchannel_application_name of this OAuth2Provider.
        :rtype: str
        """
        return self._assigned_backchannel_application_name

    @assigned_backchannel_application_name.setter
    def assigned_backchannel_application_name(self, assigned_backchannel_application_name):
        """Sets the assigned_backchannel_application_name of this OAuth2Provider.

        Application's display Name.

        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this OAuth2Provider.
        :type assigned_backchannel_application_name: str
        """
        if assigned_backchannel_application_name is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_name`, must not be `None`")

        self._assigned_backchannel_application_name = assigned_backchannel_application_name

    @property
    def verbose_name(self):
        """Gets the verbose_name of this OAuth2Provider.

        Return object's verbose_name

        :return: The verbose_name of this OAuth2Provider.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this OAuth2Provider.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this OAuth2Provider.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this OAuth2Provider.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this OAuth2Provider.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this OAuth2Provider.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this OAuth2Provider.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this OAuth2Provider.

        Return internal model name

        :return: The meta_model_name of this OAuth2Provider.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this OAuth2Provider.

        Return internal model name

        :param meta_model_name: The meta_model_name of this OAuth2Provider.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def client_type(self):
        """Gets the client_type of this OAuth2Provider.

        Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable

        :return: The client_type of this OAuth2Provider.
        :rtype: ClientTypeEnum
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this OAuth2Provider.

        Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable

        :param client_type: The client_type of this OAuth2Provider.
        :type client_type: ClientTypeEnum
        """

        self._client_type = client_type

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2Provider.


        :return: The client_id of this OAuth2Provider.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2Provider.


        :param client_id: The client_id of this OAuth2Provider.
        :type client_id: str
        """
        if client_id is not None and len(client_id) > 255:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `255`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuth2Provider.


        :return: The client_secret of this OAuth2Provider.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuth2Provider.


        :param client_secret: The client_secret of this OAuth2Provider.
        :type client_secret: str
        """
        if client_secret is not None and len(client_secret) > 255:
            raise ValueError("Invalid value for `client_secret`, length must be less than or equal to `255`")

        self._client_secret = client_secret

    @property
    def access_code_validity(self):
        """Gets the access_code_validity of this OAuth2Provider.

        Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The access_code_validity of this OAuth2Provider.
        :rtype: str
        """
        return self._access_code_validity

    @access_code_validity.setter
    def access_code_validity(self, access_code_validity):
        """Sets the access_code_validity of this OAuth2Provider.

        Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param access_code_validity: The access_code_validity of this OAuth2Provider.
        :type access_code_validity: str
        """

        self._access_code_validity = access_code_validity

    @property
    def access_token_validity(self):
        """Gets the access_token_validity of this OAuth2Provider.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The access_token_validity of this OAuth2Provider.
        :rtype: str
        """
        return self._access_token_validity

    @access_token_validity.setter
    def access_token_validity(self, access_token_validity):
        """Sets the access_token_validity of this OAuth2Provider.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param access_token_validity: The access_token_validity of this OAuth2Provider.
        :type access_token_validity: str
        """

        self._access_token_validity = access_token_validity

    @property
    def refresh_token_validity(self):
        """Gets the refresh_token_validity of this OAuth2Provider.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The refresh_token_validity of this OAuth2Provider.
        :rtype: str
        """
        return self._refresh_token_validity

    @refresh_token_validity.setter
    def refresh_token_validity(self, refresh_token_validity):
        """Sets the refresh_token_validity of this OAuth2Provider.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param refresh_token_validity: The refresh_token_validity of this OAuth2Provider.
        :type refresh_token_validity: str
        """

        self._refresh_token_validity = refresh_token_validity

    @property
    def include_claims_in_id_token(self):
        """Gets the include_claims_in_id_token of this OAuth2Provider.

        Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.

        :return: The include_claims_in_id_token of this OAuth2Provider.
        :rtype: bool
        """
        return self._include_claims_in_id_token

    @include_claims_in_id_token.setter
    def include_claims_in_id_token(self, include_claims_in_id_token):
        """Sets the include_claims_in_id_token of this OAuth2Provider.

        Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.

        :param include_claims_in_id_token: The include_claims_in_id_token of this OAuth2Provider.
        :type include_claims_in_id_token: bool
        """

        self._include_claims_in_id_token = include_claims_in_id_token

    @property
    def signing_key(self):
        """Gets the signing_key of this OAuth2Provider.

        Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.

        :return: The signing_key of this OAuth2Provider.
        :rtype: str
        """
        return self._signing_key

    @signing_key.setter
    def signing_key(self, signing_key):
        """Sets the signing_key of this OAuth2Provider.

        Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.

        :param signing_key: The signing_key of this OAuth2Provider.
        :type signing_key: str
        """

        self._signing_key = signing_key

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this OAuth2Provider.

        Enter each URI on a new line.

        :return: The redirect_uris of this OAuth2Provider.
        :rtype: str
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this OAuth2Provider.

        Enter each URI on a new line.

        :param redirect_uris: The redirect_uris of this OAuth2Provider.
        :type redirect_uris: str
        """

        self._redirect_uris = redirect_uris

    @property
    def sub_mode(self):
        """Gets the sub_mode of this OAuth2Provider.

        Configure what data should be used as unique User Identifier. For most cases, the default should be fine.

        :return: The sub_mode of this OAuth2Provider.
        :rtype: SubModeEnum
        """
        return self._sub_mode

    @sub_mode.setter
    def sub_mode(self, sub_mode):
        """Sets the sub_mode of this OAuth2Provider.

        Configure what data should be used as unique User Identifier. For most cases, the default should be fine.

        :param sub_mode: The sub_mode of this OAuth2Provider.
        :type sub_mode: SubModeEnum
        """

        self._sub_mode = sub_mode

    @property
    def issuer_mode(self):
        """Gets the issuer_mode of this OAuth2Provider.

        Configure how the issuer field of the ID Token should be filled.

        :return: The issuer_mode of this OAuth2Provider.
        :rtype: IssuerModeEnum
        """
        return self._issuer_mode

    @issuer_mode.setter
    def issuer_mode(self, issuer_mode):
        """Sets the issuer_mode of this OAuth2Provider.

        Configure how the issuer field of the ID Token should be filled.

        :param issuer_mode: The issuer_mode of this OAuth2Provider.
        :type issuer_mode: IssuerModeEnum
        """

        self._issuer_mode = issuer_mode

    @property
    def jwks_sources(self):
        """Gets the jwks_sources of this OAuth2Provider.


        :return: The jwks_sources of this OAuth2Provider.
        :rtype: List[str]
        """
        return self._jwks_sources

    @jwks_sources.setter
    def jwks_sources(self, jwks_sources):
        """Sets the jwks_sources of this OAuth2Provider.


        :param jwks_sources: The jwks_sources of this OAuth2Provider.
        :type jwks_sources: List[str]
        """

        self._jwks_sources = jwks_sources
