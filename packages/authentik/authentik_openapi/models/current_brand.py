# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.footer_link import FooterLink
from authentik_openapi.models.ui_theme_enum import UiThemeEnum
from authentik_openapi import util


class CurrentBrand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matched_domain: str=None, branding_title: str=None, branding_logo: str=None, branding_favicon: str=None, ui_footer_links: List[FooterLink]=None, ui_theme: UiThemeEnum=None, flow_authentication: str=None, flow_invalidation: str=None, flow_recovery: str=None, flow_unenrollment: str=None, flow_user_settings: str=None, flow_device_code: str=None, default_locale: str=None):
        """CurrentBrand - a model defined in OpenAPI

        :param matched_domain: The matched_domain of this CurrentBrand.
        :param branding_title: The branding_title of this CurrentBrand.
        :param branding_logo: The branding_logo of this CurrentBrand.
        :param branding_favicon: The branding_favicon of this CurrentBrand.
        :param ui_footer_links: The ui_footer_links of this CurrentBrand.
        :param ui_theme: The ui_theme of this CurrentBrand.
        :param flow_authentication: The flow_authentication of this CurrentBrand.
        :param flow_invalidation: The flow_invalidation of this CurrentBrand.
        :param flow_recovery: The flow_recovery of this CurrentBrand.
        :param flow_unenrollment: The flow_unenrollment of this CurrentBrand.
        :param flow_user_settings: The flow_user_settings of this CurrentBrand.
        :param flow_device_code: The flow_device_code of this CurrentBrand.
        :param default_locale: The default_locale of this CurrentBrand.
        """
        self.openapi_types = {
            'matched_domain': str,
            'branding_title': str,
            'branding_logo': str,
            'branding_favicon': str,
            'ui_footer_links': List[FooterLink],
            'ui_theme': UiThemeEnum,
            'flow_authentication': str,
            'flow_invalidation': str,
            'flow_recovery': str,
            'flow_unenrollment': str,
            'flow_user_settings': str,
            'flow_device_code': str,
            'default_locale': str
        }

        self.attribute_map = {
            'matched_domain': 'matched_domain',
            'branding_title': 'branding_title',
            'branding_logo': 'branding_logo',
            'branding_favicon': 'branding_favicon',
            'ui_footer_links': 'ui_footer_links',
            'ui_theme': 'ui_theme',
            'flow_authentication': 'flow_authentication',
            'flow_invalidation': 'flow_invalidation',
            'flow_recovery': 'flow_recovery',
            'flow_unenrollment': 'flow_unenrollment',
            'flow_user_settings': 'flow_user_settings',
            'flow_device_code': 'flow_device_code',
            'default_locale': 'default_locale'
        }

        self._matched_domain = matched_domain
        self._branding_title = branding_title
        self._branding_logo = branding_logo
        self._branding_favicon = branding_favicon
        self._ui_footer_links = ui_footer_links
        self._ui_theme = ui_theme
        self._flow_authentication = flow_authentication
        self._flow_invalidation = flow_invalidation
        self._flow_recovery = flow_recovery
        self._flow_unenrollment = flow_unenrollment
        self._flow_user_settings = flow_user_settings
        self._flow_device_code = flow_device_code
        self._default_locale = default_locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrentBrand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrentBrand of this CurrentBrand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matched_domain(self):
        """Gets the matched_domain of this CurrentBrand.


        :return: The matched_domain of this CurrentBrand.
        :rtype: str
        """
        return self._matched_domain

    @matched_domain.setter
    def matched_domain(self, matched_domain):
        """Sets the matched_domain of this CurrentBrand.


        :param matched_domain: The matched_domain of this CurrentBrand.
        :type matched_domain: str
        """
        if matched_domain is None:
            raise ValueError("Invalid value for `matched_domain`, must not be `None`")

        self._matched_domain = matched_domain

    @property
    def branding_title(self):
        """Gets the branding_title of this CurrentBrand.


        :return: The branding_title of this CurrentBrand.
        :rtype: str
        """
        return self._branding_title

    @branding_title.setter
    def branding_title(self, branding_title):
        """Sets the branding_title of this CurrentBrand.


        :param branding_title: The branding_title of this CurrentBrand.
        :type branding_title: str
        """
        if branding_title is None:
            raise ValueError("Invalid value for `branding_title`, must not be `None`")

        self._branding_title = branding_title

    @property
    def branding_logo(self):
        """Gets the branding_logo of this CurrentBrand.


        :return: The branding_logo of this CurrentBrand.
        :rtype: str
        """
        return self._branding_logo

    @branding_logo.setter
    def branding_logo(self, branding_logo):
        """Sets the branding_logo of this CurrentBrand.


        :param branding_logo: The branding_logo of this CurrentBrand.
        :type branding_logo: str
        """
        if branding_logo is None:
            raise ValueError("Invalid value for `branding_logo`, must not be `None`")

        self._branding_logo = branding_logo

    @property
    def branding_favicon(self):
        """Gets the branding_favicon of this CurrentBrand.


        :return: The branding_favicon of this CurrentBrand.
        :rtype: str
        """
        return self._branding_favicon

    @branding_favicon.setter
    def branding_favicon(self, branding_favicon):
        """Sets the branding_favicon of this CurrentBrand.


        :param branding_favicon: The branding_favicon of this CurrentBrand.
        :type branding_favicon: str
        """
        if branding_favicon is None:
            raise ValueError("Invalid value for `branding_favicon`, must not be `None`")

        self._branding_favicon = branding_favicon

    @property
    def ui_footer_links(self):
        """Gets the ui_footer_links of this CurrentBrand.


        :return: The ui_footer_links of this CurrentBrand.
        :rtype: List[FooterLink]
        """
        return self._ui_footer_links

    @ui_footer_links.setter
    def ui_footer_links(self, ui_footer_links):
        """Sets the ui_footer_links of this CurrentBrand.


        :param ui_footer_links: The ui_footer_links of this CurrentBrand.
        :type ui_footer_links: List[FooterLink]
        """
        if ui_footer_links is None:
            raise ValueError("Invalid value for `ui_footer_links`, must not be `None`")

        self._ui_footer_links = ui_footer_links

    @property
    def ui_theme(self):
        """Gets the ui_theme of this CurrentBrand.


        :return: The ui_theme of this CurrentBrand.
        :rtype: UiThemeEnum
        """
        return self._ui_theme

    @ui_theme.setter
    def ui_theme(self, ui_theme):
        """Sets the ui_theme of this CurrentBrand.


        :param ui_theme: The ui_theme of this CurrentBrand.
        :type ui_theme: UiThemeEnum
        """
        if ui_theme is None:
            raise ValueError("Invalid value for `ui_theme`, must not be `None`")

        self._ui_theme = ui_theme

    @property
    def flow_authentication(self):
        """Gets the flow_authentication of this CurrentBrand.


        :return: The flow_authentication of this CurrentBrand.
        :rtype: str
        """
        return self._flow_authentication

    @flow_authentication.setter
    def flow_authentication(self, flow_authentication):
        """Sets the flow_authentication of this CurrentBrand.


        :param flow_authentication: The flow_authentication of this CurrentBrand.
        :type flow_authentication: str
        """

        self._flow_authentication = flow_authentication

    @property
    def flow_invalidation(self):
        """Gets the flow_invalidation of this CurrentBrand.


        :return: The flow_invalidation of this CurrentBrand.
        :rtype: str
        """
        return self._flow_invalidation

    @flow_invalidation.setter
    def flow_invalidation(self, flow_invalidation):
        """Sets the flow_invalidation of this CurrentBrand.


        :param flow_invalidation: The flow_invalidation of this CurrentBrand.
        :type flow_invalidation: str
        """

        self._flow_invalidation = flow_invalidation

    @property
    def flow_recovery(self):
        """Gets the flow_recovery of this CurrentBrand.


        :return: The flow_recovery of this CurrentBrand.
        :rtype: str
        """
        return self._flow_recovery

    @flow_recovery.setter
    def flow_recovery(self, flow_recovery):
        """Sets the flow_recovery of this CurrentBrand.


        :param flow_recovery: The flow_recovery of this CurrentBrand.
        :type flow_recovery: str
        """

        self._flow_recovery = flow_recovery

    @property
    def flow_unenrollment(self):
        """Gets the flow_unenrollment of this CurrentBrand.


        :return: The flow_unenrollment of this CurrentBrand.
        :rtype: str
        """
        return self._flow_unenrollment

    @flow_unenrollment.setter
    def flow_unenrollment(self, flow_unenrollment):
        """Sets the flow_unenrollment of this CurrentBrand.


        :param flow_unenrollment: The flow_unenrollment of this CurrentBrand.
        :type flow_unenrollment: str
        """

        self._flow_unenrollment = flow_unenrollment

    @property
    def flow_user_settings(self):
        """Gets the flow_user_settings of this CurrentBrand.


        :return: The flow_user_settings of this CurrentBrand.
        :rtype: str
        """
        return self._flow_user_settings

    @flow_user_settings.setter
    def flow_user_settings(self, flow_user_settings):
        """Sets the flow_user_settings of this CurrentBrand.


        :param flow_user_settings: The flow_user_settings of this CurrentBrand.
        :type flow_user_settings: str
        """

        self._flow_user_settings = flow_user_settings

    @property
    def flow_device_code(self):
        """Gets the flow_device_code of this CurrentBrand.


        :return: The flow_device_code of this CurrentBrand.
        :rtype: str
        """
        return self._flow_device_code

    @flow_device_code.setter
    def flow_device_code(self, flow_device_code):
        """Sets the flow_device_code of this CurrentBrand.


        :param flow_device_code: The flow_device_code of this CurrentBrand.
        :type flow_device_code: str
        """

        self._flow_device_code = flow_device_code

    @property
    def default_locale(self):
        """Gets the default_locale of this CurrentBrand.


        :return: The default_locale of this CurrentBrand.
        :rtype: str
        """
        return self._default_locale

    @default_locale.setter
    def default_locale(self, default_locale):
        """Sets the default_locale of this CurrentBrand.


        :param default_locale: The default_locale of this CurrentBrand.
        :type default_locale: str
        """
        if default_locale is None:
            raise ValueError("Invalid value for `default_locale`, must not be `None`")

        self._default_locale = default_locale
