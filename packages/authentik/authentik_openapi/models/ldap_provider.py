# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.ldapapi_access_mode import LDAPAPIAccessMode
from authentik_openapi import util


class LDAPProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, authentication_flow: str=None, authorization_flow: str=None, property_mappings: List[str]=None, component: str=None, assigned_application_slug: str=None, assigned_application_name: str=None, assigned_backchannel_application_slug: str=None, assigned_backchannel_application_name: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, base_dn: str=None, certificate: str=None, tls_server_name: str=None, uid_start_number: int=None, gid_start_number: int=None, outpost_set: List[str]=None, search_mode: LDAPAPIAccessMode=None, bind_mode: LDAPAPIAccessMode=None, mfa_support: bool=None):
        """LDAPProvider - a model defined in OpenAPI

        :param pk: The pk of this LDAPProvider.
        :param name: The name of this LDAPProvider.
        :param authentication_flow: The authentication_flow of this LDAPProvider.
        :param authorization_flow: The authorization_flow of this LDAPProvider.
        :param property_mappings: The property_mappings of this LDAPProvider.
        :param component: The component of this LDAPProvider.
        :param assigned_application_slug: The assigned_application_slug of this LDAPProvider.
        :param assigned_application_name: The assigned_application_name of this LDAPProvider.
        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this LDAPProvider.
        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this LDAPProvider.
        :param verbose_name: The verbose_name of this LDAPProvider.
        :param verbose_name_plural: The verbose_name_plural of this LDAPProvider.
        :param meta_model_name: The meta_model_name of this LDAPProvider.
        :param base_dn: The base_dn of this LDAPProvider.
        :param certificate: The certificate of this LDAPProvider.
        :param tls_server_name: The tls_server_name of this LDAPProvider.
        :param uid_start_number: The uid_start_number of this LDAPProvider.
        :param gid_start_number: The gid_start_number of this LDAPProvider.
        :param outpost_set: The outpost_set of this LDAPProvider.
        :param search_mode: The search_mode of this LDAPProvider.
        :param bind_mode: The bind_mode of this LDAPProvider.
        :param mfa_support: The mfa_support of this LDAPProvider.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'property_mappings': List[str],
            'component': str,
            'assigned_application_slug': str,
            'assigned_application_name': str,
            'assigned_backchannel_application_slug': str,
            'assigned_backchannel_application_name': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'base_dn': str,
            'certificate': str,
            'tls_server_name': str,
            'uid_start_number': int,
            'gid_start_number': int,
            'outpost_set': List[str],
            'search_mode': LDAPAPIAccessMode,
            'bind_mode': LDAPAPIAccessMode,
            'mfa_support': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'property_mappings': 'property_mappings',
            'component': 'component',
            'assigned_application_slug': 'assigned_application_slug',
            'assigned_application_name': 'assigned_application_name',
            'assigned_backchannel_application_slug': 'assigned_backchannel_application_slug',
            'assigned_backchannel_application_name': 'assigned_backchannel_application_name',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'base_dn': 'base_dn',
            'certificate': 'certificate',
            'tls_server_name': 'tls_server_name',
            'uid_start_number': 'uid_start_number',
            'gid_start_number': 'gid_start_number',
            'outpost_set': 'outpost_set',
            'search_mode': 'search_mode',
            'bind_mode': 'bind_mode',
            'mfa_support': 'mfa_support'
        }

        self._pk = pk
        self._name = name
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._property_mappings = property_mappings
        self._component = component
        self._assigned_application_slug = assigned_application_slug
        self._assigned_application_name = assigned_application_name
        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug
        self._assigned_backchannel_application_name = assigned_backchannel_application_name
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._base_dn = base_dn
        self._certificate = certificate
        self._tls_server_name = tls_server_name
        self._uid_start_number = uid_start_number
        self._gid_start_number = gid_start_number
        self._outpost_set = outpost_set
        self._search_mode = search_mode
        self._bind_mode = bind_mode
        self._mfa_support = mfa_support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LDAPProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LDAPProvider of this LDAPProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this LDAPProvider.


        :return: The pk of this LDAPProvider.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this LDAPProvider.


        :param pk: The pk of this LDAPProvider.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this LDAPProvider.


        :return: The name of this LDAPProvider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LDAPProvider.


        :param name: The name of this LDAPProvider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this LDAPProvider.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this LDAPProvider.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this LDAPProvider.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this LDAPProvider.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this LDAPProvider.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this LDAPProvider.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this LDAPProvider.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this LDAPProvider.
        :type authorization_flow: str
        """
        if authorization_flow is None:
            raise ValueError("Invalid value for `authorization_flow`, must not be `None`")

        self._authorization_flow = authorization_flow

    @property
    def property_mappings(self):
        """Gets the property_mappings of this LDAPProvider.


        :return: The property_mappings of this LDAPProvider.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this LDAPProvider.


        :param property_mappings: The property_mappings of this LDAPProvider.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def component(self):
        """Gets the component of this LDAPProvider.

        Get object component so that we know how to edit the object

        :return: The component of this LDAPProvider.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this LDAPProvider.

        Get object component so that we know how to edit the object

        :param component: The component of this LDAPProvider.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def assigned_application_slug(self):
        """Gets the assigned_application_slug of this LDAPProvider.

        Internal application name, used in URLs.

        :return: The assigned_application_slug of this LDAPProvider.
        :rtype: str
        """
        return self._assigned_application_slug

    @assigned_application_slug.setter
    def assigned_application_slug(self, assigned_application_slug):
        """Sets the assigned_application_slug of this LDAPProvider.

        Internal application name, used in URLs.

        :param assigned_application_slug: The assigned_application_slug of this LDAPProvider.
        :type assigned_application_slug: str
        """
        if assigned_application_slug is None:
            raise ValueError("Invalid value for `assigned_application_slug`, must not be `None`")

        self._assigned_application_slug = assigned_application_slug

    @property
    def assigned_application_name(self):
        """Gets the assigned_application_name of this LDAPProvider.

        Application's display Name.

        :return: The assigned_application_name of this LDAPProvider.
        :rtype: str
        """
        return self._assigned_application_name

    @assigned_application_name.setter
    def assigned_application_name(self, assigned_application_name):
        """Sets the assigned_application_name of this LDAPProvider.

        Application's display Name.

        :param assigned_application_name: The assigned_application_name of this LDAPProvider.
        :type assigned_application_name: str
        """
        if assigned_application_name is None:
            raise ValueError("Invalid value for `assigned_application_name`, must not be `None`")

        self._assigned_application_name = assigned_application_name

    @property
    def assigned_backchannel_application_slug(self):
        """Gets the assigned_backchannel_application_slug of this LDAPProvider.

        Internal application name, used in URLs.

        :return: The assigned_backchannel_application_slug of this LDAPProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_slug

    @assigned_backchannel_application_slug.setter
    def assigned_backchannel_application_slug(self, assigned_backchannel_application_slug):
        """Sets the assigned_backchannel_application_slug of this LDAPProvider.

        Internal application name, used in URLs.

        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this LDAPProvider.
        :type assigned_backchannel_application_slug: str
        """
        if assigned_backchannel_application_slug is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_slug`, must not be `None`")

        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug

    @property
    def assigned_backchannel_application_name(self):
        """Gets the assigned_backchannel_application_name of this LDAPProvider.

        Application's display Name.

        :return: The assigned_backchannel_application_name of this LDAPProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_name

    @assigned_backchannel_application_name.setter
    def assigned_backchannel_application_name(self, assigned_backchannel_application_name):
        """Sets the assigned_backchannel_application_name of this LDAPProvider.

        Application's display Name.

        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this LDAPProvider.
        :type assigned_backchannel_application_name: str
        """
        if assigned_backchannel_application_name is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_name`, must not be `None`")

        self._assigned_backchannel_application_name = assigned_backchannel_application_name

    @property
    def verbose_name(self):
        """Gets the verbose_name of this LDAPProvider.

        Return object's verbose_name

        :return: The verbose_name of this LDAPProvider.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this LDAPProvider.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this LDAPProvider.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this LDAPProvider.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this LDAPProvider.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this LDAPProvider.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this LDAPProvider.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this LDAPProvider.

        Return internal model name

        :return: The meta_model_name of this LDAPProvider.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this LDAPProvider.

        Return internal model name

        :param meta_model_name: The meta_model_name of this LDAPProvider.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def base_dn(self):
        """Gets the base_dn of this LDAPProvider.

        DN under which objects are accessible.

        :return: The base_dn of this LDAPProvider.
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this LDAPProvider.

        DN under which objects are accessible.

        :param base_dn: The base_dn of this LDAPProvider.
        :type base_dn: str
        """

        self._base_dn = base_dn

    @property
    def certificate(self):
        """Gets the certificate of this LDAPProvider.


        :return: The certificate of this LDAPProvider.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this LDAPProvider.


        :param certificate: The certificate of this LDAPProvider.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def tls_server_name(self):
        """Gets the tls_server_name of this LDAPProvider.


        :return: The tls_server_name of this LDAPProvider.
        :rtype: str
        """
        return self._tls_server_name

    @tls_server_name.setter
    def tls_server_name(self, tls_server_name):
        """Sets the tls_server_name of this LDAPProvider.


        :param tls_server_name: The tls_server_name of this LDAPProvider.
        :type tls_server_name: str
        """

        self._tls_server_name = tls_server_name

    @property
    def uid_start_number(self):
        """Gets the uid_start_number of this LDAPProvider.

        The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber

        :return: The uid_start_number of this LDAPProvider.
        :rtype: int
        """
        return self._uid_start_number

    @uid_start_number.setter
    def uid_start_number(self, uid_start_number):
        """Sets the uid_start_number of this LDAPProvider.

        The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber

        :param uid_start_number: The uid_start_number of this LDAPProvider.
        :type uid_start_number: int
        """
        if uid_start_number is not None and uid_start_number > 2147483647:
            raise ValueError("Invalid value for `uid_start_number`, must be a value less than or equal to `2147483647`")
        if uid_start_number is not None and uid_start_number < -2147483648:
            raise ValueError("Invalid value for `uid_start_number`, must be a value greater than or equal to `-2147483648`")

        self._uid_start_number = uid_start_number

    @property
    def gid_start_number(self):
        """Gets the gid_start_number of this LDAPProvider.

        The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber

        :return: The gid_start_number of this LDAPProvider.
        :rtype: int
        """
        return self._gid_start_number

    @gid_start_number.setter
    def gid_start_number(self, gid_start_number):
        """Sets the gid_start_number of this LDAPProvider.

        The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber

        :param gid_start_number: The gid_start_number of this LDAPProvider.
        :type gid_start_number: int
        """
        if gid_start_number is not None and gid_start_number > 2147483647:
            raise ValueError("Invalid value for `gid_start_number`, must be a value less than or equal to `2147483647`")
        if gid_start_number is not None and gid_start_number < -2147483648:
            raise ValueError("Invalid value for `gid_start_number`, must be a value greater than or equal to `-2147483648`")

        self._gid_start_number = gid_start_number

    @property
    def outpost_set(self):
        """Gets the outpost_set of this LDAPProvider.


        :return: The outpost_set of this LDAPProvider.
        :rtype: List[str]
        """
        return self._outpost_set

    @outpost_set.setter
    def outpost_set(self, outpost_set):
        """Sets the outpost_set of this LDAPProvider.


        :param outpost_set: The outpost_set of this LDAPProvider.
        :type outpost_set: List[str]
        """
        if outpost_set is None:
            raise ValueError("Invalid value for `outpost_set`, must not be `None`")

        self._outpost_set = outpost_set

    @property
    def search_mode(self):
        """Gets the search_mode of this LDAPProvider.


        :return: The search_mode of this LDAPProvider.
        :rtype: LDAPAPIAccessMode
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this LDAPProvider.


        :param search_mode: The search_mode of this LDAPProvider.
        :type search_mode: LDAPAPIAccessMode
        """

        self._search_mode = search_mode

    @property
    def bind_mode(self):
        """Gets the bind_mode of this LDAPProvider.


        :return: The bind_mode of this LDAPProvider.
        :rtype: LDAPAPIAccessMode
        """
        return self._bind_mode

    @bind_mode.setter
    def bind_mode(self, bind_mode):
        """Sets the bind_mode of this LDAPProvider.


        :param bind_mode: The bind_mode of this LDAPProvider.
        :type bind_mode: LDAPAPIAccessMode
        """

        self._bind_mode = bind_mode

    @property
    def mfa_support(self):
        """Gets the mfa_support of this LDAPProvider.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :return: The mfa_support of this LDAPProvider.
        :rtype: bool
        """
        return self._mfa_support

    @mfa_support.setter
    def mfa_support(self, mfa_support):
        """Sets the mfa_support of this LDAPProvider.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :param mfa_support: The mfa_support of this LDAPProvider.
        :type mfa_support: bool
        """

        self._mfa_support = mfa_support
