# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.group_matching_mode_enum import GroupMatchingModeEnum
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
from authentik_openapi.models.provider_type_enum import ProviderTypeEnum
from authentik_openapi.models.source_type import SourceType
from authentik_openapi.models.user_matching_mode_enum import UserMatchingModeEnum
import re
from authentik_openapi import util


class OAuthSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, slug: str=None, enabled: bool=None, authentication_flow: str=None, enrollment_flow: str=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, policy_engine_mode: PolicyEngineMode=None, user_matching_mode: UserMatchingModeEnum=None, managed: str=None, user_path_template: str=None, icon: str=None, group_matching_mode: GroupMatchingModeEnum=None, provider_type: ProviderTypeEnum=None, request_token_url: str=None, authorization_url: str=None, access_token_url: str=None, profile_url: str=None, consumer_key: str=None, callback_url: str=None, additional_scopes: str=None, type: SourceType=None, oidc_well_known_url: str=None, oidc_jwks_url: str=None, oidc_jwks: object=None):
        """OAuthSource - a model defined in OpenAPI

        :param pk: The pk of this OAuthSource.
        :param name: The name of this OAuthSource.
        :param slug: The slug of this OAuthSource.
        :param enabled: The enabled of this OAuthSource.
        :param authentication_flow: The authentication_flow of this OAuthSource.
        :param enrollment_flow: The enrollment_flow of this OAuthSource.
        :param user_property_mappings: The user_property_mappings of this OAuthSource.
        :param group_property_mappings: The group_property_mappings of this OAuthSource.
        :param component: The component of this OAuthSource.
        :param verbose_name: The verbose_name of this OAuthSource.
        :param verbose_name_plural: The verbose_name_plural of this OAuthSource.
        :param meta_model_name: The meta_model_name of this OAuthSource.
        :param policy_engine_mode: The policy_engine_mode of this OAuthSource.
        :param user_matching_mode: The user_matching_mode of this OAuthSource.
        :param managed: The managed of this OAuthSource.
        :param user_path_template: The user_path_template of this OAuthSource.
        :param icon: The icon of this OAuthSource.
        :param group_matching_mode: The group_matching_mode of this OAuthSource.
        :param provider_type: The provider_type of this OAuthSource.
        :param request_token_url: The request_token_url of this OAuthSource.
        :param authorization_url: The authorization_url of this OAuthSource.
        :param access_token_url: The access_token_url of this OAuthSource.
        :param profile_url: The profile_url of this OAuthSource.
        :param consumer_key: The consumer_key of this OAuthSource.
        :param callback_url: The callback_url of this OAuthSource.
        :param additional_scopes: The additional_scopes of this OAuthSource.
        :param type: The type of this OAuthSource.
        :param oidc_well_known_url: The oidc_well_known_url of this OAuthSource.
        :param oidc_jwks_url: The oidc_jwks_url of this OAuthSource.
        :param oidc_jwks: The oidc_jwks of this OAuthSource.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'slug': str,
            'enabled': bool,
            'authentication_flow': str,
            'enrollment_flow': str,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'policy_engine_mode': PolicyEngineMode,
            'user_matching_mode': UserMatchingModeEnum,
            'managed': str,
            'user_path_template': str,
            'icon': str,
            'group_matching_mode': GroupMatchingModeEnum,
            'provider_type': ProviderTypeEnum,
            'request_token_url': str,
            'authorization_url': str,
            'access_token_url': str,
            'profile_url': str,
            'consumer_key': str,
            'callback_url': str,
            'additional_scopes': str,
            'type': SourceType,
            'oidc_well_known_url': str,
            'oidc_jwks_url': str,
            'oidc_jwks': object
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'authentication_flow': 'authentication_flow',
            'enrollment_flow': 'enrollment_flow',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'policy_engine_mode': 'policy_engine_mode',
            'user_matching_mode': 'user_matching_mode',
            'managed': 'managed',
            'user_path_template': 'user_path_template',
            'icon': 'icon',
            'group_matching_mode': 'group_matching_mode',
            'provider_type': 'provider_type',
            'request_token_url': 'request_token_url',
            'authorization_url': 'authorization_url',
            'access_token_url': 'access_token_url',
            'profile_url': 'profile_url',
            'consumer_key': 'consumer_key',
            'callback_url': 'callback_url',
            'additional_scopes': 'additional_scopes',
            'type': 'type',
            'oidc_well_known_url': 'oidc_well_known_url',
            'oidc_jwks_url': 'oidc_jwks_url',
            'oidc_jwks': 'oidc_jwks'
        }

        self._pk = pk
        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._authentication_flow = authentication_flow
        self._enrollment_flow = enrollment_flow
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._policy_engine_mode = policy_engine_mode
        self._user_matching_mode = user_matching_mode
        self._managed = managed
        self._user_path_template = user_path_template
        self._icon = icon
        self._group_matching_mode = group_matching_mode
        self._provider_type = provider_type
        self._request_token_url = request_token_url
        self._authorization_url = authorization_url
        self._access_token_url = access_token_url
        self._profile_url = profile_url
        self._consumer_key = consumer_key
        self._callback_url = callback_url
        self._additional_scopes = additional_scopes
        self._type = type
        self._oidc_well_known_url = oidc_well_known_url
        self._oidc_jwks_url = oidc_jwks_url
        self._oidc_jwks = oidc_jwks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuthSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuthSource of this OAuthSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this OAuthSource.


        :return: The pk of this OAuthSource.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this OAuthSource.


        :param pk: The pk of this OAuthSource.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this OAuthSource.

        Source's display Name.

        :return: The name of this OAuthSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuthSource.

        Source's display Name.

        :param name: The name of this OAuthSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this OAuthSource.

        Internal source name, used in URLs.

        :return: The slug of this OAuthSource.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this OAuthSource.

        Internal source name, used in URLs.

        :param slug: The slug of this OAuthSource.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this OAuthSource.


        :return: The enabled of this OAuthSource.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OAuthSource.


        :param enabled: The enabled of this OAuthSource.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this OAuthSource.

        Flow to use when authenticating existing users.

        :return: The authentication_flow of this OAuthSource.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this OAuthSource.

        Flow to use when authenticating existing users.

        :param authentication_flow: The authentication_flow of this OAuthSource.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this OAuthSource.

        Flow to use when enrolling new users.

        :return: The enrollment_flow of this OAuthSource.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this OAuthSource.

        Flow to use when enrolling new users.

        :param enrollment_flow: The enrollment_flow of this OAuthSource.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this OAuthSource.


        :return: The user_property_mappings of this OAuthSource.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this OAuthSource.


        :param user_property_mappings: The user_property_mappings of this OAuthSource.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this OAuthSource.


        :return: The group_property_mappings of this OAuthSource.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this OAuthSource.


        :param group_property_mappings: The group_property_mappings of this OAuthSource.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def component(self):
        """Gets the component of this OAuthSource.

        Get object component so that we know how to edit the object

        :return: The component of this OAuthSource.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this OAuthSource.

        Get object component so that we know how to edit the object

        :param component: The component of this OAuthSource.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this OAuthSource.

        Return object's verbose_name

        :return: The verbose_name of this OAuthSource.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this OAuthSource.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this OAuthSource.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this OAuthSource.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this OAuthSource.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this OAuthSource.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this OAuthSource.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this OAuthSource.

        Return internal model name

        :return: The meta_model_name of this OAuthSource.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this OAuthSource.

        Return internal model name

        :param meta_model_name: The meta_model_name of this OAuthSource.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this OAuthSource.


        :return: The policy_engine_mode of this OAuthSource.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this OAuthSource.


        :param policy_engine_mode: The policy_engine_mode of this OAuthSource.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def user_matching_mode(self):
        """Gets the user_matching_mode of this OAuthSource.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :return: The user_matching_mode of this OAuthSource.
        :rtype: UserMatchingModeEnum
        """
        return self._user_matching_mode

    @user_matching_mode.setter
    def user_matching_mode(self, user_matching_mode):
        """Sets the user_matching_mode of this OAuthSource.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :param user_matching_mode: The user_matching_mode of this OAuthSource.
        :type user_matching_mode: UserMatchingModeEnum
        """

        self._user_matching_mode = user_matching_mode

    @property
    def managed(self):
        """Gets the managed of this OAuthSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this OAuthSource.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this OAuthSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this OAuthSource.
        :type managed: str
        """
        if managed is None:
            raise ValueError("Invalid value for `managed`, must not be `None`")

        self._managed = managed

    @property
    def user_path_template(self):
        """Gets the user_path_template of this OAuthSource.


        :return: The user_path_template of this OAuthSource.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this OAuthSource.


        :param user_path_template: The user_path_template of this OAuthSource.
        :type user_path_template: str
        """

        self._user_path_template = user_path_template

    @property
    def icon(self):
        """Gets the icon of this OAuthSource.


        :return: The icon of this OAuthSource.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this OAuthSource.


        :param icon: The icon of this OAuthSource.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def group_matching_mode(self):
        """Gets the group_matching_mode of this OAuthSource.

        How the source determines if an existing group should be used or a new group created.

        :return: The group_matching_mode of this OAuthSource.
        :rtype: GroupMatchingModeEnum
        """
        return self._group_matching_mode

    @group_matching_mode.setter
    def group_matching_mode(self, group_matching_mode):
        """Sets the group_matching_mode of this OAuthSource.

        How the source determines if an existing group should be used or a new group created.

        :param group_matching_mode: The group_matching_mode of this OAuthSource.
        :type group_matching_mode: GroupMatchingModeEnum
        """

        self._group_matching_mode = group_matching_mode

    @property
    def provider_type(self):
        """Gets the provider_type of this OAuthSource.


        :return: The provider_type of this OAuthSource.
        :rtype: ProviderTypeEnum
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this OAuthSource.


        :param provider_type: The provider_type of this OAuthSource.
        :type provider_type: ProviderTypeEnum
        """
        if provider_type is None:
            raise ValueError("Invalid value for `provider_type`, must not be `None`")

        self._provider_type = provider_type

    @property
    def request_token_url(self):
        """Gets the request_token_url of this OAuthSource.

        URL used to request the initial token. This URL is only required for OAuth 1.

        :return: The request_token_url of this OAuthSource.
        :rtype: str
        """
        return self._request_token_url

    @request_token_url.setter
    def request_token_url(self, request_token_url):
        """Sets the request_token_url of this OAuthSource.

        URL used to request the initial token. This URL is only required for OAuth 1.

        :param request_token_url: The request_token_url of this OAuthSource.
        :type request_token_url: str
        """
        if request_token_url is not None and len(request_token_url) > 255:
            raise ValueError("Invalid value for `request_token_url`, length must be less than or equal to `255`")

        self._request_token_url = request_token_url

    @property
    def authorization_url(self):
        """Gets the authorization_url of this OAuthSource.

        URL the user is redirect to to conest the flow.

        :return: The authorization_url of this OAuthSource.
        :rtype: str
        """
        return self._authorization_url

    @authorization_url.setter
    def authorization_url(self, authorization_url):
        """Sets the authorization_url of this OAuthSource.

        URL the user is redirect to to conest the flow.

        :param authorization_url: The authorization_url of this OAuthSource.
        :type authorization_url: str
        """
        if authorization_url is not None and len(authorization_url) > 255:
            raise ValueError("Invalid value for `authorization_url`, length must be less than or equal to `255`")

        self._authorization_url = authorization_url

    @property
    def access_token_url(self):
        """Gets the access_token_url of this OAuthSource.

        URL used by authentik to retrieve tokens.

        :return: The access_token_url of this OAuthSource.
        :rtype: str
        """
        return self._access_token_url

    @access_token_url.setter
    def access_token_url(self, access_token_url):
        """Sets the access_token_url of this OAuthSource.

        URL used by authentik to retrieve tokens.

        :param access_token_url: The access_token_url of this OAuthSource.
        :type access_token_url: str
        """
        if access_token_url is not None and len(access_token_url) > 255:
            raise ValueError("Invalid value for `access_token_url`, length must be less than or equal to `255`")

        self._access_token_url = access_token_url

    @property
    def profile_url(self):
        """Gets the profile_url of this OAuthSource.

        URL used by authentik to get user information.

        :return: The profile_url of this OAuthSource.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this OAuthSource.

        URL used by authentik to get user information.

        :param profile_url: The profile_url of this OAuthSource.
        :type profile_url: str
        """
        if profile_url is not None and len(profile_url) > 255:
            raise ValueError("Invalid value for `profile_url`, length must be less than or equal to `255`")

        self._profile_url = profile_url

    @property
    def consumer_key(self):
        """Gets the consumer_key of this OAuthSource.


        :return: The consumer_key of this OAuthSource.
        :rtype: str
        """
        return self._consumer_key

    @consumer_key.setter
    def consumer_key(self, consumer_key):
        """Sets the consumer_key of this OAuthSource.


        :param consumer_key: The consumer_key of this OAuthSource.
        :type consumer_key: str
        """
        if consumer_key is None:
            raise ValueError("Invalid value for `consumer_key`, must not be `None`")

        self._consumer_key = consumer_key

    @property
    def callback_url(self):
        """Gets the callback_url of this OAuthSource.

        Get OAuth Callback URL

        :return: The callback_url of this OAuthSource.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this OAuthSource.

        Get OAuth Callback URL

        :param callback_url: The callback_url of this OAuthSource.
        :type callback_url: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")

        self._callback_url = callback_url

    @property
    def additional_scopes(self):
        """Gets the additional_scopes of this OAuthSource.


        :return: The additional_scopes of this OAuthSource.
        :rtype: str
        """
        return self._additional_scopes

    @additional_scopes.setter
    def additional_scopes(self, additional_scopes):
        """Sets the additional_scopes of this OAuthSource.


        :param additional_scopes: The additional_scopes of this OAuthSource.
        :type additional_scopes: str
        """

        self._additional_scopes = additional_scopes

    @property
    def type(self):
        """Gets the type of this OAuthSource.


        :return: The type of this OAuthSource.
        :rtype: SourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OAuthSource.


        :param type: The type of this OAuthSource.
        :type type: SourceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def oidc_well_known_url(self):
        """Gets the oidc_well_known_url of this OAuthSource.


        :return: The oidc_well_known_url of this OAuthSource.
        :rtype: str
        """
        return self._oidc_well_known_url

    @oidc_well_known_url.setter
    def oidc_well_known_url(self, oidc_well_known_url):
        """Sets the oidc_well_known_url of this OAuthSource.


        :param oidc_well_known_url: The oidc_well_known_url of this OAuthSource.
        :type oidc_well_known_url: str
        """

        self._oidc_well_known_url = oidc_well_known_url

    @property
    def oidc_jwks_url(self):
        """Gets the oidc_jwks_url of this OAuthSource.


        :return: The oidc_jwks_url of this OAuthSource.
        :rtype: str
        """
        return self._oidc_jwks_url

    @oidc_jwks_url.setter
    def oidc_jwks_url(self, oidc_jwks_url):
        """Sets the oidc_jwks_url of this OAuthSource.


        :param oidc_jwks_url: The oidc_jwks_url of this OAuthSource.
        :type oidc_jwks_url: str
        """

        self._oidc_jwks_url = oidc_jwks_url

    @property
    def oidc_jwks(self):
        """Gets the oidc_jwks of this OAuthSource.


        :return: The oidc_jwks of this OAuthSource.
        :rtype: object
        """
        return self._oidc_jwks

    @oidc_jwks.setter
    def oidc_jwks(self, oidc_jwks):
        """Sets the oidc_jwks of this OAuthSource.


        :param oidc_jwks: The oidc_jwks of this OAuthSource.
        :type oidc_jwks: object
        """

        self._oidc_jwks = oidc_jwks
