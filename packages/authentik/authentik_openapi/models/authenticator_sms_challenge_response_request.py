# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class AuthenticatorSMSChallengeResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: str='ak-stage-authenticator-sms', code: int=None, phone_number: str=None):
        """AuthenticatorSMSChallengeResponseRequest - a model defined in OpenAPI

        :param component: The component of this AuthenticatorSMSChallengeResponseRequest.
        :param code: The code of this AuthenticatorSMSChallengeResponseRequest.
        :param phone_number: The phone_number of this AuthenticatorSMSChallengeResponseRequest.
        """
        self.openapi_types = {
            'component': str,
            'code': int,
            'phone_number': str
        }

        self.attribute_map = {
            'component': 'component',
            'code': 'code',
            'phone_number': 'phone_number'
        }

        self._component = component
        self._code = code
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatorSMSChallengeResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatorSMSChallengeResponseRequest of this AuthenticatorSMSChallengeResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this AuthenticatorSMSChallengeResponseRequest.


        :return: The component of this AuthenticatorSMSChallengeResponseRequest.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this AuthenticatorSMSChallengeResponseRequest.


        :param component: The component of this AuthenticatorSMSChallengeResponseRequest.
        :type component: str
        """
        if component is not None and len(component) < 1:
            raise ValueError("Invalid value for `component`, length must be greater than or equal to `1`")

        self._component = component

    @property
    def code(self):
        """Gets the code of this AuthenticatorSMSChallengeResponseRequest.


        :return: The code of this AuthenticatorSMSChallengeResponseRequest.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AuthenticatorSMSChallengeResponseRequest.


        :param code: The code of this AuthenticatorSMSChallengeResponseRequest.
        :type code: int
        """

        self._code = code

    @property
    def phone_number(self):
        """Gets the phone_number of this AuthenticatorSMSChallengeResponseRequest.


        :return: The phone_number of this AuthenticatorSMSChallengeResponseRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this AuthenticatorSMSChallengeResponseRequest.


        :param phone_number: The phone_number of this AuthenticatorSMSChallengeResponseRequest.
        :type phone_number: str
        """
        if phone_number is not None and len(phone_number) < 1:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `1`")

        self._phone_number = phone_number
