# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class SCIMProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, property_mappings: List[str]=None, property_mappings_group: List[str]=None, component: str=None, assigned_backchannel_application_slug: str=None, assigned_backchannel_application_name: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, url: str=None, token: str=None, exclude_users_service_account: bool=None, filter_group: str=None):
        """SCIMProvider - a model defined in OpenAPI

        :param pk: The pk of this SCIMProvider.
        :param name: The name of this SCIMProvider.
        :param property_mappings: The property_mappings of this SCIMProvider.
        :param property_mappings_group: The property_mappings_group of this SCIMProvider.
        :param component: The component of this SCIMProvider.
        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this SCIMProvider.
        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this SCIMProvider.
        :param verbose_name: The verbose_name of this SCIMProvider.
        :param verbose_name_plural: The verbose_name_plural of this SCIMProvider.
        :param meta_model_name: The meta_model_name of this SCIMProvider.
        :param url: The url of this SCIMProvider.
        :param token: The token of this SCIMProvider.
        :param exclude_users_service_account: The exclude_users_service_account of this SCIMProvider.
        :param filter_group: The filter_group of this SCIMProvider.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'property_mappings': List[str],
            'property_mappings_group': List[str],
            'component': str,
            'assigned_backchannel_application_slug': str,
            'assigned_backchannel_application_name': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'url': str,
            'token': str,
            'exclude_users_service_account': bool,
            'filter_group': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'property_mappings': 'property_mappings',
            'property_mappings_group': 'property_mappings_group',
            'component': 'component',
            'assigned_backchannel_application_slug': 'assigned_backchannel_application_slug',
            'assigned_backchannel_application_name': 'assigned_backchannel_application_name',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'url': 'url',
            'token': 'token',
            'exclude_users_service_account': 'exclude_users_service_account',
            'filter_group': 'filter_group'
        }

        self._pk = pk
        self._name = name
        self._property_mappings = property_mappings
        self._property_mappings_group = property_mappings_group
        self._component = component
        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug
        self._assigned_backchannel_application_name = assigned_backchannel_application_name
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._url = url
        self._token = token
        self._exclude_users_service_account = exclude_users_service_account
        self._filter_group = filter_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SCIMProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SCIMProvider of this SCIMProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this SCIMProvider.


        :return: The pk of this SCIMProvider.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this SCIMProvider.


        :param pk: The pk of this SCIMProvider.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this SCIMProvider.


        :return: The name of this SCIMProvider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SCIMProvider.


        :param name: The name of this SCIMProvider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def property_mappings(self):
        """Gets the property_mappings of this SCIMProvider.


        :return: The property_mappings of this SCIMProvider.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this SCIMProvider.


        :param property_mappings: The property_mappings of this SCIMProvider.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def property_mappings_group(self):
        """Gets the property_mappings_group of this SCIMProvider.

        Property mappings used for group creation/updating.

        :return: The property_mappings_group of this SCIMProvider.
        :rtype: List[str]
        """
        return self._property_mappings_group

    @property_mappings_group.setter
    def property_mappings_group(self, property_mappings_group):
        """Sets the property_mappings_group of this SCIMProvider.

        Property mappings used for group creation/updating.

        :param property_mappings_group: The property_mappings_group of this SCIMProvider.
        :type property_mappings_group: List[str]
        """

        self._property_mappings_group = property_mappings_group

    @property
    def component(self):
        """Gets the component of this SCIMProvider.

        Get object component so that we know how to edit the object

        :return: The component of this SCIMProvider.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this SCIMProvider.

        Get object component so that we know how to edit the object

        :param component: The component of this SCIMProvider.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def assigned_backchannel_application_slug(self):
        """Gets the assigned_backchannel_application_slug of this SCIMProvider.

        Internal application name, used in URLs.

        :return: The assigned_backchannel_application_slug of this SCIMProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_slug

    @assigned_backchannel_application_slug.setter
    def assigned_backchannel_application_slug(self, assigned_backchannel_application_slug):
        """Sets the assigned_backchannel_application_slug of this SCIMProvider.

        Internal application name, used in URLs.

        :param assigned_backchannel_application_slug: The assigned_backchannel_application_slug of this SCIMProvider.
        :type assigned_backchannel_application_slug: str
        """
        if assigned_backchannel_application_slug is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_slug`, must not be `None`")

        self._assigned_backchannel_application_slug = assigned_backchannel_application_slug

    @property
    def assigned_backchannel_application_name(self):
        """Gets the assigned_backchannel_application_name of this SCIMProvider.

        Application's display Name.

        :return: The assigned_backchannel_application_name of this SCIMProvider.
        :rtype: str
        """
        return self._assigned_backchannel_application_name

    @assigned_backchannel_application_name.setter
    def assigned_backchannel_application_name(self, assigned_backchannel_application_name):
        """Sets the assigned_backchannel_application_name of this SCIMProvider.

        Application's display Name.

        :param assigned_backchannel_application_name: The assigned_backchannel_application_name of this SCIMProvider.
        :type assigned_backchannel_application_name: str
        """
        if assigned_backchannel_application_name is None:
            raise ValueError("Invalid value for `assigned_backchannel_application_name`, must not be `None`")

        self._assigned_backchannel_application_name = assigned_backchannel_application_name

    @property
    def verbose_name(self):
        """Gets the verbose_name of this SCIMProvider.

        Return object's verbose_name

        :return: The verbose_name of this SCIMProvider.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this SCIMProvider.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this SCIMProvider.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this SCIMProvider.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this SCIMProvider.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this SCIMProvider.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this SCIMProvider.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this SCIMProvider.

        Return internal model name

        :return: The meta_model_name of this SCIMProvider.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this SCIMProvider.

        Return internal model name

        :param meta_model_name: The meta_model_name of this SCIMProvider.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def url(self):
        """Gets the url of this SCIMProvider.

        Base URL to SCIM requests, usually ends in /v2

        :return: The url of this SCIMProvider.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SCIMProvider.

        Base URL to SCIM requests, usually ends in /v2

        :param url: The url of this SCIMProvider.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def token(self):
        """Gets the token of this SCIMProvider.

        Authentication token

        :return: The token of this SCIMProvider.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SCIMProvider.

        Authentication token

        :param token: The token of this SCIMProvider.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def exclude_users_service_account(self):
        """Gets the exclude_users_service_account of this SCIMProvider.


        :return: The exclude_users_service_account of this SCIMProvider.
        :rtype: bool
        """
        return self._exclude_users_service_account

    @exclude_users_service_account.setter
    def exclude_users_service_account(self, exclude_users_service_account):
        """Sets the exclude_users_service_account of this SCIMProvider.


        :param exclude_users_service_account: The exclude_users_service_account of this SCIMProvider.
        :type exclude_users_service_account: bool
        """

        self._exclude_users_service_account = exclude_users_service_account

    @property
    def filter_group(self):
        """Gets the filter_group of this SCIMProvider.


        :return: The filter_group of this SCIMProvider.
        :rtype: str
        """
        return self._filter_group

    @filter_group.setter
    def filter_group(self, filter_group):
        """Sets the filter_group of this SCIMProvider.


        :param filter_group: The filter_group of this SCIMProvider.
        :type filter_group: str
        """

        self._filter_group = filter_group
