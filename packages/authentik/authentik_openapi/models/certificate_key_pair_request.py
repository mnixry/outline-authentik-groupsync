# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class CertificateKeyPairRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, certificate_data: str=None, key_data: str=None):
        """CertificateKeyPairRequest - a model defined in OpenAPI

        :param name: The name of this CertificateKeyPairRequest.
        :param certificate_data: The certificate_data of this CertificateKeyPairRequest.
        :param key_data: The key_data of this CertificateKeyPairRequest.
        """
        self.openapi_types = {
            'name': str,
            'certificate_data': str,
            'key_data': str
        }

        self.attribute_map = {
            'name': 'name',
            'certificate_data': 'certificate_data',
            'key_data': 'key_data'
        }

        self._name = name
        self._certificate_data = certificate_data
        self._key_data = key_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateKeyPairRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateKeyPairRequest of this CertificateKeyPairRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CertificateKeyPairRequest.


        :return: The name of this CertificateKeyPairRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateKeyPairRequest.


        :param name: The name of this CertificateKeyPairRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def certificate_data(self):
        """Gets the certificate_data of this CertificateKeyPairRequest.

        PEM-encoded Certificate data

        :return: The certificate_data of this CertificateKeyPairRequest.
        :rtype: str
        """
        return self._certificate_data

    @certificate_data.setter
    def certificate_data(self, certificate_data):
        """Sets the certificate_data of this CertificateKeyPairRequest.

        PEM-encoded Certificate data

        :param certificate_data: The certificate_data of this CertificateKeyPairRequest.
        :type certificate_data: str
        """
        if certificate_data is None:
            raise ValueError("Invalid value for `certificate_data`, must not be `None`")
        if certificate_data is not None and len(certificate_data) < 1:
            raise ValueError("Invalid value for `certificate_data`, length must be greater than or equal to `1`")

        self._certificate_data = certificate_data

    @property
    def key_data(self):
        """Gets the key_data of this CertificateKeyPairRequest.

        Optional Private Key. If this is set, you can use this keypair for encryption.

        :return: The key_data of this CertificateKeyPairRequest.
        :rtype: str
        """
        return self._key_data

    @key_data.setter
    def key_data(self, key_data):
        """Sets the key_data of this CertificateKeyPairRequest.

        Optional Private Key. If this is set, you can use this keypair for encryption.

        :param key_data: The key_data of this CertificateKeyPairRequest.
        :type key_data: str
        """

        self._key_data = key_data
