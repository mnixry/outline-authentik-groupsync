# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class GroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, is_superuser: bool=None, parent: str=None, users: List[int]=None, attributes: Dict[str, object]=None, roles: List[str]=None):
        """GroupRequest - a model defined in OpenAPI

        :param name: The name of this GroupRequest.
        :param is_superuser: The is_superuser of this GroupRequest.
        :param parent: The parent of this GroupRequest.
        :param users: The users of this GroupRequest.
        :param attributes: The attributes of this GroupRequest.
        :param roles: The roles of this GroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'is_superuser': bool,
            'parent': str,
            'users': List[int],
            'attributes': Dict[str, object],
            'roles': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'is_superuser': 'is_superuser',
            'parent': 'parent',
            'users': 'users',
            'attributes': 'attributes',
            'roles': 'roles'
        }

        self._name = name
        self._is_superuser = is_superuser
        self._parent = parent
        self._users = users
        self._attributes = attributes
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupRequest of this GroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GroupRequest.


        :return: The name of this GroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupRequest.


        :param name: The name of this GroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def is_superuser(self):
        """Gets the is_superuser of this GroupRequest.

        Users added to this group will be superusers.

        :return: The is_superuser of this GroupRequest.
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this GroupRequest.

        Users added to this group will be superusers.

        :param is_superuser: The is_superuser of this GroupRequest.
        :type is_superuser: bool
        """

        self._is_superuser = is_superuser

    @property
    def parent(self):
        """Gets the parent of this GroupRequest.


        :return: The parent of this GroupRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GroupRequest.


        :param parent: The parent of this GroupRequest.
        :type parent: str
        """

        self._parent = parent

    @property
    def users(self):
        """Gets the users of this GroupRequest.


        :return: The users of this GroupRequest.
        :rtype: List[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this GroupRequest.


        :param users: The users of this GroupRequest.
        :type users: List[int]
        """

        self._users = users

    @property
    def attributes(self):
        """Gets the attributes of this GroupRequest.


        :return: The attributes of this GroupRequest.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GroupRequest.


        :param attributes: The attributes of this GroupRequest.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def roles(self):
        """Gets the roles of this GroupRequest.


        :return: The roles of this GroupRequest.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this GroupRequest.


        :param roles: The roles of this GroupRequest.
        :type roles: List[str]
        """

        self._roles = roles
