# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class AuthenticatedSessionUserAgentUserAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, family: str=None, major: str=None, minor: str=None, patch: str=None):
        """AuthenticatedSessionUserAgentUserAgent - a model defined in OpenAPI

        :param family: The family of this AuthenticatedSessionUserAgentUserAgent.
        :param major: The major of this AuthenticatedSessionUserAgentUserAgent.
        :param minor: The minor of this AuthenticatedSessionUserAgentUserAgent.
        :param patch: The patch of this AuthenticatedSessionUserAgentUserAgent.
        """
        self.openapi_types = {
            'family': str,
            'major': str,
            'minor': str,
            'patch': str
        }

        self.attribute_map = {
            'family': 'family',
            'major': 'major',
            'minor': 'minor',
            'patch': 'patch'
        }

        self._family = family
        self._major = major
        self._minor = minor
        self._patch = patch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatedSessionUserAgentUserAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatedSession_user_agent_user_agent of this AuthenticatedSessionUserAgentUserAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def family(self):
        """Gets the family of this AuthenticatedSessionUserAgentUserAgent.


        :return: The family of this AuthenticatedSessionUserAgentUserAgent.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this AuthenticatedSessionUserAgentUserAgent.


        :param family: The family of this AuthenticatedSessionUserAgentUserAgent.
        :type family: str
        """
        if family is None:
            raise ValueError("Invalid value for `family`, must not be `None`")

        self._family = family

    @property
    def major(self):
        """Gets the major of this AuthenticatedSessionUserAgentUserAgent.


        :return: The major of this AuthenticatedSessionUserAgentUserAgent.
        :rtype: str
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this AuthenticatedSessionUserAgentUserAgent.


        :param major: The major of this AuthenticatedSessionUserAgentUserAgent.
        :type major: str
        """
        if major is None:
            raise ValueError("Invalid value for `major`, must not be `None`")

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this AuthenticatedSessionUserAgentUserAgent.


        :return: The minor of this AuthenticatedSessionUserAgentUserAgent.
        :rtype: str
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this AuthenticatedSessionUserAgentUserAgent.


        :param minor: The minor of this AuthenticatedSessionUserAgentUserAgent.
        :type minor: str
        """
        if minor is None:
            raise ValueError("Invalid value for `minor`, must not be `None`")

        self._minor = minor

    @property
    def patch(self):
        """Gets the patch of this AuthenticatedSessionUserAgentUserAgent.


        :return: The patch of this AuthenticatedSessionUserAgentUserAgent.
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this AuthenticatedSessionUserAgentUserAgent.


        :param patch: The patch of this AuthenticatedSessionUserAgentUserAgent.
        :type patch: str
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")

        self._patch = patch
