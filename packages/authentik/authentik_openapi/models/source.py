# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
from authentik_openapi.models.user_matching_mode_enum import UserMatchingModeEnum
import re
from authentik_openapi import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, slug: str=None, enabled: bool=None, authentication_flow: str=None, enrollment_flow: str=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, policy_engine_mode: PolicyEngineMode=None, user_matching_mode: UserMatchingModeEnum=None, managed: str=None, user_path_template: str=None, icon: str=None):
        """Source - a model defined in OpenAPI

        :param pk: The pk of this Source.
        :param name: The name of this Source.
        :param slug: The slug of this Source.
        :param enabled: The enabled of this Source.
        :param authentication_flow: The authentication_flow of this Source.
        :param enrollment_flow: The enrollment_flow of this Source.
        :param user_property_mappings: The user_property_mappings of this Source.
        :param group_property_mappings: The group_property_mappings of this Source.
        :param component: The component of this Source.
        :param verbose_name: The verbose_name of this Source.
        :param verbose_name_plural: The verbose_name_plural of this Source.
        :param meta_model_name: The meta_model_name of this Source.
        :param policy_engine_mode: The policy_engine_mode of this Source.
        :param user_matching_mode: The user_matching_mode of this Source.
        :param managed: The managed of this Source.
        :param user_path_template: The user_path_template of this Source.
        :param icon: The icon of this Source.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'slug': str,
            'enabled': bool,
            'authentication_flow': str,
            'enrollment_flow': str,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'policy_engine_mode': PolicyEngineMode,
            'user_matching_mode': UserMatchingModeEnum,
            'managed': str,
            'user_path_template': str,
            'icon': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'authentication_flow': 'authentication_flow',
            'enrollment_flow': 'enrollment_flow',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'policy_engine_mode': 'policy_engine_mode',
            'user_matching_mode': 'user_matching_mode',
            'managed': 'managed',
            'user_path_template': 'user_path_template',
            'icon': 'icon'
        }

        self._pk = pk
        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._authentication_flow = authentication_flow
        self._enrollment_flow = enrollment_flow
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._policy_engine_mode = policy_engine_mode
        self._user_matching_mode = user_matching_mode
        self._managed = managed
        self._user_path_template = user_path_template
        self._icon = icon

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Source.


        :return: The pk of this Source.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Source.


        :param pk: The pk of this Source.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this Source.

        Source's display Name.

        :return: The name of this Source.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Source.

        Source's display Name.

        :param name: The name of this Source.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Source.

        Internal source name, used in URLs.

        :return: The slug of this Source.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Source.

        Internal source name, used in URLs.

        :param slug: The slug of this Source.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this Source.


        :return: The enabled of this Source.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Source.


        :param enabled: The enabled of this Source.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this Source.

        Flow to use when authenticating existing users.

        :return: The authentication_flow of this Source.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this Source.

        Flow to use when authenticating existing users.

        :param authentication_flow: The authentication_flow of this Source.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this Source.

        Flow to use when enrolling new users.

        :return: The enrollment_flow of this Source.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this Source.

        Flow to use when enrolling new users.

        :param enrollment_flow: The enrollment_flow of this Source.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this Source.


        :return: The user_property_mappings of this Source.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this Source.


        :param user_property_mappings: The user_property_mappings of this Source.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this Source.


        :return: The group_property_mappings of this Source.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this Source.


        :param group_property_mappings: The group_property_mappings of this Source.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def component(self):
        """Gets the component of this Source.

        Get object component so that we know how to edit the object

        :return: The component of this Source.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this Source.

        Get object component so that we know how to edit the object

        :param component: The component of this Source.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this Source.

        Return object's verbose_name

        :return: The verbose_name of this Source.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this Source.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this Source.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this Source.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this Source.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this Source.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this Source.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this Source.

        Return internal model name

        :return: The meta_model_name of this Source.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this Source.

        Return internal model name

        :param meta_model_name: The meta_model_name of this Source.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this Source.


        :return: The policy_engine_mode of this Source.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this Source.


        :param policy_engine_mode: The policy_engine_mode of this Source.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def user_matching_mode(self):
        """Gets the user_matching_mode of this Source.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :return: The user_matching_mode of this Source.
        :rtype: UserMatchingModeEnum
        """
        return self._user_matching_mode

    @user_matching_mode.setter
    def user_matching_mode(self, user_matching_mode):
        """Sets the user_matching_mode of this Source.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :param user_matching_mode: The user_matching_mode of this Source.
        :type user_matching_mode: UserMatchingModeEnum
        """

        self._user_matching_mode = user_matching_mode

    @property
    def managed(self):
        """Gets the managed of this Source.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this Source.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Source.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this Source.
        :type managed: str
        """
        if managed is None:
            raise ValueError("Invalid value for `managed`, must not be `None`")

        self._managed = managed

    @property
    def user_path_template(self):
        """Gets the user_path_template of this Source.


        :return: The user_path_template of this Source.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this Source.


        :param user_path_template: The user_path_template of this Source.
        :type user_path_template: str
        """

        self._user_path_template = user_path_template

    @property
    def icon(self):
        """Gets the icon of this Source.

        Get the URL to the Icon. If the name is /static or starts with http it is returned as-is

        :return: The icon of this Source.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Source.

        Get the URL to the Icon. If the name is /static or starts with http it is returned as-is

        :param icon: The icon of this Source.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon
