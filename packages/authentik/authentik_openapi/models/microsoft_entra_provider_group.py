# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.user_group import UserGroup
from authentik_openapi import util


class MicrosoftEntraProviderGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, microsoft_id: str=None, group: str=None, group_obj: UserGroup=None, provider: int=None, attributes: object=None):
        """MicrosoftEntraProviderGroup - a model defined in OpenAPI

        :param id: The id of this MicrosoftEntraProviderGroup.
        :param microsoft_id: The microsoft_id of this MicrosoftEntraProviderGroup.
        :param group: The group of this MicrosoftEntraProviderGroup.
        :param group_obj: The group_obj of this MicrosoftEntraProviderGroup.
        :param provider: The provider of this MicrosoftEntraProviderGroup.
        :param attributes: The attributes of this MicrosoftEntraProviderGroup.
        """
        self.openapi_types = {
            'id': str,
            'microsoft_id': str,
            'group': str,
            'group_obj': UserGroup,
            'provider': int,
            'attributes': object
        }

        self.attribute_map = {
            'id': 'id',
            'microsoft_id': 'microsoft_id',
            'group': 'group',
            'group_obj': 'group_obj',
            'provider': 'provider',
            'attributes': 'attributes'
        }

        self._id = id
        self._microsoft_id = microsoft_id
        self._group = group
        self._group_obj = group_obj
        self._provider = provider
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MicrosoftEntraProviderGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MicrosoftEntraProviderGroup of this MicrosoftEntraProviderGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MicrosoftEntraProviderGroup.


        :return: The id of this MicrosoftEntraProviderGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MicrosoftEntraProviderGroup.


        :param id: The id of this MicrosoftEntraProviderGroup.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def microsoft_id(self):
        """Gets the microsoft_id of this MicrosoftEntraProviderGroup.


        :return: The microsoft_id of this MicrosoftEntraProviderGroup.
        :rtype: str
        """
        return self._microsoft_id

    @microsoft_id.setter
    def microsoft_id(self, microsoft_id):
        """Sets the microsoft_id of this MicrosoftEntraProviderGroup.


        :param microsoft_id: The microsoft_id of this MicrosoftEntraProviderGroup.
        :type microsoft_id: str
        """
        if microsoft_id is None:
            raise ValueError("Invalid value for `microsoft_id`, must not be `None`")

        self._microsoft_id = microsoft_id

    @property
    def group(self):
        """Gets the group of this MicrosoftEntraProviderGroup.


        :return: The group of this MicrosoftEntraProviderGroup.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this MicrosoftEntraProviderGroup.


        :param group: The group of this MicrosoftEntraProviderGroup.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def group_obj(self):
        """Gets the group_obj of this MicrosoftEntraProviderGroup.


        :return: The group_obj of this MicrosoftEntraProviderGroup.
        :rtype: UserGroup
        """
        return self._group_obj

    @group_obj.setter
    def group_obj(self, group_obj):
        """Sets the group_obj of this MicrosoftEntraProviderGroup.


        :param group_obj: The group_obj of this MicrosoftEntraProviderGroup.
        :type group_obj: UserGroup
        """
        if group_obj is None:
            raise ValueError("Invalid value for `group_obj`, must not be `None`")

        self._group_obj = group_obj

    @property
    def provider(self):
        """Gets the provider of this MicrosoftEntraProviderGroup.


        :return: The provider of this MicrosoftEntraProviderGroup.
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this MicrosoftEntraProviderGroup.


        :param provider: The provider of this MicrosoftEntraProviderGroup.
        :type provider: int
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def attributes(self):
        """Gets the attributes of this MicrosoftEntraProviderGroup.


        :return: The attributes of this MicrosoftEntraProviderGroup.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MicrosoftEntraProviderGroup.


        :param attributes: The attributes of this MicrosoftEntraProviderGroup.
        :type attributes: object
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes
