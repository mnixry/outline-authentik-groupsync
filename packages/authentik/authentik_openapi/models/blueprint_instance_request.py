# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class BlueprintInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, path: str='', context: object=None, enabled: bool=None, content: str=None):
        """BlueprintInstanceRequest - a model defined in OpenAPI

        :param name: The name of this BlueprintInstanceRequest.
        :param path: The path of this BlueprintInstanceRequest.
        :param context: The context of this BlueprintInstanceRequest.
        :param enabled: The enabled of this BlueprintInstanceRequest.
        :param content: The content of this BlueprintInstanceRequest.
        """
        self.openapi_types = {
            'name': str,
            'path': str,
            'context': object,
            'enabled': bool,
            'content': str
        }

        self.attribute_map = {
            'name': 'name',
            'path': 'path',
            'context': 'context',
            'enabled': 'enabled',
            'content': 'content'
        }

        self._name = name
        self._path = path
        self._context = context
        self._enabled = enabled
        self._content = content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlueprintInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlueprintInstanceRequest of this BlueprintInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this BlueprintInstanceRequest.


        :return: The name of this BlueprintInstanceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BlueprintInstanceRequest.


        :param name: The name of this BlueprintInstanceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this BlueprintInstanceRequest.


        :return: The path of this BlueprintInstanceRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BlueprintInstanceRequest.


        :param path: The path of this BlueprintInstanceRequest.
        :type path: str
        """

        self._path = path

    @property
    def context(self):
        """Gets the context of this BlueprintInstanceRequest.


        :return: The context of this BlueprintInstanceRequest.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this BlueprintInstanceRequest.


        :param context: The context of this BlueprintInstanceRequest.
        :type context: object
        """

        self._context = context

    @property
    def enabled(self):
        """Gets the enabled of this BlueprintInstanceRequest.


        :return: The enabled of this BlueprintInstanceRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BlueprintInstanceRequest.


        :param enabled: The enabled of this BlueprintInstanceRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def content(self):
        """Gets the content of this BlueprintInstanceRequest.


        :return: The content of this BlueprintInstanceRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BlueprintInstanceRequest.


        :param content: The content of this BlueprintInstanceRequest.
        :type content: str
        """

        self._content = content
