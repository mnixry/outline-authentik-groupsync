# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PatchedSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatars: str=None, default_user_change_name: bool=None, default_user_change_email: bool=None, default_user_change_username: bool=None, event_retention: str=None, footer_links: object=None, gdpr_compliance: bool=None, impersonation: bool=None, default_token_duration: str=None, default_token_length: int=None):
        """PatchedSettingsRequest - a model defined in OpenAPI

        :param avatars: The avatars of this PatchedSettingsRequest.
        :param default_user_change_name: The default_user_change_name of this PatchedSettingsRequest.
        :param default_user_change_email: The default_user_change_email of this PatchedSettingsRequest.
        :param default_user_change_username: The default_user_change_username of this PatchedSettingsRequest.
        :param event_retention: The event_retention of this PatchedSettingsRequest.
        :param footer_links: The footer_links of this PatchedSettingsRequest.
        :param gdpr_compliance: The gdpr_compliance of this PatchedSettingsRequest.
        :param impersonation: The impersonation of this PatchedSettingsRequest.
        :param default_token_duration: The default_token_duration of this PatchedSettingsRequest.
        :param default_token_length: The default_token_length of this PatchedSettingsRequest.
        """
        self.openapi_types = {
            'avatars': str,
            'default_user_change_name': bool,
            'default_user_change_email': bool,
            'default_user_change_username': bool,
            'event_retention': str,
            'footer_links': object,
            'gdpr_compliance': bool,
            'impersonation': bool,
            'default_token_duration': str,
            'default_token_length': int
        }

        self.attribute_map = {
            'avatars': 'avatars',
            'default_user_change_name': 'default_user_change_name',
            'default_user_change_email': 'default_user_change_email',
            'default_user_change_username': 'default_user_change_username',
            'event_retention': 'event_retention',
            'footer_links': 'footer_links',
            'gdpr_compliance': 'gdpr_compliance',
            'impersonation': 'impersonation',
            'default_token_duration': 'default_token_duration',
            'default_token_length': 'default_token_length'
        }

        self._avatars = avatars
        self._default_user_change_name = default_user_change_name
        self._default_user_change_email = default_user_change_email
        self._default_user_change_username = default_user_change_username
        self._event_retention = event_retention
        self._footer_links = footer_links
        self._gdpr_compliance = gdpr_compliance
        self._impersonation = impersonation
        self._default_token_duration = default_token_duration
        self._default_token_length = default_token_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedSettingsRequest of this PatchedSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatars(self):
        """Gets the avatars of this PatchedSettingsRequest.

        Configure how authentik should show avatars for users.

        :return: The avatars of this PatchedSettingsRequest.
        :rtype: str
        """
        return self._avatars

    @avatars.setter
    def avatars(self, avatars):
        """Sets the avatars of this PatchedSettingsRequest.

        Configure how authentik should show avatars for users.

        :param avatars: The avatars of this PatchedSettingsRequest.
        :type avatars: str
        """
        if avatars is not None and len(avatars) < 1:
            raise ValueError("Invalid value for `avatars`, length must be greater than or equal to `1`")

        self._avatars = avatars

    @property
    def default_user_change_name(self):
        """Gets the default_user_change_name of this PatchedSettingsRequest.

        Enable the ability for users to change their name.

        :return: The default_user_change_name of this PatchedSettingsRequest.
        :rtype: bool
        """
        return self._default_user_change_name

    @default_user_change_name.setter
    def default_user_change_name(self, default_user_change_name):
        """Sets the default_user_change_name of this PatchedSettingsRequest.

        Enable the ability for users to change their name.

        :param default_user_change_name: The default_user_change_name of this PatchedSettingsRequest.
        :type default_user_change_name: bool
        """

        self._default_user_change_name = default_user_change_name

    @property
    def default_user_change_email(self):
        """Gets the default_user_change_email of this PatchedSettingsRequest.

        Enable the ability for users to change their email address.

        :return: The default_user_change_email of this PatchedSettingsRequest.
        :rtype: bool
        """
        return self._default_user_change_email

    @default_user_change_email.setter
    def default_user_change_email(self, default_user_change_email):
        """Sets the default_user_change_email of this PatchedSettingsRequest.

        Enable the ability for users to change their email address.

        :param default_user_change_email: The default_user_change_email of this PatchedSettingsRequest.
        :type default_user_change_email: bool
        """

        self._default_user_change_email = default_user_change_email

    @property
    def default_user_change_username(self):
        """Gets the default_user_change_username of this PatchedSettingsRequest.

        Enable the ability for users to change their username.

        :return: The default_user_change_username of this PatchedSettingsRequest.
        :rtype: bool
        """
        return self._default_user_change_username

    @default_user_change_username.setter
    def default_user_change_username(self, default_user_change_username):
        """Sets the default_user_change_username of this PatchedSettingsRequest.

        Enable the ability for users to change their username.

        :param default_user_change_username: The default_user_change_username of this PatchedSettingsRequest.
        :type default_user_change_username: bool
        """

        self._default_user_change_username = default_user_change_username

    @property
    def event_retention(self):
        """Gets the event_retention of this PatchedSettingsRequest.

        Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2).

        :return: The event_retention of this PatchedSettingsRequest.
        :rtype: str
        """
        return self._event_retention

    @event_retention.setter
    def event_retention(self, event_retention):
        """Sets the event_retention of this PatchedSettingsRequest.

        Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2).

        :param event_retention: The event_retention of this PatchedSettingsRequest.
        :type event_retention: str
        """
        if event_retention is not None and len(event_retention) < 1:
            raise ValueError("Invalid value for `event_retention`, length must be greater than or equal to `1`")

        self._event_retention = event_retention

    @property
    def footer_links(self):
        """Gets the footer_links of this PatchedSettingsRequest.

        The option configures the footer links on the flow executor pages.

        :return: The footer_links of this PatchedSettingsRequest.
        :rtype: object
        """
        return self._footer_links

    @footer_links.setter
    def footer_links(self, footer_links):
        """Sets the footer_links of this PatchedSettingsRequest.

        The option configures the footer links on the flow executor pages.

        :param footer_links: The footer_links of this PatchedSettingsRequest.
        :type footer_links: object
        """

        self._footer_links = footer_links

    @property
    def gdpr_compliance(self):
        """Gets the gdpr_compliance of this PatchedSettingsRequest.

        When enabled, all the events caused by a user will be deleted upon the user's deletion.

        :return: The gdpr_compliance of this PatchedSettingsRequest.
        :rtype: bool
        """
        return self._gdpr_compliance

    @gdpr_compliance.setter
    def gdpr_compliance(self, gdpr_compliance):
        """Sets the gdpr_compliance of this PatchedSettingsRequest.

        When enabled, all the events caused by a user will be deleted upon the user's deletion.

        :param gdpr_compliance: The gdpr_compliance of this PatchedSettingsRequest.
        :type gdpr_compliance: bool
        """

        self._gdpr_compliance = gdpr_compliance

    @property
    def impersonation(self):
        """Gets the impersonation of this PatchedSettingsRequest.

        Globally enable/disable impersonation.

        :return: The impersonation of this PatchedSettingsRequest.
        :rtype: bool
        """
        return self._impersonation

    @impersonation.setter
    def impersonation(self, impersonation):
        """Sets the impersonation of this PatchedSettingsRequest.

        Globally enable/disable impersonation.

        :param impersonation: The impersonation of this PatchedSettingsRequest.
        :type impersonation: bool
        """

        self._impersonation = impersonation

    @property
    def default_token_duration(self):
        """Gets the default_token_duration of this PatchedSettingsRequest.

        Default token duration

        :return: The default_token_duration of this PatchedSettingsRequest.
        :rtype: str
        """
        return self._default_token_duration

    @default_token_duration.setter
    def default_token_duration(self, default_token_duration):
        """Sets the default_token_duration of this PatchedSettingsRequest.

        Default token duration

        :param default_token_duration: The default_token_duration of this PatchedSettingsRequest.
        :type default_token_duration: str
        """
        if default_token_duration is not None and len(default_token_duration) < 1:
            raise ValueError("Invalid value for `default_token_duration`, length must be greater than or equal to `1`")

        self._default_token_duration = default_token_duration

    @property
    def default_token_length(self):
        """Gets the default_token_length of this PatchedSettingsRequest.

        Default token length

        :return: The default_token_length of this PatchedSettingsRequest.
        :rtype: int
        """
        return self._default_token_length

    @default_token_length.setter
    def default_token_length(self, default_token_length):
        """Sets the default_token_length of this PatchedSettingsRequest.

        Default token length

        :param default_token_length: The default_token_length of this PatchedSettingsRequest.
        :type default_token_length: int
        """
        if default_token_length is not None and default_token_length > 2147483647:
            raise ValueError("Invalid value for `default_token_length`, must be a value less than or equal to `2147483647`")
        if default_token_length is not None and default_token_length < 1:
            raise ValueError("Invalid value for `default_token_length`, must be a value greater than or equal to `1`")

        self._default_token_length = default_token_length
