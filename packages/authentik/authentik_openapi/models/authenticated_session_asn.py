# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class AuthenticatedSessionAsn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, as_org: str=None, network: str=None):
        """AuthenticatedSessionAsn - a model defined in OpenAPI

        :param asn: The asn of this AuthenticatedSessionAsn.
        :param as_org: The as_org of this AuthenticatedSessionAsn.
        :param network: The network of this AuthenticatedSessionAsn.
        """
        self.openapi_types = {
            'asn': int,
            'as_org': str,
            'network': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'as_org': 'as_org',
            'network': 'network'
        }

        self._asn = asn
        self._as_org = as_org
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatedSessionAsn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatedSession_asn of this AuthenticatedSessionAsn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this AuthenticatedSessionAsn.


        :return: The asn of this AuthenticatedSessionAsn.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this AuthenticatedSessionAsn.


        :param asn: The asn of this AuthenticatedSessionAsn.
        :type asn: int
        """
        if asn is None:
            raise ValueError("Invalid value for `asn`, must not be `None`")

        self._asn = asn

    @property
    def as_org(self):
        """Gets the as_org of this AuthenticatedSessionAsn.


        :return: The as_org of this AuthenticatedSessionAsn.
        :rtype: str
        """
        return self._as_org

    @as_org.setter
    def as_org(self, as_org):
        """Sets the as_org of this AuthenticatedSessionAsn.


        :param as_org: The as_org of this AuthenticatedSessionAsn.
        :type as_org: str
        """
        if as_org is None:
            raise ValueError("Invalid value for `as_org`, must not be `None`")

        self._as_org = as_org

    @property
    def network(self):
        """Gets the network of this AuthenticatedSessionAsn.


        :return: The network of this AuthenticatedSessionAsn.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AuthenticatedSessionAsn.


        :param network: The network of this AuthenticatedSessionAsn.
        :type network: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network
