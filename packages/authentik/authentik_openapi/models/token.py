# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.intent_enum import IntentEnum
from authentik_openapi.models.user import User
import re
from authentik_openapi import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, managed: str=None, identifier: str=None, intent: IntentEnum=None, user: int=None, user_obj: User=None, description: str=None, expires: datetime=None, expiring: bool=None):
        """Token - a model defined in OpenAPI

        :param pk: The pk of this Token.
        :param managed: The managed of this Token.
        :param identifier: The identifier of this Token.
        :param intent: The intent of this Token.
        :param user: The user of this Token.
        :param user_obj: The user_obj of this Token.
        :param description: The description of this Token.
        :param expires: The expires of this Token.
        :param expiring: The expiring of this Token.
        """
        self.openapi_types = {
            'pk': str,
            'managed': str,
            'identifier': str,
            'intent': IntentEnum,
            'user': int,
            'user_obj': User,
            'description': str,
            'expires': datetime,
            'expiring': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'managed': 'managed',
            'identifier': 'identifier',
            'intent': 'intent',
            'user': 'user',
            'user_obj': 'user_obj',
            'description': 'description',
            'expires': 'expires',
            'expiring': 'expiring'
        }

        self._pk = pk
        self._managed = managed
        self._identifier = identifier
        self._intent = intent
        self._user = user
        self._user_obj = user_obj
        self._description = description
        self._expires = expires
        self._expiring = expiring

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Token of this Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Token.


        :return: The pk of this Token.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Token.


        :param pk: The pk of this Token.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def managed(self):
        """Gets the managed of this Token.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this Token.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Token.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this Token.
        :type managed: str
        """

        self._managed = managed

    @property
    def identifier(self):
        """Gets the identifier of this Token.


        :return: The identifier of this Token.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Token.


        :param identifier: The identifier of this Token.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")
        if identifier is not None and len(identifier) > 255:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `255`")
        if identifier is not None and not re.search(r'^[-a-zA-Z0-9_]+$', identifier):
            raise ValueError("Invalid value for `identifier`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._identifier = identifier

    @property
    def intent(self):
        """Gets the intent of this Token.


        :return: The intent of this Token.
        :rtype: IntentEnum
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this Token.


        :param intent: The intent of this Token.
        :type intent: IntentEnum
        """

        self._intent = intent

    @property
    def user(self):
        """Gets the user of this Token.


        :return: The user of this Token.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Token.


        :param user: The user of this Token.
        :type user: int
        """

        self._user = user

    @property
    def user_obj(self):
        """Gets the user_obj of this Token.


        :return: The user_obj of this Token.
        :rtype: User
        """
        return self._user_obj

    @user_obj.setter
    def user_obj(self, user_obj):
        """Sets the user_obj of this Token.


        :param user_obj: The user_obj of this Token.
        :type user_obj: User
        """
        if user_obj is None:
            raise ValueError("Invalid value for `user_obj`, must not be `None`")

        self._user_obj = user_obj

    @property
    def description(self):
        """Gets the description of this Token.


        :return: The description of this Token.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Token.


        :param description: The description of this Token.
        :type description: str
        """

        self._description = description

    @property
    def expires(self):
        """Gets the expires of this Token.


        :return: The expires of this Token.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Token.


        :param expires: The expires of this Token.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def expiring(self):
        """Gets the expiring of this Token.


        :return: The expiring of this Token.
        :rtype: bool
        """
        return self._expiring

    @expiring.setter
    def expiring(self, expiring):
        """Sets the expiring of this Token.


        :param expiring: The expiring of this Token.
        :type expiring: bool
        """

        self._expiring = expiring
