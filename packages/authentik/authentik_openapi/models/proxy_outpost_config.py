# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.open_id_connect_configuration import OpenIDConnectConfiguration
from authentik_openapi.models.proxy_mode import ProxyMode
from authentik_openapi import util


class ProxyOutpostConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: int=None, name: str=None, internal_host: str=None, external_host: str=None, internal_host_ssl_validation: bool=None, client_id: str=None, client_secret: str=None, oidc_configuration: OpenIDConnectConfiguration=None, cookie_secret: str=None, certificate: str=None, skip_path_regex: str=None, basic_auth_enabled: bool=None, basic_auth_password_attribute: str=None, basic_auth_user_attribute: str=None, mode: ProxyMode=None, cookie_domain: str=None, access_token_validity: float=None, intercept_header_auth: bool=None, scopes_to_request: List[str]=None, assigned_application_slug: str=None, assigned_application_name: str=None):
        """ProxyOutpostConfig - a model defined in OpenAPI

        :param pk: The pk of this ProxyOutpostConfig.
        :param name: The name of this ProxyOutpostConfig.
        :param internal_host: The internal_host of this ProxyOutpostConfig.
        :param external_host: The external_host of this ProxyOutpostConfig.
        :param internal_host_ssl_validation: The internal_host_ssl_validation of this ProxyOutpostConfig.
        :param client_id: The client_id of this ProxyOutpostConfig.
        :param client_secret: The client_secret of this ProxyOutpostConfig.
        :param oidc_configuration: The oidc_configuration of this ProxyOutpostConfig.
        :param cookie_secret: The cookie_secret of this ProxyOutpostConfig.
        :param certificate: The certificate of this ProxyOutpostConfig.
        :param skip_path_regex: The skip_path_regex of this ProxyOutpostConfig.
        :param basic_auth_enabled: The basic_auth_enabled of this ProxyOutpostConfig.
        :param basic_auth_password_attribute: The basic_auth_password_attribute of this ProxyOutpostConfig.
        :param basic_auth_user_attribute: The basic_auth_user_attribute of this ProxyOutpostConfig.
        :param mode: The mode of this ProxyOutpostConfig.
        :param cookie_domain: The cookie_domain of this ProxyOutpostConfig.
        :param access_token_validity: The access_token_validity of this ProxyOutpostConfig.
        :param intercept_header_auth: The intercept_header_auth of this ProxyOutpostConfig.
        :param scopes_to_request: The scopes_to_request of this ProxyOutpostConfig.
        :param assigned_application_slug: The assigned_application_slug of this ProxyOutpostConfig.
        :param assigned_application_name: The assigned_application_name of this ProxyOutpostConfig.
        """
        self.openapi_types = {
            'pk': int,
            'name': str,
            'internal_host': str,
            'external_host': str,
            'internal_host_ssl_validation': bool,
            'client_id': str,
            'client_secret': str,
            'oidc_configuration': OpenIDConnectConfiguration,
            'cookie_secret': str,
            'certificate': str,
            'skip_path_regex': str,
            'basic_auth_enabled': bool,
            'basic_auth_password_attribute': str,
            'basic_auth_user_attribute': str,
            'mode': ProxyMode,
            'cookie_domain': str,
            'access_token_validity': float,
            'intercept_header_auth': bool,
            'scopes_to_request': List[str],
            'assigned_application_slug': str,
            'assigned_application_name': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'internal_host': 'internal_host',
            'external_host': 'external_host',
            'internal_host_ssl_validation': 'internal_host_ssl_validation',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'oidc_configuration': 'oidc_configuration',
            'cookie_secret': 'cookie_secret',
            'certificate': 'certificate',
            'skip_path_regex': 'skip_path_regex',
            'basic_auth_enabled': 'basic_auth_enabled',
            'basic_auth_password_attribute': 'basic_auth_password_attribute',
            'basic_auth_user_attribute': 'basic_auth_user_attribute',
            'mode': 'mode',
            'cookie_domain': 'cookie_domain',
            'access_token_validity': 'access_token_validity',
            'intercept_header_auth': 'intercept_header_auth',
            'scopes_to_request': 'scopes_to_request',
            'assigned_application_slug': 'assigned_application_slug',
            'assigned_application_name': 'assigned_application_name'
        }

        self._pk = pk
        self._name = name
        self._internal_host = internal_host
        self._external_host = external_host
        self._internal_host_ssl_validation = internal_host_ssl_validation
        self._client_id = client_id
        self._client_secret = client_secret
        self._oidc_configuration = oidc_configuration
        self._cookie_secret = cookie_secret
        self._certificate = certificate
        self._skip_path_regex = skip_path_regex
        self._basic_auth_enabled = basic_auth_enabled
        self._basic_auth_password_attribute = basic_auth_password_attribute
        self._basic_auth_user_attribute = basic_auth_user_attribute
        self._mode = mode
        self._cookie_domain = cookie_domain
        self._access_token_validity = access_token_validity
        self._intercept_header_auth = intercept_header_auth
        self._scopes_to_request = scopes_to_request
        self._assigned_application_slug = assigned_application_slug
        self._assigned_application_name = assigned_application_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProxyOutpostConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProxyOutpostConfig of this ProxyOutpostConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this ProxyOutpostConfig.


        :return: The pk of this ProxyOutpostConfig.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this ProxyOutpostConfig.


        :param pk: The pk of this ProxyOutpostConfig.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this ProxyOutpostConfig.


        :return: The name of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProxyOutpostConfig.


        :param name: The name of this ProxyOutpostConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def internal_host(self):
        """Gets the internal_host of this ProxyOutpostConfig.


        :return: The internal_host of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._internal_host

    @internal_host.setter
    def internal_host(self, internal_host):
        """Sets the internal_host of this ProxyOutpostConfig.


        :param internal_host: The internal_host of this ProxyOutpostConfig.
        :type internal_host: str
        """

        self._internal_host = internal_host

    @property
    def external_host(self):
        """Gets the external_host of this ProxyOutpostConfig.


        :return: The external_host of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._external_host

    @external_host.setter
    def external_host(self, external_host):
        """Sets the external_host of this ProxyOutpostConfig.


        :param external_host: The external_host of this ProxyOutpostConfig.
        :type external_host: str
        """
        if external_host is None:
            raise ValueError("Invalid value for `external_host`, must not be `None`")

        self._external_host = external_host

    @property
    def internal_host_ssl_validation(self):
        """Gets the internal_host_ssl_validation of this ProxyOutpostConfig.

        Validate SSL Certificates of upstream servers

        :return: The internal_host_ssl_validation of this ProxyOutpostConfig.
        :rtype: bool
        """
        return self._internal_host_ssl_validation

    @internal_host_ssl_validation.setter
    def internal_host_ssl_validation(self, internal_host_ssl_validation):
        """Sets the internal_host_ssl_validation of this ProxyOutpostConfig.

        Validate SSL Certificates of upstream servers

        :param internal_host_ssl_validation: The internal_host_ssl_validation of this ProxyOutpostConfig.
        :type internal_host_ssl_validation: bool
        """

        self._internal_host_ssl_validation = internal_host_ssl_validation

    @property
    def client_id(self):
        """Gets the client_id of this ProxyOutpostConfig.


        :return: The client_id of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ProxyOutpostConfig.


        :param client_id: The client_id of this ProxyOutpostConfig.
        :type client_id: str
        """
        if client_id is not None and len(client_id) > 255:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `255`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ProxyOutpostConfig.


        :return: The client_secret of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ProxyOutpostConfig.


        :param client_secret: The client_secret of this ProxyOutpostConfig.
        :type client_secret: str
        """
        if client_secret is not None and len(client_secret) > 255:
            raise ValueError("Invalid value for `client_secret`, length must be less than or equal to `255`")

        self._client_secret = client_secret

    @property
    def oidc_configuration(self):
        """Gets the oidc_configuration of this ProxyOutpostConfig.


        :return: The oidc_configuration of this ProxyOutpostConfig.
        :rtype: OpenIDConnectConfiguration
        """
        return self._oidc_configuration

    @oidc_configuration.setter
    def oidc_configuration(self, oidc_configuration):
        """Sets the oidc_configuration of this ProxyOutpostConfig.


        :param oidc_configuration: The oidc_configuration of this ProxyOutpostConfig.
        :type oidc_configuration: OpenIDConnectConfiguration
        """
        if oidc_configuration is None:
            raise ValueError("Invalid value for `oidc_configuration`, must not be `None`")

        self._oidc_configuration = oidc_configuration

    @property
    def cookie_secret(self):
        """Gets the cookie_secret of this ProxyOutpostConfig.


        :return: The cookie_secret of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._cookie_secret

    @cookie_secret.setter
    def cookie_secret(self, cookie_secret):
        """Sets the cookie_secret of this ProxyOutpostConfig.


        :param cookie_secret: The cookie_secret of this ProxyOutpostConfig.
        :type cookie_secret: str
        """

        self._cookie_secret = cookie_secret

    @property
    def certificate(self):
        """Gets the certificate of this ProxyOutpostConfig.


        :return: The certificate of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ProxyOutpostConfig.


        :param certificate: The certificate of this ProxyOutpostConfig.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def skip_path_regex(self):
        """Gets the skip_path_regex of this ProxyOutpostConfig.

        Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.

        :return: The skip_path_regex of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._skip_path_regex

    @skip_path_regex.setter
    def skip_path_regex(self, skip_path_regex):
        """Sets the skip_path_regex of this ProxyOutpostConfig.

        Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.

        :param skip_path_regex: The skip_path_regex of this ProxyOutpostConfig.
        :type skip_path_regex: str
        """

        self._skip_path_regex = skip_path_regex

    @property
    def basic_auth_enabled(self):
        """Gets the basic_auth_enabled of this ProxyOutpostConfig.

        Set a custom HTTP-Basic Authentication header based on values from authentik.

        :return: The basic_auth_enabled of this ProxyOutpostConfig.
        :rtype: bool
        """
        return self._basic_auth_enabled

    @basic_auth_enabled.setter
    def basic_auth_enabled(self, basic_auth_enabled):
        """Sets the basic_auth_enabled of this ProxyOutpostConfig.

        Set a custom HTTP-Basic Authentication header based on values from authentik.

        :param basic_auth_enabled: The basic_auth_enabled of this ProxyOutpostConfig.
        :type basic_auth_enabled: bool
        """

        self._basic_auth_enabled = basic_auth_enabled

    @property
    def basic_auth_password_attribute(self):
        """Gets the basic_auth_password_attribute of this ProxyOutpostConfig.

        User/Group Attribute used for the password part of the HTTP-Basic Header.

        :return: The basic_auth_password_attribute of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._basic_auth_password_attribute

    @basic_auth_password_attribute.setter
    def basic_auth_password_attribute(self, basic_auth_password_attribute):
        """Sets the basic_auth_password_attribute of this ProxyOutpostConfig.

        User/Group Attribute used for the password part of the HTTP-Basic Header.

        :param basic_auth_password_attribute: The basic_auth_password_attribute of this ProxyOutpostConfig.
        :type basic_auth_password_attribute: str
        """

        self._basic_auth_password_attribute = basic_auth_password_attribute

    @property
    def basic_auth_user_attribute(self):
        """Gets the basic_auth_user_attribute of this ProxyOutpostConfig.

        User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.

        :return: The basic_auth_user_attribute of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._basic_auth_user_attribute

    @basic_auth_user_attribute.setter
    def basic_auth_user_attribute(self, basic_auth_user_attribute):
        """Sets the basic_auth_user_attribute of this ProxyOutpostConfig.

        User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.

        :param basic_auth_user_attribute: The basic_auth_user_attribute of this ProxyOutpostConfig.
        :type basic_auth_user_attribute: str
        """

        self._basic_auth_user_attribute = basic_auth_user_attribute

    @property
    def mode(self):
        """Gets the mode of this ProxyOutpostConfig.

        Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.

        :return: The mode of this ProxyOutpostConfig.
        :rtype: ProxyMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ProxyOutpostConfig.

        Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.

        :param mode: The mode of this ProxyOutpostConfig.
        :type mode: ProxyMode
        """

        self._mode = mode

    @property
    def cookie_domain(self):
        """Gets the cookie_domain of this ProxyOutpostConfig.


        :return: The cookie_domain of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._cookie_domain

    @cookie_domain.setter
    def cookie_domain(self, cookie_domain):
        """Sets the cookie_domain of this ProxyOutpostConfig.


        :param cookie_domain: The cookie_domain of this ProxyOutpostConfig.
        :type cookie_domain: str
        """

        self._cookie_domain = cookie_domain

    @property
    def access_token_validity(self):
        """Gets the access_token_validity of this ProxyOutpostConfig.

        Get token validity as second count

        :return: The access_token_validity of this ProxyOutpostConfig.
        :rtype: float
        """
        return self._access_token_validity

    @access_token_validity.setter
    def access_token_validity(self, access_token_validity):
        """Sets the access_token_validity of this ProxyOutpostConfig.

        Get token validity as second count

        :param access_token_validity: The access_token_validity of this ProxyOutpostConfig.
        :type access_token_validity: float
        """
        if access_token_validity is None:
            raise ValueError("Invalid value for `access_token_validity`, must not be `None`")

        self._access_token_validity = access_token_validity

    @property
    def intercept_header_auth(self):
        """Gets the intercept_header_auth of this ProxyOutpostConfig.

        When enabled, this provider will intercept the authorization header and authenticate requests based on its value.

        :return: The intercept_header_auth of this ProxyOutpostConfig.
        :rtype: bool
        """
        return self._intercept_header_auth

    @intercept_header_auth.setter
    def intercept_header_auth(self, intercept_header_auth):
        """Sets the intercept_header_auth of this ProxyOutpostConfig.

        When enabled, this provider will intercept the authorization header and authenticate requests based on its value.

        :param intercept_header_auth: The intercept_header_auth of this ProxyOutpostConfig.
        :type intercept_header_auth: bool
        """

        self._intercept_header_auth = intercept_header_auth

    @property
    def scopes_to_request(self):
        """Gets the scopes_to_request of this ProxyOutpostConfig.

        Get all the scope names the outpost should request, including custom-defined ones

        :return: The scopes_to_request of this ProxyOutpostConfig.
        :rtype: List[str]
        """
        return self._scopes_to_request

    @scopes_to_request.setter
    def scopes_to_request(self, scopes_to_request):
        """Sets the scopes_to_request of this ProxyOutpostConfig.

        Get all the scope names the outpost should request, including custom-defined ones

        :param scopes_to_request: The scopes_to_request of this ProxyOutpostConfig.
        :type scopes_to_request: List[str]
        """
        if scopes_to_request is None:
            raise ValueError("Invalid value for `scopes_to_request`, must not be `None`")

        self._scopes_to_request = scopes_to_request

    @property
    def assigned_application_slug(self):
        """Gets the assigned_application_slug of this ProxyOutpostConfig.

        Internal application name, used in URLs.

        :return: The assigned_application_slug of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._assigned_application_slug

    @assigned_application_slug.setter
    def assigned_application_slug(self, assigned_application_slug):
        """Sets the assigned_application_slug of this ProxyOutpostConfig.

        Internal application name, used in URLs.

        :param assigned_application_slug: The assigned_application_slug of this ProxyOutpostConfig.
        :type assigned_application_slug: str
        """
        if assigned_application_slug is None:
            raise ValueError("Invalid value for `assigned_application_slug`, must not be `None`")

        self._assigned_application_slug = assigned_application_slug

    @property
    def assigned_application_name(self):
        """Gets the assigned_application_name of this ProxyOutpostConfig.

        Application's display Name.

        :return: The assigned_application_name of this ProxyOutpostConfig.
        :rtype: str
        """
        return self._assigned_application_name

    @assigned_application_name.setter
    def assigned_application_name(self, assigned_application_name):
        """Sets the assigned_application_name of this ProxyOutpostConfig.

        Application's display Name.

        :param assigned_application_name: The assigned_application_name of this ProxyOutpostConfig.
        :type assigned_application_name: str
        """
        if assigned_application_name is None:
            raise ValueError("Invalid value for `assigned_application_name`, must not be `None`")

        self._assigned_application_name = assigned_application_name
