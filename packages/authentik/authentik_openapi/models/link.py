# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link: str=None):
        """Link - a model defined in OpenAPI

        :param link: The link of this Link.
        """
        self.openapi_types = {
            'link': str
        }

        self.attribute_map = {
            'link': 'link'
        }

        self._link = link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Link of this Link.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link(self):
        """Gets the link of this Link.


        :return: The link of this Link.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Link.


        :param link: The link of this Link.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link
