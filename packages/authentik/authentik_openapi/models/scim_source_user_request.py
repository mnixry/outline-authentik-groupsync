# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class SCIMSourceUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, user: int=None, source: str=None, attributes: object=None):
        """SCIMSourceUserRequest - a model defined in OpenAPI

        :param id: The id of this SCIMSourceUserRequest.
        :param user: The user of this SCIMSourceUserRequest.
        :param source: The source of this SCIMSourceUserRequest.
        :param attributes: The attributes of this SCIMSourceUserRequest.
        """
        self.openapi_types = {
            'id': str,
            'user': int,
            'source': str,
            'attributes': object
        }

        self.attribute_map = {
            'id': 'id',
            'user': 'user',
            'source': 'source',
            'attributes': 'attributes'
        }

        self._id = id
        self._user = user
        self._source = source
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SCIMSourceUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SCIMSourceUserRequest of this SCIMSourceUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SCIMSourceUserRequest.


        :return: The id of this SCIMSourceUserRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SCIMSourceUserRequest.


        :param id: The id of this SCIMSourceUserRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def user(self):
        """Gets the user of this SCIMSourceUserRequest.


        :return: The user of this SCIMSourceUserRequest.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SCIMSourceUserRequest.


        :param user: The user of this SCIMSourceUserRequest.
        :type user: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def source(self):
        """Gets the source of this SCIMSourceUserRequest.


        :return: The source of this SCIMSourceUserRequest.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SCIMSourceUserRequest.


        :param source: The source of this SCIMSourceUserRequest.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def attributes(self):
        """Gets the attributes of this SCIMSourceUserRequest.


        :return: The attributes of this SCIMSourceUserRequest.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SCIMSourceUserRequest.


        :param attributes: The attributes of this SCIMSourceUserRequest.
        :type attributes: object
        """

        self._attributes = attributes
