# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class WebAuthnDeviceTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aaguid: str=None, description: str=None):
        """WebAuthnDeviceTypeRequest - a model defined in OpenAPI

        :param aaguid: The aaguid of this WebAuthnDeviceTypeRequest.
        :param description: The description of this WebAuthnDeviceTypeRequest.
        """
        self.openapi_types = {
            'aaguid': str,
            'description': str
        }

        self.attribute_map = {
            'aaguid': 'aaguid',
            'description': 'description'
        }

        self._aaguid = aaguid
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebAuthnDeviceTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebAuthnDeviceTypeRequest of this WebAuthnDeviceTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aaguid(self):
        """Gets the aaguid of this WebAuthnDeviceTypeRequest.


        :return: The aaguid of this WebAuthnDeviceTypeRequest.
        :rtype: str
        """
        return self._aaguid

    @aaguid.setter
    def aaguid(self, aaguid):
        """Sets the aaguid of this WebAuthnDeviceTypeRequest.


        :param aaguid: The aaguid of this WebAuthnDeviceTypeRequest.
        :type aaguid: str
        """
        if aaguid is None:
            raise ValueError("Invalid value for `aaguid`, must not be `None`")

        self._aaguid = aaguid

    @property
    def description(self):
        """Gets the description of this WebAuthnDeviceTypeRequest.


        :return: The description of this WebAuthnDeviceTypeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebAuthnDeviceTypeRequest.


        :param description: The description of this WebAuthnDeviceTypeRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description
