# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class RadiusProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, authentication_flow: str=None, authorization_flow: str=None, property_mappings: List[str]=None, client_networks: str=None, shared_secret: str=None, mfa_support: bool=None):
        """RadiusProviderRequest - a model defined in OpenAPI

        :param name: The name of this RadiusProviderRequest.
        :param authentication_flow: The authentication_flow of this RadiusProviderRequest.
        :param authorization_flow: The authorization_flow of this RadiusProviderRequest.
        :param property_mappings: The property_mappings of this RadiusProviderRequest.
        :param client_networks: The client_networks of this RadiusProviderRequest.
        :param shared_secret: The shared_secret of this RadiusProviderRequest.
        :param mfa_support: The mfa_support of this RadiusProviderRequest.
        """
        self.openapi_types = {
            'name': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'property_mappings': List[str],
            'client_networks': str,
            'shared_secret': str,
            'mfa_support': bool
        }

        self.attribute_map = {
            'name': 'name',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'property_mappings': 'property_mappings',
            'client_networks': 'client_networks',
            'shared_secret': 'shared_secret',
            'mfa_support': 'mfa_support'
        }

        self._name = name
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._property_mappings = property_mappings
        self._client_networks = client_networks
        self._shared_secret = shared_secret
        self._mfa_support = mfa_support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RadiusProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RadiusProviderRequest of this RadiusProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RadiusProviderRequest.


        :return: The name of this RadiusProviderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RadiusProviderRequest.


        :param name: The name of this RadiusProviderRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this RadiusProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this RadiusProviderRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this RadiusProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this RadiusProviderRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this RadiusProviderRequest.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this RadiusProviderRequest.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this RadiusProviderRequest.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this RadiusProviderRequest.
        :type authorization_flow: str
        """
        if authorization_flow is None:
            raise ValueError("Invalid value for `authorization_flow`, must not be `None`")

        self._authorization_flow = authorization_flow

    @property
    def property_mappings(self):
        """Gets the property_mappings of this RadiusProviderRequest.


        :return: The property_mappings of this RadiusProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this RadiusProviderRequest.


        :param property_mappings: The property_mappings of this RadiusProviderRequest.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def client_networks(self):
        """Gets the client_networks of this RadiusProviderRequest.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :return: The client_networks of this RadiusProviderRequest.
        :rtype: str
        """
        return self._client_networks

    @client_networks.setter
    def client_networks(self, client_networks):
        """Sets the client_networks of this RadiusProviderRequest.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :param client_networks: The client_networks of this RadiusProviderRequest.
        :type client_networks: str
        """
        if client_networks is not None and len(client_networks) < 1:
            raise ValueError("Invalid value for `client_networks`, length must be greater than or equal to `1`")

        self._client_networks = client_networks

    @property
    def shared_secret(self):
        """Gets the shared_secret of this RadiusProviderRequest.

        Shared secret between clients and server to hash packets.

        :return: The shared_secret of this RadiusProviderRequest.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this RadiusProviderRequest.

        Shared secret between clients and server to hash packets.

        :param shared_secret: The shared_secret of this RadiusProviderRequest.
        :type shared_secret: str
        """
        if shared_secret is not None and len(shared_secret) < 1:
            raise ValueError("Invalid value for `shared_secret`, length must be greater than or equal to `1`")

        self._shared_secret = shared_secret

    @property
    def mfa_support(self):
        """Gets the mfa_support of this RadiusProviderRequest.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :return: The mfa_support of this RadiusProviderRequest.
        :rtype: bool
        """
        return self._mfa_support

    @mfa_support.setter
    def mfa_support(self, mfa_support):
        """Sets the mfa_support of this RadiusProviderRequest.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :param mfa_support: The mfa_support of this RadiusProviderRequest.
        :type mfa_support: bool
        """

        self._mfa_support = mfa_support
