# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PlexSourcePropertyMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, managed: str=None, name: str=None, expression: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None):
        """PlexSourcePropertyMapping - a model defined in OpenAPI

        :param pk: The pk of this PlexSourcePropertyMapping.
        :param managed: The managed of this PlexSourcePropertyMapping.
        :param name: The name of this PlexSourcePropertyMapping.
        :param expression: The expression of this PlexSourcePropertyMapping.
        :param component: The component of this PlexSourcePropertyMapping.
        :param verbose_name: The verbose_name of this PlexSourcePropertyMapping.
        :param verbose_name_plural: The verbose_name_plural of this PlexSourcePropertyMapping.
        :param meta_model_name: The meta_model_name of this PlexSourcePropertyMapping.
        """
        self.openapi_types = {
            'pk': str,
            'managed': str,
            'name': str,
            'expression': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'managed': 'managed',
            'name': 'name',
            'expression': 'expression',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name'
        }

        self._pk = pk
        self._managed = managed
        self._name = name
        self._expression = expression
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlexSourcePropertyMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlexSourcePropertyMapping of this PlexSourcePropertyMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this PlexSourcePropertyMapping.


        :return: The pk of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this PlexSourcePropertyMapping.


        :param pk: The pk of this PlexSourcePropertyMapping.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def managed(self):
        """Gets the managed of this PlexSourcePropertyMapping.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this PlexSourcePropertyMapping.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this PlexSourcePropertyMapping.
        :type managed: str
        """

        self._managed = managed

    @property
    def name(self):
        """Gets the name of this PlexSourcePropertyMapping.


        :return: The name of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlexSourcePropertyMapping.


        :param name: The name of this PlexSourcePropertyMapping.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def expression(self):
        """Gets the expression of this PlexSourcePropertyMapping.


        :return: The expression of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this PlexSourcePropertyMapping.


        :param expression: The expression of this PlexSourcePropertyMapping.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def component(self):
        """Gets the component of this PlexSourcePropertyMapping.

        Get object's component so that we know how to edit the object

        :return: The component of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this PlexSourcePropertyMapping.

        Get object's component so that we know how to edit the object

        :param component: The component of this PlexSourcePropertyMapping.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this PlexSourcePropertyMapping.

        Return object's verbose_name

        :return: The verbose_name of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this PlexSourcePropertyMapping.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this PlexSourcePropertyMapping.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this PlexSourcePropertyMapping.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this PlexSourcePropertyMapping.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this PlexSourcePropertyMapping.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this PlexSourcePropertyMapping.

        Return internal model name

        :return: The meta_model_name of this PlexSourcePropertyMapping.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this PlexSourcePropertyMapping.

        Return internal model name

        :param meta_model_name: The meta_model_name of this PlexSourcePropertyMapping.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name
