# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PatchedRACProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, authentication_flow: str=None, authorization_flow: str=None, property_mappings: List[str]=None, settings: object=None, connection_expiry: str=None, delete_token_on_disconnect: bool=None):
        """PatchedRACProviderRequest - a model defined in OpenAPI

        :param name: The name of this PatchedRACProviderRequest.
        :param authentication_flow: The authentication_flow of this PatchedRACProviderRequest.
        :param authorization_flow: The authorization_flow of this PatchedRACProviderRequest.
        :param property_mappings: The property_mappings of this PatchedRACProviderRequest.
        :param settings: The settings of this PatchedRACProviderRequest.
        :param connection_expiry: The connection_expiry of this PatchedRACProviderRequest.
        :param delete_token_on_disconnect: The delete_token_on_disconnect of this PatchedRACProviderRequest.
        """
        self.openapi_types = {
            'name': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'property_mappings': List[str],
            'settings': object,
            'connection_expiry': str,
            'delete_token_on_disconnect': bool
        }

        self.attribute_map = {
            'name': 'name',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'property_mappings': 'property_mappings',
            'settings': 'settings',
            'connection_expiry': 'connection_expiry',
            'delete_token_on_disconnect': 'delete_token_on_disconnect'
        }

        self._name = name
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._property_mappings = property_mappings
        self._settings = settings
        self._connection_expiry = connection_expiry
        self._delete_token_on_disconnect = delete_token_on_disconnect

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedRACProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedRACProviderRequest of this PatchedRACProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedRACProviderRequest.


        :return: The name of this PatchedRACProviderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedRACProviderRequest.


        :param name: The name of this PatchedRACProviderRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this PatchedRACProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this PatchedRACProviderRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this PatchedRACProviderRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this PatchedRACProviderRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this PatchedRACProviderRequest.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this PatchedRACProviderRequest.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this PatchedRACProviderRequest.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this PatchedRACProviderRequest.
        :type authorization_flow: str
        """

        self._authorization_flow = authorization_flow

    @property
    def property_mappings(self):
        """Gets the property_mappings of this PatchedRACProviderRequest.


        :return: The property_mappings of this PatchedRACProviderRequest.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this PatchedRACProviderRequest.


        :param property_mappings: The property_mappings of this PatchedRACProviderRequest.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def settings(self):
        """Gets the settings of this PatchedRACProviderRequest.


        :return: The settings of this PatchedRACProviderRequest.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this PatchedRACProviderRequest.


        :param settings: The settings of this PatchedRACProviderRequest.
        :type settings: object
        """

        self._settings = settings

    @property
    def connection_expiry(self):
        """Gets the connection_expiry of this PatchedRACProviderRequest.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :return: The connection_expiry of this PatchedRACProviderRequest.
        :rtype: str
        """
        return self._connection_expiry

    @connection_expiry.setter
    def connection_expiry(self, connection_expiry):
        """Sets the connection_expiry of this PatchedRACProviderRequest.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :param connection_expiry: The connection_expiry of this PatchedRACProviderRequest.
        :type connection_expiry: str
        """
        if connection_expiry is not None and len(connection_expiry) < 1:
            raise ValueError("Invalid value for `connection_expiry`, length must be greater than or equal to `1`")

        self._connection_expiry = connection_expiry

    @property
    def delete_token_on_disconnect(self):
        """Gets the delete_token_on_disconnect of this PatchedRACProviderRequest.

        When set to true, connection tokens will be deleted upon disconnect.

        :return: The delete_token_on_disconnect of this PatchedRACProviderRequest.
        :rtype: bool
        """
        return self._delete_token_on_disconnect

    @delete_token_on_disconnect.setter
    def delete_token_on_disconnect(self, delete_token_on_disconnect):
        """Sets the delete_token_on_disconnect of this PatchedRACProviderRequest.

        When set to true, connection tokens will be deleted upon disconnect.

        :param delete_token_on_disconnect: The delete_token_on_disconnect of this PatchedRACProviderRequest.
        :type delete_token_on_disconnect: bool
        """

        self._delete_token_on_disconnect = delete_token_on_disconnect
