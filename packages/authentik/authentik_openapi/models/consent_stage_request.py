# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.consent_stage_mode_enum import ConsentStageModeEnum
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class ConsentStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, mode: ConsentStageModeEnum=None, consent_expire_in: str=None):
        """ConsentStageRequest - a model defined in OpenAPI

        :param name: The name of this ConsentStageRequest.
        :param flow_set: The flow_set of this ConsentStageRequest.
        :param mode: The mode of this ConsentStageRequest.
        :param consent_expire_in: The consent_expire_in of this ConsentStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'mode': ConsentStageModeEnum,
            'consent_expire_in': str
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'mode': 'mode',
            'consent_expire_in': 'consent_expire_in'
        }

        self._name = name
        self._flow_set = flow_set
        self._mode = mode
        self._consent_expire_in = consent_expire_in

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentStageRequest of this ConsentStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ConsentStageRequest.


        :return: The name of this ConsentStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsentStageRequest.


        :param name: The name of this ConsentStageRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this ConsentStageRequest.


        :return: The flow_set of this ConsentStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this ConsentStageRequest.


        :param flow_set: The flow_set of this ConsentStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def mode(self):
        """Gets the mode of this ConsentStageRequest.


        :return: The mode of this ConsentStageRequest.
        :rtype: ConsentStageModeEnum
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConsentStageRequest.


        :param mode: The mode of this ConsentStageRequest.
        :type mode: ConsentStageModeEnum
        """

        self._mode = mode

    @property
    def consent_expire_in(self):
        """Gets the consent_expire_in of this ConsentStageRequest.

        Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).

        :return: The consent_expire_in of this ConsentStageRequest.
        :rtype: str
        """
        return self._consent_expire_in

    @consent_expire_in.setter
    def consent_expire_in(self, consent_expire_in):
        """Sets the consent_expire_in of this ConsentStageRequest.

        Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).

        :param consent_expire_in: The consent_expire_in of this ConsentStageRequest.
        :type consent_expire_in: str
        """
        if consent_expire_in is not None and len(consent_expire_in) < 1:
            raise ValueError("Invalid value for `consent_expire_in`, length must be greater than or equal to `1`")

        self._consent_expire_in = consent_expire_in
