# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class License(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_uuid: str=None, name: str=None, key: str=None, expiry: datetime=None, internal_users: int=None, external_users: int=None):
        """License - a model defined in OpenAPI

        :param license_uuid: The license_uuid of this License.
        :param name: The name of this License.
        :param key: The key of this License.
        :param expiry: The expiry of this License.
        :param internal_users: The internal_users of this License.
        :param external_users: The external_users of this License.
        """
        self.openapi_types = {
            'license_uuid': str,
            'name': str,
            'key': str,
            'expiry': datetime,
            'internal_users': int,
            'external_users': int
        }

        self.attribute_map = {
            'license_uuid': 'license_uuid',
            'name': 'name',
            'key': 'key',
            'expiry': 'expiry',
            'internal_users': 'internal_users',
            'external_users': 'external_users'
        }

        self._license_uuid = license_uuid
        self._name = name
        self._key = key
        self._expiry = expiry
        self._internal_users = internal_users
        self._external_users = external_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The License of this License.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_uuid(self):
        """Gets the license_uuid of this License.


        :return: The license_uuid of this License.
        :rtype: str
        """
        return self._license_uuid

    @license_uuid.setter
    def license_uuid(self, license_uuid):
        """Sets the license_uuid of this License.


        :param license_uuid: The license_uuid of this License.
        :type license_uuid: str
        """
        if license_uuid is None:
            raise ValueError("Invalid value for `license_uuid`, must not be `None`")

        self._license_uuid = license_uuid

    @property
    def name(self):
        """Gets the name of this License.


        :return: The name of this License.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this License.


        :param name: The name of this License.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def key(self):
        """Gets the key of this License.


        :return: The key of this License.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this License.


        :param key: The key of this License.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def expiry(self):
        """Gets the expiry of this License.


        :return: The expiry of this License.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this License.


        :param expiry: The expiry of this License.
        :type expiry: datetime
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")

        self._expiry = expiry

    @property
    def internal_users(self):
        """Gets the internal_users of this License.


        :return: The internal_users of this License.
        :rtype: int
        """
        return self._internal_users

    @internal_users.setter
    def internal_users(self, internal_users):
        """Sets the internal_users of this License.


        :param internal_users: The internal_users of this License.
        :type internal_users: int
        """
        if internal_users is None:
            raise ValueError("Invalid value for `internal_users`, must not be `None`")

        self._internal_users = internal_users

    @property
    def external_users(self):
        """Gets the external_users of this License.


        :return: The external_users of this License.
        :rtype: int
        """
        return self._external_users

    @external_users.setter
    def external_users(self, external_users):
        """Sets the external_users of this License.


        :param external_users: The external_users of this License.
        :type external_users: int
        """
        if external_users is None:
            raise ValueError("Invalid value for `external_users`, must not be `None`")

        self._external_users = external_users
