# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.metadata import Metadata
from authentik_openapi import util


class BlueprintFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, last_m: datetime=None, hash: str=None, meta: Metadata=None):
        """BlueprintFile - a model defined in OpenAPI

        :param path: The path of this BlueprintFile.
        :param last_m: The last_m of this BlueprintFile.
        :param hash: The hash of this BlueprintFile.
        :param meta: The meta of this BlueprintFile.
        """
        self.openapi_types = {
            'path': str,
            'last_m': datetime,
            'hash': str,
            'meta': Metadata
        }

        self.attribute_map = {
            'path': 'path',
            'last_m': 'last_m',
            'hash': 'hash',
            'meta': 'meta'
        }

        self._path = path
        self._last_m = last_m
        self._hash = hash
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlueprintFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlueprintFile of this BlueprintFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self):
        """Gets the path of this BlueprintFile.


        :return: The path of this BlueprintFile.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BlueprintFile.


        :param path: The path of this BlueprintFile.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def last_m(self):
        """Gets the last_m of this BlueprintFile.


        :return: The last_m of this BlueprintFile.
        :rtype: datetime
        """
        return self._last_m

    @last_m.setter
    def last_m(self, last_m):
        """Sets the last_m of this BlueprintFile.


        :param last_m: The last_m of this BlueprintFile.
        :type last_m: datetime
        """
        if last_m is None:
            raise ValueError("Invalid value for `last_m`, must not be `None`")

        self._last_m = last_m

    @property
    def hash(self):
        """Gets the hash of this BlueprintFile.


        :return: The hash of this BlueprintFile.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this BlueprintFile.


        :param hash: The hash of this BlueprintFile.
        :type hash: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")

        self._hash = hash

    @property
    def meta(self):
        """Gets the meta of this BlueprintFile.


        :return: The meta of this BlueprintFile.
        :rtype: Metadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this BlueprintFile.


        :param meta: The meta of this BlueprintFile.
        :type meta: Metadata
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta
