# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.blueprint_instance_status_enum import BlueprintInstanceStatusEnum
from authentik_openapi import util


class BlueprintInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, path: str='', context: object=None, last_applied: datetime=None, last_applied_hash: str=None, status: BlueprintInstanceStatusEnum=None, enabled: bool=None, managed_models: List[str]=None, metadata: object=None, content: str=None):
        """BlueprintInstance - a model defined in OpenAPI

        :param pk: The pk of this BlueprintInstance.
        :param name: The name of this BlueprintInstance.
        :param path: The path of this BlueprintInstance.
        :param context: The context of this BlueprintInstance.
        :param last_applied: The last_applied of this BlueprintInstance.
        :param last_applied_hash: The last_applied_hash of this BlueprintInstance.
        :param status: The status of this BlueprintInstance.
        :param enabled: The enabled of this BlueprintInstance.
        :param managed_models: The managed_models of this BlueprintInstance.
        :param metadata: The metadata of this BlueprintInstance.
        :param content: The content of this BlueprintInstance.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'path': str,
            'context': object,
            'last_applied': datetime,
            'last_applied_hash': str,
            'status': BlueprintInstanceStatusEnum,
            'enabled': bool,
            'managed_models': List[str],
            'metadata': object,
            'content': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'path': 'path',
            'context': 'context',
            'last_applied': 'last_applied',
            'last_applied_hash': 'last_applied_hash',
            'status': 'status',
            'enabled': 'enabled',
            'managed_models': 'managed_models',
            'metadata': 'metadata',
            'content': 'content'
        }

        self._pk = pk
        self._name = name
        self._path = path
        self._context = context
        self._last_applied = last_applied
        self._last_applied_hash = last_applied_hash
        self._status = status
        self._enabled = enabled
        self._managed_models = managed_models
        self._metadata = metadata
        self._content = content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlueprintInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlueprintInstance of this BlueprintInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this BlueprintInstance.


        :return: The pk of this BlueprintInstance.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this BlueprintInstance.


        :param pk: The pk of this BlueprintInstance.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this BlueprintInstance.


        :return: The name of this BlueprintInstance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BlueprintInstance.


        :param name: The name of this BlueprintInstance.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this BlueprintInstance.


        :return: The path of this BlueprintInstance.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BlueprintInstance.


        :param path: The path of this BlueprintInstance.
        :type path: str
        """

        self._path = path

    @property
    def context(self):
        """Gets the context of this BlueprintInstance.


        :return: The context of this BlueprintInstance.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this BlueprintInstance.


        :param context: The context of this BlueprintInstance.
        :type context: object
        """

        self._context = context

    @property
    def last_applied(self):
        """Gets the last_applied of this BlueprintInstance.


        :return: The last_applied of this BlueprintInstance.
        :rtype: datetime
        """
        return self._last_applied

    @last_applied.setter
    def last_applied(self, last_applied):
        """Sets the last_applied of this BlueprintInstance.


        :param last_applied: The last_applied of this BlueprintInstance.
        :type last_applied: datetime
        """
        if last_applied is None:
            raise ValueError("Invalid value for `last_applied`, must not be `None`")

        self._last_applied = last_applied

    @property
    def last_applied_hash(self):
        """Gets the last_applied_hash of this BlueprintInstance.


        :return: The last_applied_hash of this BlueprintInstance.
        :rtype: str
        """
        return self._last_applied_hash

    @last_applied_hash.setter
    def last_applied_hash(self, last_applied_hash):
        """Sets the last_applied_hash of this BlueprintInstance.


        :param last_applied_hash: The last_applied_hash of this BlueprintInstance.
        :type last_applied_hash: str
        """
        if last_applied_hash is None:
            raise ValueError("Invalid value for `last_applied_hash`, must not be `None`")

        self._last_applied_hash = last_applied_hash

    @property
    def status(self):
        """Gets the status of this BlueprintInstance.


        :return: The status of this BlueprintInstance.
        :rtype: BlueprintInstanceStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BlueprintInstance.


        :param status: The status of this BlueprintInstance.
        :type status: BlueprintInstanceStatusEnum
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def enabled(self):
        """Gets the enabled of this BlueprintInstance.


        :return: The enabled of this BlueprintInstance.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BlueprintInstance.


        :param enabled: The enabled of this BlueprintInstance.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def managed_models(self):
        """Gets the managed_models of this BlueprintInstance.


        :return: The managed_models of this BlueprintInstance.
        :rtype: List[str]
        """
        return self._managed_models

    @managed_models.setter
    def managed_models(self, managed_models):
        """Sets the managed_models of this BlueprintInstance.


        :param managed_models: The managed_models of this BlueprintInstance.
        :type managed_models: List[str]
        """
        if managed_models is None:
            raise ValueError("Invalid value for `managed_models`, must not be `None`")

        self._managed_models = managed_models

    @property
    def metadata(self):
        """Gets the metadata of this BlueprintInstance.


        :return: The metadata of this BlueprintInstance.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BlueprintInstance.


        :param metadata: The metadata of this BlueprintInstance.
        :type metadata: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def content(self):
        """Gets the content of this BlueprintInstance.


        :return: The content of this BlueprintInstance.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BlueprintInstance.


        :param content: The content of this BlueprintInstance.
        :type content: str
        """

        self._content = content
