# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class FlowDiagram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, diagram: str=None):
        """FlowDiagram - a model defined in OpenAPI

        :param diagram: The diagram of this FlowDiagram.
        """
        self.openapi_types = {
            'diagram': str
        }

        self.attribute_map = {
            'diagram': 'diagram'
        }

        self._diagram = diagram

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowDiagram':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowDiagram of this FlowDiagram.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def diagram(self):
        """Gets the diagram of this FlowDiagram.


        :return: The diagram of this FlowDiagram.
        :rtype: str
        """
        return self._diagram

    @diagram.setter
    def diagram(self, diagram):
        """Sets the diagram of this FlowDiagram.


        :param diagram: The diagram of this FlowDiagram.
        :type diagram: str
        """
        if diagram is None:
            raise ValueError("Invalid value for `diagram`, must not be `None`")

        self._diagram = diagram
