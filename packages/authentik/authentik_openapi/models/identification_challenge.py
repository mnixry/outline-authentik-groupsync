# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.contextual_flow_info import ContextualFlowInfo
from authentik_openapi.models.error_detail import ErrorDetail
from authentik_openapi.models.flow_designation_enum import FlowDesignationEnum
from authentik_openapi.models.login_source import LoginSource
from authentik_openapi import util


class IdentificationChallenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_info: ContextualFlowInfo=None, component: str='ak-stage-identification', response_errors: Dict[str, List[ErrorDetail]]=None, user_fields: List[str]=None, password_fields: bool=None, allow_show_password: bool=False, application_pre: str=None, flow_designation: FlowDesignationEnum=None, enroll_url: str=None, recovery_url: str=None, passwordless_url: str=None, primary_action: str=None, sources: List[LoginSource]=None, show_source_labels: bool=None):
        """IdentificationChallenge - a model defined in OpenAPI

        :param flow_info: The flow_info of this IdentificationChallenge.
        :param component: The component of this IdentificationChallenge.
        :param response_errors: The response_errors of this IdentificationChallenge.
        :param user_fields: The user_fields of this IdentificationChallenge.
        :param password_fields: The password_fields of this IdentificationChallenge.
        :param allow_show_password: The allow_show_password of this IdentificationChallenge.
        :param application_pre: The application_pre of this IdentificationChallenge.
        :param flow_designation: The flow_designation of this IdentificationChallenge.
        :param enroll_url: The enroll_url of this IdentificationChallenge.
        :param recovery_url: The recovery_url of this IdentificationChallenge.
        :param passwordless_url: The passwordless_url of this IdentificationChallenge.
        :param primary_action: The primary_action of this IdentificationChallenge.
        :param sources: The sources of this IdentificationChallenge.
        :param show_source_labels: The show_source_labels of this IdentificationChallenge.
        """
        self.openapi_types = {
            'flow_info': ContextualFlowInfo,
            'component': str,
            'response_errors': Dict[str, List[ErrorDetail]],
            'user_fields': List[str],
            'password_fields': bool,
            'allow_show_password': bool,
            'application_pre': str,
            'flow_designation': FlowDesignationEnum,
            'enroll_url': str,
            'recovery_url': str,
            'passwordless_url': str,
            'primary_action': str,
            'sources': List[LoginSource],
            'show_source_labels': bool
        }

        self.attribute_map = {
            'flow_info': 'flow_info',
            'component': 'component',
            'response_errors': 'response_errors',
            'user_fields': 'user_fields',
            'password_fields': 'password_fields',
            'allow_show_password': 'allow_show_password',
            'application_pre': 'application_pre',
            'flow_designation': 'flow_designation',
            'enroll_url': 'enroll_url',
            'recovery_url': 'recovery_url',
            'passwordless_url': 'passwordless_url',
            'primary_action': 'primary_action',
            'sources': 'sources',
            'show_source_labels': 'show_source_labels'
        }

        self._flow_info = flow_info
        self._component = component
        self._response_errors = response_errors
        self._user_fields = user_fields
        self._password_fields = password_fields
        self._allow_show_password = allow_show_password
        self._application_pre = application_pre
        self._flow_designation = flow_designation
        self._enroll_url = enroll_url
        self._recovery_url = recovery_url
        self._passwordless_url = passwordless_url
        self._primary_action = primary_action
        self._sources = sources
        self._show_source_labels = show_source_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentificationChallenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentificationChallenge of this IdentificationChallenge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_info(self):
        """Gets the flow_info of this IdentificationChallenge.


        :return: The flow_info of this IdentificationChallenge.
        :rtype: ContextualFlowInfo
        """
        return self._flow_info

    @flow_info.setter
    def flow_info(self, flow_info):
        """Sets the flow_info of this IdentificationChallenge.


        :param flow_info: The flow_info of this IdentificationChallenge.
        :type flow_info: ContextualFlowInfo
        """

        self._flow_info = flow_info

    @property
    def component(self):
        """Gets the component of this IdentificationChallenge.


        :return: The component of this IdentificationChallenge.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this IdentificationChallenge.


        :param component: The component of this IdentificationChallenge.
        :type component: str
        """

        self._component = component

    @property
    def response_errors(self):
        """Gets the response_errors of this IdentificationChallenge.


        :return: The response_errors of this IdentificationChallenge.
        :rtype: Dict[str, List[ErrorDetail]]
        """
        return self._response_errors

    @response_errors.setter
    def response_errors(self, response_errors):
        """Sets the response_errors of this IdentificationChallenge.


        :param response_errors: The response_errors of this IdentificationChallenge.
        :type response_errors: Dict[str, List[ErrorDetail]]
        """

        self._response_errors = response_errors

    @property
    def user_fields(self):
        """Gets the user_fields of this IdentificationChallenge.


        :return: The user_fields of this IdentificationChallenge.
        :rtype: List[str]
        """
        return self._user_fields

    @user_fields.setter
    def user_fields(self, user_fields):
        """Sets the user_fields of this IdentificationChallenge.


        :param user_fields: The user_fields of this IdentificationChallenge.
        :type user_fields: List[str]
        """
        if user_fields is None:
            raise ValueError("Invalid value for `user_fields`, must not be `None`")

        self._user_fields = user_fields

    @property
    def password_fields(self):
        """Gets the password_fields of this IdentificationChallenge.


        :return: The password_fields of this IdentificationChallenge.
        :rtype: bool
        """
        return self._password_fields

    @password_fields.setter
    def password_fields(self, password_fields):
        """Sets the password_fields of this IdentificationChallenge.


        :param password_fields: The password_fields of this IdentificationChallenge.
        :type password_fields: bool
        """
        if password_fields is None:
            raise ValueError("Invalid value for `password_fields`, must not be `None`")

        self._password_fields = password_fields

    @property
    def allow_show_password(self):
        """Gets the allow_show_password of this IdentificationChallenge.


        :return: The allow_show_password of this IdentificationChallenge.
        :rtype: bool
        """
        return self._allow_show_password

    @allow_show_password.setter
    def allow_show_password(self, allow_show_password):
        """Sets the allow_show_password of this IdentificationChallenge.


        :param allow_show_password: The allow_show_password of this IdentificationChallenge.
        :type allow_show_password: bool
        """

        self._allow_show_password = allow_show_password

    @property
    def application_pre(self):
        """Gets the application_pre of this IdentificationChallenge.


        :return: The application_pre of this IdentificationChallenge.
        :rtype: str
        """
        return self._application_pre

    @application_pre.setter
    def application_pre(self, application_pre):
        """Sets the application_pre of this IdentificationChallenge.


        :param application_pre: The application_pre of this IdentificationChallenge.
        :type application_pre: str
        """

        self._application_pre = application_pre

    @property
    def flow_designation(self):
        """Gets the flow_designation of this IdentificationChallenge.


        :return: The flow_designation of this IdentificationChallenge.
        :rtype: FlowDesignationEnum
        """
        return self._flow_designation

    @flow_designation.setter
    def flow_designation(self, flow_designation):
        """Sets the flow_designation of this IdentificationChallenge.


        :param flow_designation: The flow_designation of this IdentificationChallenge.
        :type flow_designation: FlowDesignationEnum
        """
        if flow_designation is None:
            raise ValueError("Invalid value for `flow_designation`, must not be `None`")

        self._flow_designation = flow_designation

    @property
    def enroll_url(self):
        """Gets the enroll_url of this IdentificationChallenge.


        :return: The enroll_url of this IdentificationChallenge.
        :rtype: str
        """
        return self._enroll_url

    @enroll_url.setter
    def enroll_url(self, enroll_url):
        """Sets the enroll_url of this IdentificationChallenge.


        :param enroll_url: The enroll_url of this IdentificationChallenge.
        :type enroll_url: str
        """

        self._enroll_url = enroll_url

    @property
    def recovery_url(self):
        """Gets the recovery_url of this IdentificationChallenge.


        :return: The recovery_url of this IdentificationChallenge.
        :rtype: str
        """
        return self._recovery_url

    @recovery_url.setter
    def recovery_url(self, recovery_url):
        """Sets the recovery_url of this IdentificationChallenge.


        :param recovery_url: The recovery_url of this IdentificationChallenge.
        :type recovery_url: str
        """

        self._recovery_url = recovery_url

    @property
    def passwordless_url(self):
        """Gets the passwordless_url of this IdentificationChallenge.


        :return: The passwordless_url of this IdentificationChallenge.
        :rtype: str
        """
        return self._passwordless_url

    @passwordless_url.setter
    def passwordless_url(self, passwordless_url):
        """Sets the passwordless_url of this IdentificationChallenge.


        :param passwordless_url: The passwordless_url of this IdentificationChallenge.
        :type passwordless_url: str
        """

        self._passwordless_url = passwordless_url

    @property
    def primary_action(self):
        """Gets the primary_action of this IdentificationChallenge.


        :return: The primary_action of this IdentificationChallenge.
        :rtype: str
        """
        return self._primary_action

    @primary_action.setter
    def primary_action(self, primary_action):
        """Sets the primary_action of this IdentificationChallenge.


        :param primary_action: The primary_action of this IdentificationChallenge.
        :type primary_action: str
        """
        if primary_action is None:
            raise ValueError("Invalid value for `primary_action`, must not be `None`")

        self._primary_action = primary_action

    @property
    def sources(self):
        """Gets the sources of this IdentificationChallenge.


        :return: The sources of this IdentificationChallenge.
        :rtype: List[LoginSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this IdentificationChallenge.


        :param sources: The sources of this IdentificationChallenge.
        :type sources: List[LoginSource]
        """

        self._sources = sources

    @property
    def show_source_labels(self):
        """Gets the show_source_labels of this IdentificationChallenge.


        :return: The show_source_labels of this IdentificationChallenge.
        :rtype: bool
        """
        return self._show_source_labels

    @show_source_labels.setter
    def show_source_labels(self, show_source_labels):
        """Sets the show_source_labels of this IdentificationChallenge.


        :param show_source_labels: The show_source_labels of this IdentificationChallenge.
        :type show_source_labels: bool
        """
        if show_source_labels is None:
            raise ValueError("Invalid value for `show_source_labels`, must not be `None`")

        self._show_source_labels = show_source_labels
