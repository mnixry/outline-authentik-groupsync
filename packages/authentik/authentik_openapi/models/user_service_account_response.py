# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class UserServiceAccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, token: str=None, user_uid: str=None, user_pk: int=None, group_pk: str=None):
        """UserServiceAccountResponse - a model defined in OpenAPI

        :param username: The username of this UserServiceAccountResponse.
        :param token: The token of this UserServiceAccountResponse.
        :param user_uid: The user_uid of this UserServiceAccountResponse.
        :param user_pk: The user_pk of this UserServiceAccountResponse.
        :param group_pk: The group_pk of this UserServiceAccountResponse.
        """
        self.openapi_types = {
            'username': str,
            'token': str,
            'user_uid': str,
            'user_pk': int,
            'group_pk': str
        }

        self.attribute_map = {
            'username': 'username',
            'token': 'token',
            'user_uid': 'user_uid',
            'user_pk': 'user_pk',
            'group_pk': 'group_pk'
        }

        self._username = username
        self._token = token
        self._user_uid = user_uid
        self._user_pk = user_pk
        self._group_pk = group_pk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserServiceAccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserServiceAccountResponse of this UserServiceAccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this UserServiceAccountResponse.


        :return: The username of this UserServiceAccountResponse.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserServiceAccountResponse.


        :param username: The username of this UserServiceAccountResponse.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def token(self):
        """Gets the token of this UserServiceAccountResponse.


        :return: The token of this UserServiceAccountResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserServiceAccountResponse.


        :param token: The token of this UserServiceAccountResponse.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def user_uid(self):
        """Gets the user_uid of this UserServiceAccountResponse.


        :return: The user_uid of this UserServiceAccountResponse.
        :rtype: str
        """
        return self._user_uid

    @user_uid.setter
    def user_uid(self, user_uid):
        """Sets the user_uid of this UserServiceAccountResponse.


        :param user_uid: The user_uid of this UserServiceAccountResponse.
        :type user_uid: str
        """
        if user_uid is None:
            raise ValueError("Invalid value for `user_uid`, must not be `None`")

        self._user_uid = user_uid

    @property
    def user_pk(self):
        """Gets the user_pk of this UserServiceAccountResponse.


        :return: The user_pk of this UserServiceAccountResponse.
        :rtype: int
        """
        return self._user_pk

    @user_pk.setter
    def user_pk(self, user_pk):
        """Sets the user_pk of this UserServiceAccountResponse.


        :param user_pk: The user_pk of this UserServiceAccountResponse.
        :type user_pk: int
        """
        if user_pk is None:
            raise ValueError("Invalid value for `user_pk`, must not be `None`")

        self._user_pk = user_pk

    @property
    def group_pk(self):
        """Gets the group_pk of this UserServiceAccountResponse.


        :return: The group_pk of this UserServiceAccountResponse.
        :rtype: str
        """
        return self._group_pk

    @group_pk.setter
    def group_pk(self, group_pk):
        """Sets the group_pk of this UserServiceAccountResponse.


        :param group_pk: The group_pk of this UserServiceAccountResponse.
        :type group_pk: str
        """

        self._group_pk = group_pk
