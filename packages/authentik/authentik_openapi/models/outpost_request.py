# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.outpost_type_enum import OutpostTypeEnum
from authentik_openapi import util


class OutpostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: OutpostTypeEnum=None, providers: List[int]=None, service_connection: str=None, config: Dict[str, object]=None, managed: str=None):
        """OutpostRequest - a model defined in OpenAPI

        :param name: The name of this OutpostRequest.
        :param type: The type of this OutpostRequest.
        :param providers: The providers of this OutpostRequest.
        :param service_connection: The service_connection of this OutpostRequest.
        :param config: The config of this OutpostRequest.
        :param managed: The managed of this OutpostRequest.
        """
        self.openapi_types = {
            'name': str,
            'type': OutpostTypeEnum,
            'providers': List[int],
            'service_connection': str,
            'config': Dict[str, object],
            'managed': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'providers': 'providers',
            'service_connection': 'service_connection',
            'config': 'config',
            'managed': 'managed'
        }

        self._name = name
        self._type = type
        self._providers = providers
        self._service_connection = service_connection
        self._config = config
        self._managed = managed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutpostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutpostRequest of this OutpostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this OutpostRequest.


        :return: The name of this OutpostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OutpostRequest.


        :param name: The name of this OutpostRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this OutpostRequest.


        :return: The type of this OutpostRequest.
        :rtype: OutpostTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OutpostRequest.


        :param type: The type of this OutpostRequest.
        :type type: OutpostTypeEnum
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def providers(self):
        """Gets the providers of this OutpostRequest.


        :return: The providers of this OutpostRequest.
        :rtype: List[int]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this OutpostRequest.


        :param providers: The providers of this OutpostRequest.
        :type providers: List[int]
        """
        if providers is None:
            raise ValueError("Invalid value for `providers`, must not be `None`")

        self._providers = providers

    @property
    def service_connection(self):
        """Gets the service_connection of this OutpostRequest.

        Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.

        :return: The service_connection of this OutpostRequest.
        :rtype: str
        """
        return self._service_connection

    @service_connection.setter
    def service_connection(self, service_connection):
        """Sets the service_connection of this OutpostRequest.

        Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.

        :param service_connection: The service_connection of this OutpostRequest.
        :type service_connection: str
        """

        self._service_connection = service_connection

    @property
    def config(self):
        """Gets the config of this OutpostRequest.


        :return: The config of this OutpostRequest.
        :rtype: Dict[str, object]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this OutpostRequest.


        :param config: The config of this OutpostRequest.
        :type config: Dict[str, object]
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def managed(self):
        """Gets the managed of this OutpostRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this OutpostRequest.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this OutpostRequest.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this OutpostRequest.
        :type managed: str
        """
        if managed is not None and len(managed) < 1:
            raise ValueError("Invalid value for `managed`, length must be greater than or equal to `1`")

        self._managed = managed
