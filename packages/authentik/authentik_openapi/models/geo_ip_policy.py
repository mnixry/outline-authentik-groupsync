# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.country_code_enum import CountryCodeEnum
from authentik_openapi.models.detailed_country_field import DetailedCountryField
from authentik_openapi import util


class GeoIPPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, execution_logging: bool=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, bound_to: int=None, asns: List[int]=None, countries: List[CountryCodeEnum]=None, countries_obj: List[DetailedCountryField]=None):
        """GeoIPPolicy - a model defined in OpenAPI

        :param pk: The pk of this GeoIPPolicy.
        :param name: The name of this GeoIPPolicy.
        :param execution_logging: The execution_logging of this GeoIPPolicy.
        :param component: The component of this GeoIPPolicy.
        :param verbose_name: The verbose_name of this GeoIPPolicy.
        :param verbose_name_plural: The verbose_name_plural of this GeoIPPolicy.
        :param meta_model_name: The meta_model_name of this GeoIPPolicy.
        :param bound_to: The bound_to of this GeoIPPolicy.
        :param asns: The asns of this GeoIPPolicy.
        :param countries: The countries of this GeoIPPolicy.
        :param countries_obj: The countries_obj of this GeoIPPolicy.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'execution_logging': bool,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'bound_to': int,
            'asns': List[int],
            'countries': List[CountryCodeEnum],
            'countries_obj': List[DetailedCountryField]
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'execution_logging': 'execution_logging',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'bound_to': 'bound_to',
            'asns': 'asns',
            'countries': 'countries',
            'countries_obj': 'countries_obj'
        }

        self._pk = pk
        self._name = name
        self._execution_logging = execution_logging
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._bound_to = bound_to
        self._asns = asns
        self._countries = countries
        self._countries_obj = countries_obj

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoIPPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoIPPolicy of this GeoIPPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this GeoIPPolicy.


        :return: The pk of this GeoIPPolicy.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this GeoIPPolicy.


        :param pk: The pk of this GeoIPPolicy.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this GeoIPPolicy.


        :return: The name of this GeoIPPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeoIPPolicy.


        :param name: The name of this GeoIPPolicy.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def execution_logging(self):
        """Gets the execution_logging of this GeoIPPolicy.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :return: The execution_logging of this GeoIPPolicy.
        :rtype: bool
        """
        return self._execution_logging

    @execution_logging.setter
    def execution_logging(self, execution_logging):
        """Sets the execution_logging of this GeoIPPolicy.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :param execution_logging: The execution_logging of this GeoIPPolicy.
        :type execution_logging: bool
        """

        self._execution_logging = execution_logging

    @property
    def component(self):
        """Gets the component of this GeoIPPolicy.

        Get object component so that we know how to edit the object

        :return: The component of this GeoIPPolicy.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this GeoIPPolicy.

        Get object component so that we know how to edit the object

        :param component: The component of this GeoIPPolicy.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this GeoIPPolicy.

        Return object's verbose_name

        :return: The verbose_name of this GeoIPPolicy.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this GeoIPPolicy.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this GeoIPPolicy.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this GeoIPPolicy.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this GeoIPPolicy.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this GeoIPPolicy.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this GeoIPPolicy.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this GeoIPPolicy.

        Return internal model name

        :return: The meta_model_name of this GeoIPPolicy.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this GeoIPPolicy.

        Return internal model name

        :param meta_model_name: The meta_model_name of this GeoIPPolicy.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def bound_to(self):
        """Gets the bound_to of this GeoIPPolicy.

        Return objects policy is bound to

        :return: The bound_to of this GeoIPPolicy.
        :rtype: int
        """
        return self._bound_to

    @bound_to.setter
    def bound_to(self, bound_to):
        """Sets the bound_to of this GeoIPPolicy.

        Return objects policy is bound to

        :param bound_to: The bound_to of this GeoIPPolicy.
        :type bound_to: int
        """
        if bound_to is None:
            raise ValueError("Invalid value for `bound_to`, must not be `None`")

        self._bound_to = bound_to

    @property
    def asns(self):
        """Gets the asns of this GeoIPPolicy.


        :return: The asns of this GeoIPPolicy.
        :rtype: List[int]
        """
        return self._asns

    @asns.setter
    def asns(self, asns):
        """Sets the asns of this GeoIPPolicy.


        :param asns: The asns of this GeoIPPolicy.
        :type asns: List[int]
        """

        self._asns = asns

    @property
    def countries(self):
        """Gets the countries of this GeoIPPolicy.


        :return: The countries of this GeoIPPolicy.
        :rtype: List[CountryCodeEnum]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this GeoIPPolicy.


        :param countries: The countries of this GeoIPPolicy.
        :type countries: List[CountryCodeEnum]
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")
        if countries is not None and len(countries) > 249:
            raise ValueError("Invalid value for `countries`, number of items must be less than or equal to `249`")

        self._countries = countries

    @property
    def countries_obj(self):
        """Gets the countries_obj of this GeoIPPolicy.


        :return: The countries_obj of this GeoIPPolicy.
        :rtype: List[DetailedCountryField]
        """
        return self._countries_obj

    @countries_obj.setter
    def countries_obj(self, countries_obj):
        """Sets the countries_obj of this GeoIPPolicy.


        :param countries_obj: The countries_obj of this GeoIPPolicy.
        :type countries_obj: List[DetailedCountryField]
        """
        if countries_obj is None:
            raise ValueError("Invalid value for `countries_obj`, must not be `None`")

        self._countries_obj = countries_obj
