# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.app_enum import AppEnum
from authentik_openapi.models.event_actions import EventActions
from authentik_openapi.models.model_enum import ModelEnum
from authentik_openapi import util


class PatchedEventMatcherPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, execution_logging: bool=None, action: EventActions=None, client_ip: str=None, app: AppEnum=None, model: ModelEnum=None):
        """PatchedEventMatcherPolicyRequest - a model defined in OpenAPI

        :param name: The name of this PatchedEventMatcherPolicyRequest.
        :param execution_logging: The execution_logging of this PatchedEventMatcherPolicyRequest.
        :param action: The action of this PatchedEventMatcherPolicyRequest.
        :param client_ip: The client_ip of this PatchedEventMatcherPolicyRequest.
        :param app: The app of this PatchedEventMatcherPolicyRequest.
        :param model: The model of this PatchedEventMatcherPolicyRequest.
        """
        self.openapi_types = {
            'name': str,
            'execution_logging': bool,
            'action': EventActions,
            'client_ip': str,
            'app': AppEnum,
            'model': ModelEnum
        }

        self.attribute_map = {
            'name': 'name',
            'execution_logging': 'execution_logging',
            'action': 'action',
            'client_ip': 'client_ip',
            'app': 'app',
            'model': 'model'
        }

        self._name = name
        self._execution_logging = execution_logging
        self._action = action
        self._client_ip = client_ip
        self._app = app
        self._model = model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedEventMatcherPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedEventMatcherPolicyRequest of this PatchedEventMatcherPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedEventMatcherPolicyRequest.


        :return: The name of this PatchedEventMatcherPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedEventMatcherPolicyRequest.


        :param name: The name of this PatchedEventMatcherPolicyRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def execution_logging(self):
        """Gets the execution_logging of this PatchedEventMatcherPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :return: The execution_logging of this PatchedEventMatcherPolicyRequest.
        :rtype: bool
        """
        return self._execution_logging

    @execution_logging.setter
    def execution_logging(self, execution_logging):
        """Sets the execution_logging of this PatchedEventMatcherPolicyRequest.

        When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.

        :param execution_logging: The execution_logging of this PatchedEventMatcherPolicyRequest.
        :type execution_logging: bool
        """

        self._execution_logging = execution_logging

    @property
    def action(self):
        """Gets the action of this PatchedEventMatcherPolicyRequest.

        Match created events with this action type. When left empty, all action types will be matched.

        :return: The action of this PatchedEventMatcherPolicyRequest.
        :rtype: EventActions
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PatchedEventMatcherPolicyRequest.

        Match created events with this action type. When left empty, all action types will be matched.

        :param action: The action of this PatchedEventMatcherPolicyRequest.
        :type action: EventActions
        """

        self._action = action

    @property
    def client_ip(self):
        """Gets the client_ip of this PatchedEventMatcherPolicyRequest.

        Matches Event's Client IP (strict matching, for network matching use an Expression Policy)

        :return: The client_ip of this PatchedEventMatcherPolicyRequest.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this PatchedEventMatcherPolicyRequest.

        Matches Event's Client IP (strict matching, for network matching use an Expression Policy)

        :param client_ip: The client_ip of this PatchedEventMatcherPolicyRequest.
        :type client_ip: str
        """
        if client_ip is not None and len(client_ip) < 1:
            raise ValueError("Invalid value for `client_ip`, length must be greater than or equal to `1`")

        self._client_ip = client_ip

    @property
    def app(self):
        """Gets the app of this PatchedEventMatcherPolicyRequest.

        Match events created by selected application. When left empty, all applications are matched.

        :return: The app of this PatchedEventMatcherPolicyRequest.
        :rtype: AppEnum
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this PatchedEventMatcherPolicyRequest.

        Match events created by selected application. When left empty, all applications are matched.

        :param app: The app of this PatchedEventMatcherPolicyRequest.
        :type app: AppEnum
        """

        self._app = app

    @property
    def model(self):
        """Gets the model of this PatchedEventMatcherPolicyRequest.

        Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.

        :return: The model of this PatchedEventMatcherPolicyRequest.
        :rtype: ModelEnum
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PatchedEventMatcherPolicyRequest.

        Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application's models are matched.

        :param model: The model of this PatchedEventMatcherPolicyRequest.
        :type model: ModelEnum
        """

        self._model = model
