# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set import FlowSet
from authentik_openapi import util


class CaptchaStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, flow_set: List[FlowSet]=None, public_key: str=None, js_url: str=None, api_url: str=None, score_min_threshold: float=None, score_max_threshold: float=None, error_on_invalid_score: bool=None):
        """CaptchaStage - a model defined in OpenAPI

        :param pk: The pk of this CaptchaStage.
        :param name: The name of this CaptchaStage.
        :param component: The component of this CaptchaStage.
        :param verbose_name: The verbose_name of this CaptchaStage.
        :param verbose_name_plural: The verbose_name_plural of this CaptchaStage.
        :param meta_model_name: The meta_model_name of this CaptchaStage.
        :param flow_set: The flow_set of this CaptchaStage.
        :param public_key: The public_key of this CaptchaStage.
        :param js_url: The js_url of this CaptchaStage.
        :param api_url: The api_url of this CaptchaStage.
        :param score_min_threshold: The score_min_threshold of this CaptchaStage.
        :param score_max_threshold: The score_max_threshold of this CaptchaStage.
        :param error_on_invalid_score: The error_on_invalid_score of this CaptchaStage.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'flow_set': List[FlowSet],
            'public_key': str,
            'js_url': str,
            'api_url': str,
            'score_min_threshold': float,
            'score_max_threshold': float,
            'error_on_invalid_score': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'flow_set': 'flow_set',
            'public_key': 'public_key',
            'js_url': 'js_url',
            'api_url': 'api_url',
            'score_min_threshold': 'score_min_threshold',
            'score_max_threshold': 'score_max_threshold',
            'error_on_invalid_score': 'error_on_invalid_score'
        }

        self._pk = pk
        self._name = name
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._flow_set = flow_set
        self._public_key = public_key
        self._js_url = js_url
        self._api_url = api_url
        self._score_min_threshold = score_min_threshold
        self._score_max_threshold = score_max_threshold
        self._error_on_invalid_score = error_on_invalid_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptchaStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptchaStage of this CaptchaStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this CaptchaStage.


        :return: The pk of this CaptchaStage.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this CaptchaStage.


        :param pk: The pk of this CaptchaStage.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this CaptchaStage.


        :return: The name of this CaptchaStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CaptchaStage.


        :param name: The name of this CaptchaStage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def component(self):
        """Gets the component of this CaptchaStage.

        Get object type so that we know how to edit the object

        :return: The component of this CaptchaStage.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this CaptchaStage.

        Get object type so that we know how to edit the object

        :param component: The component of this CaptchaStage.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this CaptchaStage.

        Return object's verbose_name

        :return: The verbose_name of this CaptchaStage.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this CaptchaStage.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this CaptchaStage.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this CaptchaStage.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this CaptchaStage.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this CaptchaStage.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this CaptchaStage.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this CaptchaStage.

        Return internal model name

        :return: The meta_model_name of this CaptchaStage.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this CaptchaStage.

        Return internal model name

        :param meta_model_name: The meta_model_name of this CaptchaStage.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def flow_set(self):
        """Gets the flow_set of this CaptchaStage.


        :return: The flow_set of this CaptchaStage.
        :rtype: List[FlowSet]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this CaptchaStage.


        :param flow_set: The flow_set of this CaptchaStage.
        :type flow_set: List[FlowSet]
        """

        self._flow_set = flow_set

    @property
    def public_key(self):
        """Gets the public_key of this CaptchaStage.

        Public key, acquired your captcha Provider.

        :return: The public_key of this CaptchaStage.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this CaptchaStage.

        Public key, acquired your captcha Provider.

        :param public_key: The public_key of this CaptchaStage.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def js_url(self):
        """Gets the js_url of this CaptchaStage.


        :return: The js_url of this CaptchaStage.
        :rtype: str
        """
        return self._js_url

    @js_url.setter
    def js_url(self, js_url):
        """Sets the js_url of this CaptchaStage.


        :param js_url: The js_url of this CaptchaStage.
        :type js_url: str
        """

        self._js_url = js_url

    @property
    def api_url(self):
        """Gets the api_url of this CaptchaStage.


        :return: The api_url of this CaptchaStage.
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this CaptchaStage.


        :param api_url: The api_url of this CaptchaStage.
        :type api_url: str
        """

        self._api_url = api_url

    @property
    def score_min_threshold(self):
        """Gets the score_min_threshold of this CaptchaStage.


        :return: The score_min_threshold of this CaptchaStage.
        :rtype: float
        """
        return self._score_min_threshold

    @score_min_threshold.setter
    def score_min_threshold(self, score_min_threshold):
        """Sets the score_min_threshold of this CaptchaStage.


        :param score_min_threshold: The score_min_threshold of this CaptchaStage.
        :type score_min_threshold: float
        """

        self._score_min_threshold = score_min_threshold

    @property
    def score_max_threshold(self):
        """Gets the score_max_threshold of this CaptchaStage.


        :return: The score_max_threshold of this CaptchaStage.
        :rtype: float
        """
        return self._score_max_threshold

    @score_max_threshold.setter
    def score_max_threshold(self, score_max_threshold):
        """Sets the score_max_threshold of this CaptchaStage.


        :param score_max_threshold: The score_max_threshold of this CaptchaStage.
        :type score_max_threshold: float
        """

        self._score_max_threshold = score_max_threshold

    @property
    def error_on_invalid_score(self):
        """Gets the error_on_invalid_score of this CaptchaStage.

        When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions

        :return: The error_on_invalid_score of this CaptchaStage.
        :rtype: bool
        """
        return self._error_on_invalid_score

    @error_on_invalid_score.setter
    def error_on_invalid_score(self, error_on_invalid_score):
        """Sets the error_on_invalid_score of this CaptchaStage.

        When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions

        :param error_on_invalid_score: The error_on_invalid_score of this CaptchaStage.
        :type error_on_invalid_score: bool
        """

        self._error_on_invalid_score = error_on_invalid_score
