# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_inspector_plan import FlowInspectorPlan
from authentik_openapi import util


class FlowInspection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plans: List[FlowInspectorPlan]=None, current_plan: FlowInspectorPlan=None, is_completed: bool=None):
        """FlowInspection - a model defined in OpenAPI

        :param plans: The plans of this FlowInspection.
        :param current_plan: The current_plan of this FlowInspection.
        :param is_completed: The is_completed of this FlowInspection.
        """
        self.openapi_types = {
            'plans': List[FlowInspectorPlan],
            'current_plan': FlowInspectorPlan,
            'is_completed': bool
        }

        self.attribute_map = {
            'plans': 'plans',
            'current_plan': 'current_plan',
            'is_completed': 'is_completed'
        }

        self._plans = plans
        self._current_plan = current_plan
        self._is_completed = is_completed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowInspection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowInspection of this FlowInspection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plans(self):
        """Gets the plans of this FlowInspection.


        :return: The plans of this FlowInspection.
        :rtype: List[FlowInspectorPlan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this FlowInspection.


        :param plans: The plans of this FlowInspection.
        :type plans: List[FlowInspectorPlan]
        """
        if plans is None:
            raise ValueError("Invalid value for `plans`, must not be `None`")

        self._plans = plans

    @property
    def current_plan(self):
        """Gets the current_plan of this FlowInspection.


        :return: The current_plan of this FlowInspection.
        :rtype: FlowInspectorPlan
        """
        return self._current_plan

    @current_plan.setter
    def current_plan(self, current_plan):
        """Sets the current_plan of this FlowInspection.


        :param current_plan: The current_plan of this FlowInspection.
        :type current_plan: FlowInspectorPlan
        """

        self._current_plan = current_plan

    @property
    def is_completed(self):
        """Gets the is_completed of this FlowInspection.


        :return: The is_completed of this FlowInspection.
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this FlowInspection.


        :param is_completed: The is_completed of this FlowInspection.
        :type is_completed: bool
        """
        if is_completed is None:
            raise ValueError("Invalid value for `is_completed`, must not be `None`")

        self._is_completed = is_completed
