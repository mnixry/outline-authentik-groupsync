# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.login_challenge_types import LoginChallengeTypes
from authentik_openapi import util


class LoginSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, icon_url: str=None, challenge: LoginChallengeTypes=None):
        """LoginSource - a model defined in OpenAPI

        :param name: The name of this LoginSource.
        :param icon_url: The icon_url of this LoginSource.
        :param challenge: The challenge of this LoginSource.
        """
        self.openapi_types = {
            'name': str,
            'icon_url': str,
            'challenge': LoginChallengeTypes
        }

        self.attribute_map = {
            'name': 'name',
            'icon_url': 'icon_url',
            'challenge': 'challenge'
        }

        self._name = name
        self._icon_url = icon_url
        self._challenge = challenge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginSource of this LoginSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this LoginSource.


        :return: The name of this LoginSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoginSource.


        :param name: The name of this LoginSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def icon_url(self):
        """Gets the icon_url of this LoginSource.


        :return: The icon_url of this LoginSource.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this LoginSource.


        :param icon_url: The icon_url of this LoginSource.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def challenge(self):
        """Gets the challenge of this LoginSource.


        :return: The challenge of this LoginSource.
        :rtype: LoginChallengeTypes
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this LoginSource.


        :param challenge: The challenge of this LoginSource.
        :type challenge: LoginChallengeTypes
        """
        if challenge is None:
            raise ValueError("Invalid value for `challenge`, must not be `None`")

        self._challenge = challenge
