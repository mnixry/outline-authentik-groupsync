# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.authenticator_attachment_enum import AuthenticatorAttachmentEnum
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi.models.resident_key_requirement_enum import ResidentKeyRequirementEnum
from authentik_openapi.models.user_verification_enum import UserVerificationEnum
from authentik_openapi import util


class PatchedAuthenticatorWebAuthnStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, configure_flow: str=None, friendly_name: str=None, user_verification: UserVerificationEnum=None, authenticator_attachment: AuthenticatorAttachmentEnum=None, resident_key_requirement: ResidentKeyRequirementEnum=None, device_type_restrictions: List[str]=None):
        """PatchedAuthenticatorWebAuthnStageRequest - a model defined in OpenAPI

        :param name: The name of this PatchedAuthenticatorWebAuthnStageRequest.
        :param flow_set: The flow_set of this PatchedAuthenticatorWebAuthnStageRequest.
        :param configure_flow: The configure_flow of this PatchedAuthenticatorWebAuthnStageRequest.
        :param friendly_name: The friendly_name of this PatchedAuthenticatorWebAuthnStageRequest.
        :param user_verification: The user_verification of this PatchedAuthenticatorWebAuthnStageRequest.
        :param authenticator_attachment: The authenticator_attachment of this PatchedAuthenticatorWebAuthnStageRequest.
        :param resident_key_requirement: The resident_key_requirement of this PatchedAuthenticatorWebAuthnStageRequest.
        :param device_type_restrictions: The device_type_restrictions of this PatchedAuthenticatorWebAuthnStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'configure_flow': str,
            'friendly_name': str,
            'user_verification': UserVerificationEnum,
            'authenticator_attachment': AuthenticatorAttachmentEnum,
            'resident_key_requirement': ResidentKeyRequirementEnum,
            'device_type_restrictions': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'configure_flow': 'configure_flow',
            'friendly_name': 'friendly_name',
            'user_verification': 'user_verification',
            'authenticator_attachment': 'authenticator_attachment',
            'resident_key_requirement': 'resident_key_requirement',
            'device_type_restrictions': 'device_type_restrictions'
        }

        self._name = name
        self._flow_set = flow_set
        self._configure_flow = configure_flow
        self._friendly_name = friendly_name
        self._user_verification = user_verification
        self._authenticator_attachment = authenticator_attachment
        self._resident_key_requirement = resident_key_requirement
        self._device_type_restrictions = device_type_restrictions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedAuthenticatorWebAuthnStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedAuthenticatorWebAuthnStageRequest of this PatchedAuthenticatorWebAuthnStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedAuthenticatorWebAuthnStageRequest.


        :return: The name of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedAuthenticatorWebAuthnStageRequest.


        :param name: The name of this PatchedAuthenticatorWebAuthnStageRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this PatchedAuthenticatorWebAuthnStageRequest.


        :return: The flow_set of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this PatchedAuthenticatorWebAuthnStageRequest.


        :param flow_set: The flow_set of this PatchedAuthenticatorWebAuthnStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def configure_flow(self):
        """Gets the configure_flow of this PatchedAuthenticatorWebAuthnStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :return: The configure_flow of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: str
        """
        return self._configure_flow

    @configure_flow.setter
    def configure_flow(self, configure_flow):
        """Sets the configure_flow of this PatchedAuthenticatorWebAuthnStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :param configure_flow: The configure_flow of this PatchedAuthenticatorWebAuthnStageRequest.
        :type configure_flow: str
        """

        self._configure_flow = configure_flow

    @property
    def friendly_name(self):
        """Gets the friendly_name of this PatchedAuthenticatorWebAuthnStageRequest.


        :return: The friendly_name of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this PatchedAuthenticatorWebAuthnStageRequest.


        :param friendly_name: The friendly_name of this PatchedAuthenticatorWebAuthnStageRequest.
        :type friendly_name: str
        """
        if friendly_name is not None and len(friendly_name) < 1:
            raise ValueError("Invalid value for `friendly_name`, length must be greater than or equal to `1`")

        self._friendly_name = friendly_name

    @property
    def user_verification(self):
        """Gets the user_verification of this PatchedAuthenticatorWebAuthnStageRequest.


        :return: The user_verification of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: UserVerificationEnum
        """
        return self._user_verification

    @user_verification.setter
    def user_verification(self, user_verification):
        """Sets the user_verification of this PatchedAuthenticatorWebAuthnStageRequest.


        :param user_verification: The user_verification of this PatchedAuthenticatorWebAuthnStageRequest.
        :type user_verification: UserVerificationEnum
        """

        self._user_verification = user_verification

    @property
    def authenticator_attachment(self):
        """Gets the authenticator_attachment of this PatchedAuthenticatorWebAuthnStageRequest.


        :return: The authenticator_attachment of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: AuthenticatorAttachmentEnum
        """
        return self._authenticator_attachment

    @authenticator_attachment.setter
    def authenticator_attachment(self, authenticator_attachment):
        """Sets the authenticator_attachment of this PatchedAuthenticatorWebAuthnStageRequest.


        :param authenticator_attachment: The authenticator_attachment of this PatchedAuthenticatorWebAuthnStageRequest.
        :type authenticator_attachment: AuthenticatorAttachmentEnum
        """

        self._authenticator_attachment = authenticator_attachment

    @property
    def resident_key_requirement(self):
        """Gets the resident_key_requirement of this PatchedAuthenticatorWebAuthnStageRequest.


        :return: The resident_key_requirement of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: ResidentKeyRequirementEnum
        """
        return self._resident_key_requirement

    @resident_key_requirement.setter
    def resident_key_requirement(self, resident_key_requirement):
        """Sets the resident_key_requirement of this PatchedAuthenticatorWebAuthnStageRequest.


        :param resident_key_requirement: The resident_key_requirement of this PatchedAuthenticatorWebAuthnStageRequest.
        :type resident_key_requirement: ResidentKeyRequirementEnum
        """

        self._resident_key_requirement = resident_key_requirement

    @property
    def device_type_restrictions(self):
        """Gets the device_type_restrictions of this PatchedAuthenticatorWebAuthnStageRequest.


        :return: The device_type_restrictions of this PatchedAuthenticatorWebAuthnStageRequest.
        :rtype: List[str]
        """
        return self._device_type_restrictions

    @device_type_restrictions.setter
    def device_type_restrictions(self, device_type_restrictions):
        """Sets the device_type_restrictions of this PatchedAuthenticatorWebAuthnStageRequest.


        :param device_type_restrictions: The device_type_restrictions of this PatchedAuthenticatorWebAuthnStageRequest.
        :type device_type_restrictions: List[str]
        """

        self._device_type_restrictions = device_type_restrictions
