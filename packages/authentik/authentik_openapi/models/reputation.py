# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class Reputation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, identifier: str=None, ip: str=None, ip_geo_data: object=None, ip_asn_data: object=None, score: int=None, updated: datetime=None):
        """Reputation - a model defined in OpenAPI

        :param pk: The pk of this Reputation.
        :param identifier: The identifier of this Reputation.
        :param ip: The ip of this Reputation.
        :param ip_geo_data: The ip_geo_data of this Reputation.
        :param ip_asn_data: The ip_asn_data of this Reputation.
        :param score: The score of this Reputation.
        :param updated: The updated of this Reputation.
        """
        self.openapi_types = {
            'pk': str,
            'identifier': str,
            'ip': str,
            'ip_geo_data': object,
            'ip_asn_data': object,
            'score': int,
            'updated': datetime
        }

        self.attribute_map = {
            'pk': 'pk',
            'identifier': 'identifier',
            'ip': 'ip',
            'ip_geo_data': 'ip_geo_data',
            'ip_asn_data': 'ip_asn_data',
            'score': 'score',
            'updated': 'updated'
        }

        self._pk = pk
        self._identifier = identifier
        self._ip = ip
        self._ip_geo_data = ip_geo_data
        self._ip_asn_data = ip_asn_data
        self._score = score
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reputation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reputation of this Reputation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Reputation.


        :return: The pk of this Reputation.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Reputation.


        :param pk: The pk of this Reputation.
        :type pk: str
        """

        self._pk = pk

    @property
    def identifier(self):
        """Gets the identifier of this Reputation.


        :return: The identifier of this Reputation.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Reputation.


        :param identifier: The identifier of this Reputation.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def ip(self):
        """Gets the ip of this Reputation.


        :return: The ip of this Reputation.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Reputation.


        :param ip: The ip of this Reputation.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def ip_geo_data(self):
        """Gets the ip_geo_data of this Reputation.


        :return: The ip_geo_data of this Reputation.
        :rtype: object
        """
        return self._ip_geo_data

    @ip_geo_data.setter
    def ip_geo_data(self, ip_geo_data):
        """Sets the ip_geo_data of this Reputation.


        :param ip_geo_data: The ip_geo_data of this Reputation.
        :type ip_geo_data: object
        """

        self._ip_geo_data = ip_geo_data

    @property
    def ip_asn_data(self):
        """Gets the ip_asn_data of this Reputation.


        :return: The ip_asn_data of this Reputation.
        :rtype: object
        """
        return self._ip_asn_data

    @ip_asn_data.setter
    def ip_asn_data(self, ip_asn_data):
        """Sets the ip_asn_data of this Reputation.


        :param ip_asn_data: The ip_asn_data of this Reputation.
        :type ip_asn_data: object
        """

        self._ip_asn_data = ip_asn_data

    @property
    def score(self):
        """Gets the score of this Reputation.


        :return: The score of this Reputation.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Reputation.


        :param score: The score of this Reputation.
        :type score: int
        """
        if score is not None and score > 9223372036854775807:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `9223372036854775807`")
        if score is not None and score < -9223372036854775808:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `-9223372036854775808`")

        self._score = score

    @property
    def updated(self):
        """Gets the updated of this Reputation.


        :return: The updated of this Reputation.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Reputation.


        :param updated: The updated of this Reputation.
        :type updated: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated
