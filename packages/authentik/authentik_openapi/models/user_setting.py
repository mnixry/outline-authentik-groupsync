# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class UserSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_uid: str=None, component: str=None, title: str=None, configure_url: str=None, icon_url: str=None):
        """UserSetting - a model defined in OpenAPI

        :param object_uid: The object_uid of this UserSetting.
        :param component: The component of this UserSetting.
        :param title: The title of this UserSetting.
        :param configure_url: The configure_url of this UserSetting.
        :param icon_url: The icon_url of this UserSetting.
        """
        self.openapi_types = {
            'object_uid': str,
            'component': str,
            'title': str,
            'configure_url': str,
            'icon_url': str
        }

        self.attribute_map = {
            'object_uid': 'object_uid',
            'component': 'component',
            'title': 'title',
            'configure_url': 'configure_url',
            'icon_url': 'icon_url'
        }

        self._object_uid = object_uid
        self._component = component
        self._title = title
        self._configure_url = configure_url
        self._icon_url = icon_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserSetting of this UserSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_uid(self):
        """Gets the object_uid of this UserSetting.


        :return: The object_uid of this UserSetting.
        :rtype: str
        """
        return self._object_uid

    @object_uid.setter
    def object_uid(self, object_uid):
        """Sets the object_uid of this UserSetting.


        :param object_uid: The object_uid of this UserSetting.
        :type object_uid: str
        """
        if object_uid is None:
            raise ValueError("Invalid value for `object_uid`, must not be `None`")

        self._object_uid = object_uid

    @property
    def component(self):
        """Gets the component of this UserSetting.


        :return: The component of this UserSetting.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this UserSetting.


        :param component: The component of this UserSetting.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def title(self):
        """Gets the title of this UserSetting.


        :return: The title of this UserSetting.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserSetting.


        :param title: The title of this UserSetting.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def configure_url(self):
        """Gets the configure_url of this UserSetting.


        :return: The configure_url of this UserSetting.
        :rtype: str
        """
        return self._configure_url

    @configure_url.setter
    def configure_url(self, configure_url):
        """Sets the configure_url of this UserSetting.


        :param configure_url: The configure_url of this UserSetting.
        :type configure_url: str
        """

        self._configure_url = configure_url

    @property
    def icon_url(self):
        """Gets the icon_url of this UserSetting.


        :return: The icon_url of this UserSetting.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this UserSetting.


        :param icon_url: The icon_url of this UserSetting.
        :type icon_url: str
        """

        self._icon_url = icon_url
