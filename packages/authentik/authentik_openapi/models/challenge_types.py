# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.access_denied_challenge import AccessDeniedChallenge
from authentik_openapi.models.apple_login_challenge import AppleLoginChallenge
from authentik_openapi.models.authenticator_duo_challenge import AuthenticatorDuoChallenge
from authentik_openapi.models.authenticator_sms_challenge import AuthenticatorSMSChallenge
from authentik_openapi.models.authenticator_static_challenge import AuthenticatorStaticChallenge
from authentik_openapi.models.authenticator_totp_challenge import AuthenticatorTOTPChallenge
from authentik_openapi.models.authenticator_validation_challenge import AuthenticatorValidationChallenge
from authentik_openapi.models.authenticator_web_authn_challenge import AuthenticatorWebAuthnChallenge
from authentik_openapi.models.autosubmit_challenge import AutosubmitChallenge
from authentik_openapi.models.captcha_challenge import CaptchaChallenge
from authentik_openapi.models.consent_challenge import ConsentChallenge
from authentik_openapi.models.consent_permission import ConsentPermission
from authentik_openapi.models.contextual_flow_info import ContextualFlowInfo
from authentik_openapi.models.device_challenge import DeviceChallenge
from authentik_openapi.models.email_challenge import EmailChallenge
from authentik_openapi.models.error_detail import ErrorDetail
from authentik_openapi.models.flow_designation_enum import FlowDesignationEnum
from authentik_openapi.models.flow_error_challenge import FlowErrorChallenge
from authentik_openapi.models.identification_challenge import IdentificationChallenge
from authentik_openapi.models.login_source import LoginSource
from authentik_openapi.models.o_auth_device_code_challenge import OAuthDeviceCodeChallenge
from authentik_openapi.models.o_auth_device_code_finish_challenge import OAuthDeviceCodeFinishChallenge
from authentik_openapi.models.password_challenge import PasswordChallenge
from authentik_openapi.models.plex_authentication_challenge import PlexAuthenticationChallenge
from authentik_openapi.models.prompt_challenge import PromptChallenge
from authentik_openapi.models.redirect_challenge import RedirectChallenge
from authentik_openapi.models.selectable_stage import SelectableStage
from authentik_openapi.models.shell_challenge import ShellChallenge
from authentik_openapi.models.stage_prompt import StagePrompt
from authentik_openapi.models.user_login_challenge import UserLoginChallenge
from authentik_openapi import util


class ChallengeTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_info: ContextualFlowInfo=None, component: str='ak-stage-user-login', response_errors: Dict[str, List[ErrorDetail]]=None, pending_user: str=None, pending_user_avatar: str=None, error_message: str=None, client_id: str=None, scope: str=None, redirect_uri: str=None, state: str=None, activation_barcode: str=None, activation_code: str=None, stage_uuid: str=None, phone_number_required: bool=True, codes: List[str]=None, config_url: str=None, device_challenges: List[DeviceChallenge]=None, configuration_stages: List[SelectableStage]=None, registration: Dict[str, object]=None, url: str=None, attrs: Dict[str, str]=None, title: str=None, site_key: str=None, js_url: str=None, header_text: str=None, permissions: List[ConsentPermission]=None, additional_permissions: List[ConsentPermission]=None, token: str=None, request_id: str=None, error: str=None, traceback: str=None, user_fields: List[str]=None, password_fields: bool=None, allow_show_password: bool=False, application_pre: str=None, flow_designation: FlowDesignationEnum=None, enroll_url: str=None, recovery_url: str=None, passwordless_url: str=None, primary_action: str=None, sources: List[LoginSource]=None, show_source_labels: bool=None, slug: str=None, fields: List[StagePrompt]=None, to: str=None, body: str=None):
        """ChallengeTypes - a model defined in OpenAPI

        :param flow_info: The flow_info of this ChallengeTypes.
        :param component: The component of this ChallengeTypes.
        :param response_errors: The response_errors of this ChallengeTypes.
        :param pending_user: The pending_user of this ChallengeTypes.
        :param pending_user_avatar: The pending_user_avatar of this ChallengeTypes.
        :param error_message: The error_message of this ChallengeTypes.
        :param client_id: The client_id of this ChallengeTypes.
        :param scope: The scope of this ChallengeTypes.
        :param redirect_uri: The redirect_uri of this ChallengeTypes.
        :param state: The state of this ChallengeTypes.
        :param activation_barcode: The activation_barcode of this ChallengeTypes.
        :param activation_code: The activation_code of this ChallengeTypes.
        :param stage_uuid: The stage_uuid of this ChallengeTypes.
        :param phone_number_required: The phone_number_required of this ChallengeTypes.
        :param codes: The codes of this ChallengeTypes.
        :param config_url: The config_url of this ChallengeTypes.
        :param device_challenges: The device_challenges of this ChallengeTypes.
        :param configuration_stages: The configuration_stages of this ChallengeTypes.
        :param registration: The registration of this ChallengeTypes.
        :param url: The url of this ChallengeTypes.
        :param attrs: The attrs of this ChallengeTypes.
        :param title: The title of this ChallengeTypes.
        :param site_key: The site_key of this ChallengeTypes.
        :param js_url: The js_url of this ChallengeTypes.
        :param header_text: The header_text of this ChallengeTypes.
        :param permissions: The permissions of this ChallengeTypes.
        :param additional_permissions: The additional_permissions of this ChallengeTypes.
        :param token: The token of this ChallengeTypes.
        :param request_id: The request_id of this ChallengeTypes.
        :param error: The error of this ChallengeTypes.
        :param traceback: The traceback of this ChallengeTypes.
        :param user_fields: The user_fields of this ChallengeTypes.
        :param password_fields: The password_fields of this ChallengeTypes.
        :param allow_show_password: The allow_show_password of this ChallengeTypes.
        :param application_pre: The application_pre of this ChallengeTypes.
        :param flow_designation: The flow_designation of this ChallengeTypes.
        :param enroll_url: The enroll_url of this ChallengeTypes.
        :param recovery_url: The recovery_url of this ChallengeTypes.
        :param passwordless_url: The passwordless_url of this ChallengeTypes.
        :param primary_action: The primary_action of this ChallengeTypes.
        :param sources: The sources of this ChallengeTypes.
        :param show_source_labels: The show_source_labels of this ChallengeTypes.
        :param slug: The slug of this ChallengeTypes.
        :param fields: The fields of this ChallengeTypes.
        :param to: The to of this ChallengeTypes.
        :param body: The body of this ChallengeTypes.
        """
        self.openapi_types = {
            'flow_info': ContextualFlowInfo,
            'component': str,
            'response_errors': Dict[str, List[ErrorDetail]],
            'pending_user': str,
            'pending_user_avatar': str,
            'error_message': str,
            'client_id': str,
            'scope': str,
            'redirect_uri': str,
            'state': str,
            'activation_barcode': str,
            'activation_code': str,
            'stage_uuid': str,
            'phone_number_required': bool,
            'codes': List[str],
            'config_url': str,
            'device_challenges': List[DeviceChallenge],
            'configuration_stages': List[SelectableStage],
            'registration': Dict[str, object],
            'url': str,
            'attrs': Dict[str, str],
            'title': str,
            'site_key': str,
            'js_url': str,
            'header_text': str,
            'permissions': List[ConsentPermission],
            'additional_permissions': List[ConsentPermission],
            'token': str,
            'request_id': str,
            'error': str,
            'traceback': str,
            'user_fields': List[str],
            'password_fields': bool,
            'allow_show_password': bool,
            'application_pre': str,
            'flow_designation': FlowDesignationEnum,
            'enroll_url': str,
            'recovery_url': str,
            'passwordless_url': str,
            'primary_action': str,
            'sources': List[LoginSource],
            'show_source_labels': bool,
            'slug': str,
            'fields': List[StagePrompt],
            'to': str,
            'body': str
        }

        self.attribute_map = {
            'flow_info': 'flow_info',
            'component': 'component',
            'response_errors': 'response_errors',
            'pending_user': 'pending_user',
            'pending_user_avatar': 'pending_user_avatar',
            'error_message': 'error_message',
            'client_id': 'client_id',
            'scope': 'scope',
            'redirect_uri': 'redirect_uri',
            'state': 'state',
            'activation_barcode': 'activation_barcode',
            'activation_code': 'activation_code',
            'stage_uuid': 'stage_uuid',
            'phone_number_required': 'phone_number_required',
            'codes': 'codes',
            'config_url': 'config_url',
            'device_challenges': 'device_challenges',
            'configuration_stages': 'configuration_stages',
            'registration': 'registration',
            'url': 'url',
            'attrs': 'attrs',
            'title': 'title',
            'site_key': 'site_key',
            'js_url': 'js_url',
            'header_text': 'header_text',
            'permissions': 'permissions',
            'additional_permissions': 'additional_permissions',
            'token': 'token',
            'request_id': 'request_id',
            'error': 'error',
            'traceback': 'traceback',
            'user_fields': 'user_fields',
            'password_fields': 'password_fields',
            'allow_show_password': 'allow_show_password',
            'application_pre': 'application_pre',
            'flow_designation': 'flow_designation',
            'enroll_url': 'enroll_url',
            'recovery_url': 'recovery_url',
            'passwordless_url': 'passwordless_url',
            'primary_action': 'primary_action',
            'sources': 'sources',
            'show_source_labels': 'show_source_labels',
            'slug': 'slug',
            'fields': 'fields',
            'to': 'to',
            'body': 'body'
        }

        self._flow_info = flow_info
        self._component = component
        self._response_errors = response_errors
        self._pending_user = pending_user
        self._pending_user_avatar = pending_user_avatar
        self._error_message = error_message
        self._client_id = client_id
        self._scope = scope
        self._redirect_uri = redirect_uri
        self._state = state
        self._activation_barcode = activation_barcode
        self._activation_code = activation_code
        self._stage_uuid = stage_uuid
        self._phone_number_required = phone_number_required
        self._codes = codes
        self._config_url = config_url
        self._device_challenges = device_challenges
        self._configuration_stages = configuration_stages
        self._registration = registration
        self._url = url
        self._attrs = attrs
        self._title = title
        self._site_key = site_key
        self._js_url = js_url
        self._header_text = header_text
        self._permissions = permissions
        self._additional_permissions = additional_permissions
        self._token = token
        self._request_id = request_id
        self._error = error
        self._traceback = traceback
        self._user_fields = user_fields
        self._password_fields = password_fields
        self._allow_show_password = allow_show_password
        self._application_pre = application_pre
        self._flow_designation = flow_designation
        self._enroll_url = enroll_url
        self._recovery_url = recovery_url
        self._passwordless_url = passwordless_url
        self._primary_action = primary_action
        self._sources = sources
        self._show_source_labels = show_source_labels
        self._slug = slug
        self._fields = fields
        self._to = to
        self._body = body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChallengeTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChallengeTypes of this ChallengeTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_info(self):
        """Gets the flow_info of this ChallengeTypes.


        :return: The flow_info of this ChallengeTypes.
        :rtype: ContextualFlowInfo
        """
        return self._flow_info

    @flow_info.setter
    def flow_info(self, flow_info):
        """Sets the flow_info of this ChallengeTypes.


        :param flow_info: The flow_info of this ChallengeTypes.
        :type flow_info: ContextualFlowInfo
        """

        self._flow_info = flow_info

    @property
    def component(self):
        """Gets the component of this ChallengeTypes.


        :return: The component of this ChallengeTypes.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ChallengeTypes.


        :param component: The component of this ChallengeTypes.
        :type component: str
        """

        self._component = component

    @property
    def response_errors(self):
        """Gets the response_errors of this ChallengeTypes.


        :return: The response_errors of this ChallengeTypes.
        :rtype: Dict[str, List[ErrorDetail]]
        """
        return self._response_errors

    @response_errors.setter
    def response_errors(self, response_errors):
        """Sets the response_errors of this ChallengeTypes.


        :param response_errors: The response_errors of this ChallengeTypes.
        :type response_errors: Dict[str, List[ErrorDetail]]
        """

        self._response_errors = response_errors

    @property
    def pending_user(self):
        """Gets the pending_user of this ChallengeTypes.


        :return: The pending_user of this ChallengeTypes.
        :rtype: str
        """
        return self._pending_user

    @pending_user.setter
    def pending_user(self, pending_user):
        """Sets the pending_user of this ChallengeTypes.


        :param pending_user: The pending_user of this ChallengeTypes.
        :type pending_user: str
        """
        if pending_user is None:
            raise ValueError("Invalid value for `pending_user`, must not be `None`")

        self._pending_user = pending_user

    @property
    def pending_user_avatar(self):
        """Gets the pending_user_avatar of this ChallengeTypes.


        :return: The pending_user_avatar of this ChallengeTypes.
        :rtype: str
        """
        return self._pending_user_avatar

    @pending_user_avatar.setter
    def pending_user_avatar(self, pending_user_avatar):
        """Sets the pending_user_avatar of this ChallengeTypes.


        :param pending_user_avatar: The pending_user_avatar of this ChallengeTypes.
        :type pending_user_avatar: str
        """
        if pending_user_avatar is None:
            raise ValueError("Invalid value for `pending_user_avatar`, must not be `None`")

        self._pending_user_avatar = pending_user_avatar

    @property
    def error_message(self):
        """Gets the error_message of this ChallengeTypes.


        :return: The error_message of this ChallengeTypes.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ChallengeTypes.


        :param error_message: The error_message of this ChallengeTypes.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def client_id(self):
        """Gets the client_id of this ChallengeTypes.


        :return: The client_id of this ChallengeTypes.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ChallengeTypes.


        :param client_id: The client_id of this ChallengeTypes.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def scope(self):
        """Gets the scope of this ChallengeTypes.


        :return: The scope of this ChallengeTypes.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ChallengeTypes.


        :param scope: The scope of this ChallengeTypes.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this ChallengeTypes.


        :return: The redirect_uri of this ChallengeTypes.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this ChallengeTypes.


        :param redirect_uri: The redirect_uri of this ChallengeTypes.
        :type redirect_uri: str
        """
        if redirect_uri is None:
            raise ValueError("Invalid value for `redirect_uri`, must not be `None`")

        self._redirect_uri = redirect_uri

    @property
    def state(self):
        """Gets the state of this ChallengeTypes.


        :return: The state of this ChallengeTypes.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ChallengeTypes.


        :param state: The state of this ChallengeTypes.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def activation_barcode(self):
        """Gets the activation_barcode of this ChallengeTypes.


        :return: The activation_barcode of this ChallengeTypes.
        :rtype: str
        """
        return self._activation_barcode

    @activation_barcode.setter
    def activation_barcode(self, activation_barcode):
        """Sets the activation_barcode of this ChallengeTypes.


        :param activation_barcode: The activation_barcode of this ChallengeTypes.
        :type activation_barcode: str
        """
        if activation_barcode is None:
            raise ValueError("Invalid value for `activation_barcode`, must not be `None`")

        self._activation_barcode = activation_barcode

    @property
    def activation_code(self):
        """Gets the activation_code of this ChallengeTypes.


        :return: The activation_code of this ChallengeTypes.
        :rtype: str
        """
        return self._activation_code

    @activation_code.setter
    def activation_code(self, activation_code):
        """Sets the activation_code of this ChallengeTypes.


        :param activation_code: The activation_code of this ChallengeTypes.
        :type activation_code: str
        """
        if activation_code is None:
            raise ValueError("Invalid value for `activation_code`, must not be `None`")

        self._activation_code = activation_code

    @property
    def stage_uuid(self):
        """Gets the stage_uuid of this ChallengeTypes.


        :return: The stage_uuid of this ChallengeTypes.
        :rtype: str
        """
        return self._stage_uuid

    @stage_uuid.setter
    def stage_uuid(self, stage_uuid):
        """Sets the stage_uuid of this ChallengeTypes.


        :param stage_uuid: The stage_uuid of this ChallengeTypes.
        :type stage_uuid: str
        """
        if stage_uuid is None:
            raise ValueError("Invalid value for `stage_uuid`, must not be `None`")

        self._stage_uuid = stage_uuid

    @property
    def phone_number_required(self):
        """Gets the phone_number_required of this ChallengeTypes.


        :return: The phone_number_required of this ChallengeTypes.
        :rtype: bool
        """
        return self._phone_number_required

    @phone_number_required.setter
    def phone_number_required(self, phone_number_required):
        """Sets the phone_number_required of this ChallengeTypes.


        :param phone_number_required: The phone_number_required of this ChallengeTypes.
        :type phone_number_required: bool
        """

        self._phone_number_required = phone_number_required

    @property
    def codes(self):
        """Gets the codes of this ChallengeTypes.


        :return: The codes of this ChallengeTypes.
        :rtype: List[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this ChallengeTypes.


        :param codes: The codes of this ChallengeTypes.
        :type codes: List[str]
        """
        if codes is None:
            raise ValueError("Invalid value for `codes`, must not be `None`")

        self._codes = codes

    @property
    def config_url(self):
        """Gets the config_url of this ChallengeTypes.


        :return: The config_url of this ChallengeTypes.
        :rtype: str
        """
        return self._config_url

    @config_url.setter
    def config_url(self, config_url):
        """Sets the config_url of this ChallengeTypes.


        :param config_url: The config_url of this ChallengeTypes.
        :type config_url: str
        """
        if config_url is None:
            raise ValueError("Invalid value for `config_url`, must not be `None`")

        self._config_url = config_url

    @property
    def device_challenges(self):
        """Gets the device_challenges of this ChallengeTypes.


        :return: The device_challenges of this ChallengeTypes.
        :rtype: List[DeviceChallenge]
        """
        return self._device_challenges

    @device_challenges.setter
    def device_challenges(self, device_challenges):
        """Sets the device_challenges of this ChallengeTypes.


        :param device_challenges: The device_challenges of this ChallengeTypes.
        :type device_challenges: List[DeviceChallenge]
        """
        if device_challenges is None:
            raise ValueError("Invalid value for `device_challenges`, must not be `None`")

        self._device_challenges = device_challenges

    @property
    def configuration_stages(self):
        """Gets the configuration_stages of this ChallengeTypes.


        :return: The configuration_stages of this ChallengeTypes.
        :rtype: List[SelectableStage]
        """
        return self._configuration_stages

    @configuration_stages.setter
    def configuration_stages(self, configuration_stages):
        """Sets the configuration_stages of this ChallengeTypes.


        :param configuration_stages: The configuration_stages of this ChallengeTypes.
        :type configuration_stages: List[SelectableStage]
        """
        if configuration_stages is None:
            raise ValueError("Invalid value for `configuration_stages`, must not be `None`")

        self._configuration_stages = configuration_stages

    @property
    def registration(self):
        """Gets the registration of this ChallengeTypes.


        :return: The registration of this ChallengeTypes.
        :rtype: Dict[str, object]
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this ChallengeTypes.


        :param registration: The registration of this ChallengeTypes.
        :type registration: Dict[str, object]
        """
        if registration is None:
            raise ValueError("Invalid value for `registration`, must not be `None`")

        self._registration = registration

    @property
    def url(self):
        """Gets the url of this ChallengeTypes.


        :return: The url of this ChallengeTypes.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ChallengeTypes.


        :param url: The url of this ChallengeTypes.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def attrs(self):
        """Gets the attrs of this ChallengeTypes.


        :return: The attrs of this ChallengeTypes.
        :rtype: Dict[str, str]
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this ChallengeTypes.


        :param attrs: The attrs of this ChallengeTypes.
        :type attrs: Dict[str, str]
        """
        if attrs is None:
            raise ValueError("Invalid value for `attrs`, must not be `None`")

        self._attrs = attrs

    @property
    def title(self):
        """Gets the title of this ChallengeTypes.


        :return: The title of this ChallengeTypes.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChallengeTypes.


        :param title: The title of this ChallengeTypes.
        :type title: str
        """

        self._title = title

    @property
    def site_key(self):
        """Gets the site_key of this ChallengeTypes.


        :return: The site_key of this ChallengeTypes.
        :rtype: str
        """
        return self._site_key

    @site_key.setter
    def site_key(self, site_key):
        """Sets the site_key of this ChallengeTypes.


        :param site_key: The site_key of this ChallengeTypes.
        :type site_key: str
        """
        if site_key is None:
            raise ValueError("Invalid value for `site_key`, must not be `None`")

        self._site_key = site_key

    @property
    def js_url(self):
        """Gets the js_url of this ChallengeTypes.


        :return: The js_url of this ChallengeTypes.
        :rtype: str
        """
        return self._js_url

    @js_url.setter
    def js_url(self, js_url):
        """Sets the js_url of this ChallengeTypes.


        :param js_url: The js_url of this ChallengeTypes.
        :type js_url: str
        """
        if js_url is None:
            raise ValueError("Invalid value for `js_url`, must not be `None`")

        self._js_url = js_url

    @property
    def header_text(self):
        """Gets the header_text of this ChallengeTypes.


        :return: The header_text of this ChallengeTypes.
        :rtype: str
        """
        return self._header_text

    @header_text.setter
    def header_text(self, header_text):
        """Sets the header_text of this ChallengeTypes.


        :param header_text: The header_text of this ChallengeTypes.
        :type header_text: str
        """

        self._header_text = header_text

    @property
    def permissions(self):
        """Gets the permissions of this ChallengeTypes.


        :return: The permissions of this ChallengeTypes.
        :rtype: List[ConsentPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ChallengeTypes.


        :param permissions: The permissions of this ChallengeTypes.
        :type permissions: List[ConsentPermission]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def additional_permissions(self):
        """Gets the additional_permissions of this ChallengeTypes.


        :return: The additional_permissions of this ChallengeTypes.
        :rtype: List[ConsentPermission]
        """
        return self._additional_permissions

    @additional_permissions.setter
    def additional_permissions(self, additional_permissions):
        """Sets the additional_permissions of this ChallengeTypes.


        :param additional_permissions: The additional_permissions of this ChallengeTypes.
        :type additional_permissions: List[ConsentPermission]
        """
        if additional_permissions is None:
            raise ValueError("Invalid value for `additional_permissions`, must not be `None`")

        self._additional_permissions = additional_permissions

    @property
    def token(self):
        """Gets the token of this ChallengeTypes.


        :return: The token of this ChallengeTypes.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ChallengeTypes.


        :param token: The token of this ChallengeTypes.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def request_id(self):
        """Gets the request_id of this ChallengeTypes.


        :return: The request_id of this ChallengeTypes.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ChallengeTypes.


        :param request_id: The request_id of this ChallengeTypes.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def error(self):
        """Gets the error of this ChallengeTypes.


        :return: The error of this ChallengeTypes.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ChallengeTypes.


        :param error: The error of this ChallengeTypes.
        :type error: str
        """

        self._error = error

    @property
    def traceback(self):
        """Gets the traceback of this ChallengeTypes.


        :return: The traceback of this ChallengeTypes.
        :rtype: str
        """
        return self._traceback

    @traceback.setter
    def traceback(self, traceback):
        """Sets the traceback of this ChallengeTypes.


        :param traceback: The traceback of this ChallengeTypes.
        :type traceback: str
        """

        self._traceback = traceback

    @property
    def user_fields(self):
        """Gets the user_fields of this ChallengeTypes.


        :return: The user_fields of this ChallengeTypes.
        :rtype: List[str]
        """
        return self._user_fields

    @user_fields.setter
    def user_fields(self, user_fields):
        """Sets the user_fields of this ChallengeTypes.


        :param user_fields: The user_fields of this ChallengeTypes.
        :type user_fields: List[str]
        """
        if user_fields is None:
            raise ValueError("Invalid value for `user_fields`, must not be `None`")

        self._user_fields = user_fields

    @property
    def password_fields(self):
        """Gets the password_fields of this ChallengeTypes.


        :return: The password_fields of this ChallengeTypes.
        :rtype: bool
        """
        return self._password_fields

    @password_fields.setter
    def password_fields(self, password_fields):
        """Sets the password_fields of this ChallengeTypes.


        :param password_fields: The password_fields of this ChallengeTypes.
        :type password_fields: bool
        """
        if password_fields is None:
            raise ValueError("Invalid value for `password_fields`, must not be `None`")

        self._password_fields = password_fields

    @property
    def allow_show_password(self):
        """Gets the allow_show_password of this ChallengeTypes.


        :return: The allow_show_password of this ChallengeTypes.
        :rtype: bool
        """
        return self._allow_show_password

    @allow_show_password.setter
    def allow_show_password(self, allow_show_password):
        """Sets the allow_show_password of this ChallengeTypes.


        :param allow_show_password: The allow_show_password of this ChallengeTypes.
        :type allow_show_password: bool
        """

        self._allow_show_password = allow_show_password

    @property
    def application_pre(self):
        """Gets the application_pre of this ChallengeTypes.


        :return: The application_pre of this ChallengeTypes.
        :rtype: str
        """
        return self._application_pre

    @application_pre.setter
    def application_pre(self, application_pre):
        """Sets the application_pre of this ChallengeTypes.


        :param application_pre: The application_pre of this ChallengeTypes.
        :type application_pre: str
        """

        self._application_pre = application_pre

    @property
    def flow_designation(self):
        """Gets the flow_designation of this ChallengeTypes.


        :return: The flow_designation of this ChallengeTypes.
        :rtype: FlowDesignationEnum
        """
        return self._flow_designation

    @flow_designation.setter
    def flow_designation(self, flow_designation):
        """Sets the flow_designation of this ChallengeTypes.


        :param flow_designation: The flow_designation of this ChallengeTypes.
        :type flow_designation: FlowDesignationEnum
        """
        if flow_designation is None:
            raise ValueError("Invalid value for `flow_designation`, must not be `None`")

        self._flow_designation = flow_designation

    @property
    def enroll_url(self):
        """Gets the enroll_url of this ChallengeTypes.


        :return: The enroll_url of this ChallengeTypes.
        :rtype: str
        """
        return self._enroll_url

    @enroll_url.setter
    def enroll_url(self, enroll_url):
        """Sets the enroll_url of this ChallengeTypes.


        :param enroll_url: The enroll_url of this ChallengeTypes.
        :type enroll_url: str
        """

        self._enroll_url = enroll_url

    @property
    def recovery_url(self):
        """Gets the recovery_url of this ChallengeTypes.


        :return: The recovery_url of this ChallengeTypes.
        :rtype: str
        """
        return self._recovery_url

    @recovery_url.setter
    def recovery_url(self, recovery_url):
        """Sets the recovery_url of this ChallengeTypes.


        :param recovery_url: The recovery_url of this ChallengeTypes.
        :type recovery_url: str
        """

        self._recovery_url = recovery_url

    @property
    def passwordless_url(self):
        """Gets the passwordless_url of this ChallengeTypes.


        :return: The passwordless_url of this ChallengeTypes.
        :rtype: str
        """
        return self._passwordless_url

    @passwordless_url.setter
    def passwordless_url(self, passwordless_url):
        """Sets the passwordless_url of this ChallengeTypes.


        :param passwordless_url: The passwordless_url of this ChallengeTypes.
        :type passwordless_url: str
        """

        self._passwordless_url = passwordless_url

    @property
    def primary_action(self):
        """Gets the primary_action of this ChallengeTypes.


        :return: The primary_action of this ChallengeTypes.
        :rtype: str
        """
        return self._primary_action

    @primary_action.setter
    def primary_action(self, primary_action):
        """Sets the primary_action of this ChallengeTypes.


        :param primary_action: The primary_action of this ChallengeTypes.
        :type primary_action: str
        """
        if primary_action is None:
            raise ValueError("Invalid value for `primary_action`, must not be `None`")

        self._primary_action = primary_action

    @property
    def sources(self):
        """Gets the sources of this ChallengeTypes.


        :return: The sources of this ChallengeTypes.
        :rtype: List[LoginSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ChallengeTypes.


        :param sources: The sources of this ChallengeTypes.
        :type sources: List[LoginSource]
        """

        self._sources = sources

    @property
    def show_source_labels(self):
        """Gets the show_source_labels of this ChallengeTypes.


        :return: The show_source_labels of this ChallengeTypes.
        :rtype: bool
        """
        return self._show_source_labels

    @show_source_labels.setter
    def show_source_labels(self, show_source_labels):
        """Sets the show_source_labels of this ChallengeTypes.


        :param show_source_labels: The show_source_labels of this ChallengeTypes.
        :type show_source_labels: bool
        """
        if show_source_labels is None:
            raise ValueError("Invalid value for `show_source_labels`, must not be `None`")

        self._show_source_labels = show_source_labels

    @property
    def slug(self):
        """Gets the slug of this ChallengeTypes.


        :return: The slug of this ChallengeTypes.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ChallengeTypes.


        :param slug: The slug of this ChallengeTypes.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def fields(self):
        """Gets the fields of this ChallengeTypes.


        :return: The fields of this ChallengeTypes.
        :rtype: List[StagePrompt]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ChallengeTypes.


        :param fields: The fields of this ChallengeTypes.
        :type fields: List[StagePrompt]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def to(self):
        """Gets the to of this ChallengeTypes.


        :return: The to of this ChallengeTypes.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ChallengeTypes.


        :param to: The to of this ChallengeTypes.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def body(self):
        """Gets the body of this ChallengeTypes.


        :return: The body of this ChallengeTypes.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ChallengeTypes.


        :param body: The body of this ChallengeTypes.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body
