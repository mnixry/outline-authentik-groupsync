# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.device_classes_enum import DeviceClassesEnum
from authentik_openapi.models.flow_set import FlowSet
from authentik_openapi.models.not_configured_action_enum import NotConfiguredActionEnum
from authentik_openapi.models.user_verification_enum import UserVerificationEnum
from authentik_openapi.models.web_authn_device_type import WebAuthnDeviceType
from authentik_openapi import util


class AuthenticatorValidateStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, flow_set: List[FlowSet]=None, not_configured_action: NotConfiguredActionEnum=None, device_classes: List[DeviceClassesEnum]=None, configuration_stages: List[str]=None, last_auth_threshold: str=None, webauthn_user_verification: UserVerificationEnum=None, webauthn_allowed_device_types: List[str]=None, webauthn_allowed_device_types_obj: List[WebAuthnDeviceType]=None):
        """AuthenticatorValidateStage - a model defined in OpenAPI

        :param pk: The pk of this AuthenticatorValidateStage.
        :param name: The name of this AuthenticatorValidateStage.
        :param component: The component of this AuthenticatorValidateStage.
        :param verbose_name: The verbose_name of this AuthenticatorValidateStage.
        :param verbose_name_plural: The verbose_name_plural of this AuthenticatorValidateStage.
        :param meta_model_name: The meta_model_name of this AuthenticatorValidateStage.
        :param flow_set: The flow_set of this AuthenticatorValidateStage.
        :param not_configured_action: The not_configured_action of this AuthenticatorValidateStage.
        :param device_classes: The device_classes of this AuthenticatorValidateStage.
        :param configuration_stages: The configuration_stages of this AuthenticatorValidateStage.
        :param last_auth_threshold: The last_auth_threshold of this AuthenticatorValidateStage.
        :param webauthn_user_verification: The webauthn_user_verification of this AuthenticatorValidateStage.
        :param webauthn_allowed_device_types: The webauthn_allowed_device_types of this AuthenticatorValidateStage.
        :param webauthn_allowed_device_types_obj: The webauthn_allowed_device_types_obj of this AuthenticatorValidateStage.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'flow_set': List[FlowSet],
            'not_configured_action': NotConfiguredActionEnum,
            'device_classes': List[DeviceClassesEnum],
            'configuration_stages': List[str],
            'last_auth_threshold': str,
            'webauthn_user_verification': UserVerificationEnum,
            'webauthn_allowed_device_types': List[str],
            'webauthn_allowed_device_types_obj': List[WebAuthnDeviceType]
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'flow_set': 'flow_set',
            'not_configured_action': 'not_configured_action',
            'device_classes': 'device_classes',
            'configuration_stages': 'configuration_stages',
            'last_auth_threshold': 'last_auth_threshold',
            'webauthn_user_verification': 'webauthn_user_verification',
            'webauthn_allowed_device_types': 'webauthn_allowed_device_types',
            'webauthn_allowed_device_types_obj': 'webauthn_allowed_device_types_obj'
        }

        self._pk = pk
        self._name = name
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._flow_set = flow_set
        self._not_configured_action = not_configured_action
        self._device_classes = device_classes
        self._configuration_stages = configuration_stages
        self._last_auth_threshold = last_auth_threshold
        self._webauthn_user_verification = webauthn_user_verification
        self._webauthn_allowed_device_types = webauthn_allowed_device_types
        self._webauthn_allowed_device_types_obj = webauthn_allowed_device_types_obj

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatorValidateStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatorValidateStage of this AuthenticatorValidateStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this AuthenticatorValidateStage.


        :return: The pk of this AuthenticatorValidateStage.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this AuthenticatorValidateStage.


        :param pk: The pk of this AuthenticatorValidateStage.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this AuthenticatorValidateStage.


        :return: The name of this AuthenticatorValidateStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticatorValidateStage.


        :param name: The name of this AuthenticatorValidateStage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def component(self):
        """Gets the component of this AuthenticatorValidateStage.

        Get object type so that we know how to edit the object

        :return: The component of this AuthenticatorValidateStage.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this AuthenticatorValidateStage.

        Get object type so that we know how to edit the object

        :param component: The component of this AuthenticatorValidateStage.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this AuthenticatorValidateStage.

        Return object's verbose_name

        :return: The verbose_name of this AuthenticatorValidateStage.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this AuthenticatorValidateStage.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this AuthenticatorValidateStage.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this AuthenticatorValidateStage.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this AuthenticatorValidateStage.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this AuthenticatorValidateStage.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this AuthenticatorValidateStage.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this AuthenticatorValidateStage.

        Return internal model name

        :return: The meta_model_name of this AuthenticatorValidateStage.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this AuthenticatorValidateStage.

        Return internal model name

        :param meta_model_name: The meta_model_name of this AuthenticatorValidateStage.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def flow_set(self):
        """Gets the flow_set of this AuthenticatorValidateStage.


        :return: The flow_set of this AuthenticatorValidateStage.
        :rtype: List[FlowSet]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this AuthenticatorValidateStage.


        :param flow_set: The flow_set of this AuthenticatorValidateStage.
        :type flow_set: List[FlowSet]
        """

        self._flow_set = flow_set

    @property
    def not_configured_action(self):
        """Gets the not_configured_action of this AuthenticatorValidateStage.


        :return: The not_configured_action of this AuthenticatorValidateStage.
        :rtype: NotConfiguredActionEnum
        """
        return self._not_configured_action

    @not_configured_action.setter
    def not_configured_action(self, not_configured_action):
        """Sets the not_configured_action of this AuthenticatorValidateStage.


        :param not_configured_action: The not_configured_action of this AuthenticatorValidateStage.
        :type not_configured_action: NotConfiguredActionEnum
        """

        self._not_configured_action = not_configured_action

    @property
    def device_classes(self):
        """Gets the device_classes of this AuthenticatorValidateStage.

        Device classes which can be used to authenticate

        :return: The device_classes of this AuthenticatorValidateStage.
        :rtype: List[DeviceClassesEnum]
        """
        return self._device_classes

    @device_classes.setter
    def device_classes(self, device_classes):
        """Sets the device_classes of this AuthenticatorValidateStage.

        Device classes which can be used to authenticate

        :param device_classes: The device_classes of this AuthenticatorValidateStage.
        :type device_classes: List[DeviceClassesEnum]
        """

        self._device_classes = device_classes

    @property
    def configuration_stages(self):
        """Gets the configuration_stages of this AuthenticatorValidateStage.

        Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again.

        :return: The configuration_stages of this AuthenticatorValidateStage.
        :rtype: List[str]
        """
        return self._configuration_stages

    @configuration_stages.setter
    def configuration_stages(self, configuration_stages):
        """Sets the configuration_stages of this AuthenticatorValidateStage.

        Stages used to configure Authenticator when user doesn't have any compatible devices. After this configuration Stage passes, the user is not prompted again.

        :param configuration_stages: The configuration_stages of this AuthenticatorValidateStage.
        :type configuration_stages: List[str]
        """

        self._configuration_stages = configuration_stages

    @property
    def last_auth_threshold(self):
        """Gets the last_auth_threshold of this AuthenticatorValidateStage.

        If any of the user's device has been used within this threshold, this stage will be skipped

        :return: The last_auth_threshold of this AuthenticatorValidateStage.
        :rtype: str
        """
        return self._last_auth_threshold

    @last_auth_threshold.setter
    def last_auth_threshold(self, last_auth_threshold):
        """Sets the last_auth_threshold of this AuthenticatorValidateStage.

        If any of the user's device has been used within this threshold, this stage will be skipped

        :param last_auth_threshold: The last_auth_threshold of this AuthenticatorValidateStage.
        :type last_auth_threshold: str
        """

        self._last_auth_threshold = last_auth_threshold

    @property
    def webauthn_user_verification(self):
        """Gets the webauthn_user_verification of this AuthenticatorValidateStage.

        Enforce user verification for WebAuthn devices.

        :return: The webauthn_user_verification of this AuthenticatorValidateStage.
        :rtype: UserVerificationEnum
        """
        return self._webauthn_user_verification

    @webauthn_user_verification.setter
    def webauthn_user_verification(self, webauthn_user_verification):
        """Sets the webauthn_user_verification of this AuthenticatorValidateStage.

        Enforce user verification for WebAuthn devices.

        :param webauthn_user_verification: The webauthn_user_verification of this AuthenticatorValidateStage.
        :type webauthn_user_verification: UserVerificationEnum
        """

        self._webauthn_user_verification = webauthn_user_verification

    @property
    def webauthn_allowed_device_types(self):
        """Gets the webauthn_allowed_device_types of this AuthenticatorValidateStage.


        :return: The webauthn_allowed_device_types of this AuthenticatorValidateStage.
        :rtype: List[str]
        """
        return self._webauthn_allowed_device_types

    @webauthn_allowed_device_types.setter
    def webauthn_allowed_device_types(self, webauthn_allowed_device_types):
        """Sets the webauthn_allowed_device_types of this AuthenticatorValidateStage.


        :param webauthn_allowed_device_types: The webauthn_allowed_device_types of this AuthenticatorValidateStage.
        :type webauthn_allowed_device_types: List[str]
        """

        self._webauthn_allowed_device_types = webauthn_allowed_device_types

    @property
    def webauthn_allowed_device_types_obj(self):
        """Gets the webauthn_allowed_device_types_obj of this AuthenticatorValidateStage.


        :return: The webauthn_allowed_device_types_obj of this AuthenticatorValidateStage.
        :rtype: List[WebAuthnDeviceType]
        """
        return self._webauthn_allowed_device_types_obj

    @webauthn_allowed_device_types_obj.setter
    def webauthn_allowed_device_types_obj(self, webauthn_allowed_device_types_obj):
        """Sets the webauthn_allowed_device_types_obj of this AuthenticatorValidateStage.


        :param webauthn_allowed_device_types_obj: The webauthn_allowed_device_types_obj of this AuthenticatorValidateStage.
        :type webauthn_allowed_device_types_obj: List[WebAuthnDeviceType]
        """
        if webauthn_allowed_device_types_obj is None:
            raise ValueError("Invalid value for `webauthn_allowed_device_types_obj`, must not be `None`")

        self._webauthn_allowed_device_types_obj = webauthn_allowed_device_types_obj
