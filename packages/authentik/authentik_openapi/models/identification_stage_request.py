# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi.models.user_fields_enum import UserFieldsEnum
from authentik_openapi import util


class IdentificationStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, user_fields: List[UserFieldsEnum]=None, password_stage: str=None, case_insensitive_matching: bool=None, show_matched_user: bool=None, enrollment_flow: str=None, recovery_flow: str=None, passwordless_flow: str=None, sources: List[str]=None, show_source_labels: bool=None, pretend_user_exists: bool=None):
        """IdentificationStageRequest - a model defined in OpenAPI

        :param name: The name of this IdentificationStageRequest.
        :param flow_set: The flow_set of this IdentificationStageRequest.
        :param user_fields: The user_fields of this IdentificationStageRequest.
        :param password_stage: The password_stage of this IdentificationStageRequest.
        :param case_insensitive_matching: The case_insensitive_matching of this IdentificationStageRequest.
        :param show_matched_user: The show_matched_user of this IdentificationStageRequest.
        :param enrollment_flow: The enrollment_flow of this IdentificationStageRequest.
        :param recovery_flow: The recovery_flow of this IdentificationStageRequest.
        :param passwordless_flow: The passwordless_flow of this IdentificationStageRequest.
        :param sources: The sources of this IdentificationStageRequest.
        :param show_source_labels: The show_source_labels of this IdentificationStageRequest.
        :param pretend_user_exists: The pretend_user_exists of this IdentificationStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'user_fields': List[UserFieldsEnum],
            'password_stage': str,
            'case_insensitive_matching': bool,
            'show_matched_user': bool,
            'enrollment_flow': str,
            'recovery_flow': str,
            'passwordless_flow': str,
            'sources': List[str],
            'show_source_labels': bool,
            'pretend_user_exists': bool
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'user_fields': 'user_fields',
            'password_stage': 'password_stage',
            'case_insensitive_matching': 'case_insensitive_matching',
            'show_matched_user': 'show_matched_user',
            'enrollment_flow': 'enrollment_flow',
            'recovery_flow': 'recovery_flow',
            'passwordless_flow': 'passwordless_flow',
            'sources': 'sources',
            'show_source_labels': 'show_source_labels',
            'pretend_user_exists': 'pretend_user_exists'
        }

        self._name = name
        self._flow_set = flow_set
        self._user_fields = user_fields
        self._password_stage = password_stage
        self._case_insensitive_matching = case_insensitive_matching
        self._show_matched_user = show_matched_user
        self._enrollment_flow = enrollment_flow
        self._recovery_flow = recovery_flow
        self._passwordless_flow = passwordless_flow
        self._sources = sources
        self._show_source_labels = show_source_labels
        self._pretend_user_exists = pretend_user_exists

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentificationStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentificationStageRequest of this IdentificationStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this IdentificationStageRequest.


        :return: The name of this IdentificationStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IdentificationStageRequest.


        :param name: The name of this IdentificationStageRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this IdentificationStageRequest.


        :return: The flow_set of this IdentificationStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this IdentificationStageRequest.


        :param flow_set: The flow_set of this IdentificationStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def user_fields(self):
        """Gets the user_fields of this IdentificationStageRequest.

        Fields of the user object to match against. (Hold shift to select multiple options)

        :return: The user_fields of this IdentificationStageRequest.
        :rtype: List[UserFieldsEnum]
        """
        return self._user_fields

    @user_fields.setter
    def user_fields(self, user_fields):
        """Sets the user_fields of this IdentificationStageRequest.

        Fields of the user object to match against. (Hold shift to select multiple options)

        :param user_fields: The user_fields of this IdentificationStageRequest.
        :type user_fields: List[UserFieldsEnum]
        """

        self._user_fields = user_fields

    @property
    def password_stage(self):
        """Gets the password_stage of this IdentificationStageRequest.

        When set, shows a password field, instead of showing the password field as separate step.

        :return: The password_stage of this IdentificationStageRequest.
        :rtype: str
        """
        return self._password_stage

    @password_stage.setter
    def password_stage(self, password_stage):
        """Sets the password_stage of this IdentificationStageRequest.

        When set, shows a password field, instead of showing the password field as separate step.

        :param password_stage: The password_stage of this IdentificationStageRequest.
        :type password_stage: str
        """

        self._password_stage = password_stage

    @property
    def case_insensitive_matching(self):
        """Gets the case_insensitive_matching of this IdentificationStageRequest.

        When enabled, user fields are matched regardless of their casing.

        :return: The case_insensitive_matching of this IdentificationStageRequest.
        :rtype: bool
        """
        return self._case_insensitive_matching

    @case_insensitive_matching.setter
    def case_insensitive_matching(self, case_insensitive_matching):
        """Sets the case_insensitive_matching of this IdentificationStageRequest.

        When enabled, user fields are matched regardless of their casing.

        :param case_insensitive_matching: The case_insensitive_matching of this IdentificationStageRequest.
        :type case_insensitive_matching: bool
        """

        self._case_insensitive_matching = case_insensitive_matching

    @property
    def show_matched_user(self):
        """Gets the show_matched_user of this IdentificationStageRequest.

        When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown

        :return: The show_matched_user of this IdentificationStageRequest.
        :rtype: bool
        """
        return self._show_matched_user

    @show_matched_user.setter
    def show_matched_user(self, show_matched_user):
        """Sets the show_matched_user of this IdentificationStageRequest.

        When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown

        :param show_matched_user: The show_matched_user of this IdentificationStageRequest.
        :type show_matched_user: bool
        """

        self._show_matched_user = show_matched_user

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this IdentificationStageRequest.

        Optional enrollment flow, which is linked at the bottom of the page.

        :return: The enrollment_flow of this IdentificationStageRequest.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this IdentificationStageRequest.

        Optional enrollment flow, which is linked at the bottom of the page.

        :param enrollment_flow: The enrollment_flow of this IdentificationStageRequest.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def recovery_flow(self):
        """Gets the recovery_flow of this IdentificationStageRequest.

        Optional recovery flow, which is linked at the bottom of the page.

        :return: The recovery_flow of this IdentificationStageRequest.
        :rtype: str
        """
        return self._recovery_flow

    @recovery_flow.setter
    def recovery_flow(self, recovery_flow):
        """Sets the recovery_flow of this IdentificationStageRequest.

        Optional recovery flow, which is linked at the bottom of the page.

        :param recovery_flow: The recovery_flow of this IdentificationStageRequest.
        :type recovery_flow: str
        """

        self._recovery_flow = recovery_flow

    @property
    def passwordless_flow(self):
        """Gets the passwordless_flow of this IdentificationStageRequest.

        Optional passwordless flow, which is linked at the bottom of the page.

        :return: The passwordless_flow of this IdentificationStageRequest.
        :rtype: str
        """
        return self._passwordless_flow

    @passwordless_flow.setter
    def passwordless_flow(self, passwordless_flow):
        """Sets the passwordless_flow of this IdentificationStageRequest.

        Optional passwordless flow, which is linked at the bottom of the page.

        :param passwordless_flow: The passwordless_flow of this IdentificationStageRequest.
        :type passwordless_flow: str
        """

        self._passwordless_flow = passwordless_flow

    @property
    def sources(self):
        """Gets the sources of this IdentificationStageRequest.

        Specify which sources should be shown.

        :return: The sources of this IdentificationStageRequest.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this IdentificationStageRequest.

        Specify which sources should be shown.

        :param sources: The sources of this IdentificationStageRequest.
        :type sources: List[str]
        """

        self._sources = sources

    @property
    def show_source_labels(self):
        """Gets the show_source_labels of this IdentificationStageRequest.


        :return: The show_source_labels of this IdentificationStageRequest.
        :rtype: bool
        """
        return self._show_source_labels

    @show_source_labels.setter
    def show_source_labels(self, show_source_labels):
        """Sets the show_source_labels of this IdentificationStageRequest.


        :param show_source_labels: The show_source_labels of this IdentificationStageRequest.
        :type show_source_labels: bool
        """

        self._show_source_labels = show_source_labels

    @property
    def pretend_user_exists(self):
        """Gets the pretend_user_exists of this IdentificationStageRequest.

        When enabled, the stage will succeed and continue even when incorrect user info is entered.

        :return: The pretend_user_exists of this IdentificationStageRequest.
        :rtype: bool
        """
        return self._pretend_user_exists

    @pretend_user_exists.setter
    def pretend_user_exists(self, pretend_user_exists):
        """Sets the pretend_user_exists of this IdentificationStageRequest.

        When enabled, the stage will succeed and continue even when incorrect user info is entered.

        :param pretend_user_exists: The pretend_user_exists of this IdentificationStageRequest.
        :type pretend_user_exists: bool
        """

        self._pretend_user_exists = pretend_user_exists
