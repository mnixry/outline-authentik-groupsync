# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version_current: str=None, version_latest: str=None, version_latest_valid: bool=None, build_hash: str=None, outdated: bool=None, outpost_outdated: bool=None):
        """Version - a model defined in OpenAPI

        :param version_current: The version_current of this Version.
        :param version_latest: The version_latest of this Version.
        :param version_latest_valid: The version_latest_valid of this Version.
        :param build_hash: The build_hash of this Version.
        :param outdated: The outdated of this Version.
        :param outpost_outdated: The outpost_outdated of this Version.
        """
        self.openapi_types = {
            'version_current': str,
            'version_latest': str,
            'version_latest_valid': bool,
            'build_hash': str,
            'outdated': bool,
            'outpost_outdated': bool
        }

        self.attribute_map = {
            'version_current': 'version_current',
            'version_latest': 'version_latest',
            'version_latest_valid': 'version_latest_valid',
            'build_hash': 'build_hash',
            'outdated': 'outdated',
            'outpost_outdated': 'outpost_outdated'
        }

        self._version_current = version_current
        self._version_latest = version_latest
        self._version_latest_valid = version_latest_valid
        self._build_hash = build_hash
        self._outdated = outdated
        self._outpost_outdated = outpost_outdated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version_current(self):
        """Gets the version_current of this Version.

        Get current version

        :return: The version_current of this Version.
        :rtype: str
        """
        return self._version_current

    @version_current.setter
    def version_current(self, version_current):
        """Sets the version_current of this Version.

        Get current version

        :param version_current: The version_current of this Version.
        :type version_current: str
        """
        if version_current is None:
            raise ValueError("Invalid value for `version_current`, must not be `None`")

        self._version_current = version_current

    @property
    def version_latest(self):
        """Gets the version_latest of this Version.

        Get latest version from cache

        :return: The version_latest of this Version.
        :rtype: str
        """
        return self._version_latest

    @version_latest.setter
    def version_latest(self, version_latest):
        """Sets the version_latest of this Version.

        Get latest version from cache

        :param version_latest: The version_latest of this Version.
        :type version_latest: str
        """
        if version_latest is None:
            raise ValueError("Invalid value for `version_latest`, must not be `None`")

        self._version_latest = version_latest

    @property
    def version_latest_valid(self):
        """Gets the version_latest_valid of this Version.

        Check if latest version is valid

        :return: The version_latest_valid of this Version.
        :rtype: bool
        """
        return self._version_latest_valid

    @version_latest_valid.setter
    def version_latest_valid(self, version_latest_valid):
        """Sets the version_latest_valid of this Version.

        Check if latest version is valid

        :param version_latest_valid: The version_latest_valid of this Version.
        :type version_latest_valid: bool
        """
        if version_latest_valid is None:
            raise ValueError("Invalid value for `version_latest_valid`, must not be `None`")

        self._version_latest_valid = version_latest_valid

    @property
    def build_hash(self):
        """Gets the build_hash of this Version.

        Get build hash, if version is not latest or released

        :return: The build_hash of this Version.
        :rtype: str
        """
        return self._build_hash

    @build_hash.setter
    def build_hash(self, build_hash):
        """Sets the build_hash of this Version.

        Get build hash, if version is not latest or released

        :param build_hash: The build_hash of this Version.
        :type build_hash: str
        """
        if build_hash is None:
            raise ValueError("Invalid value for `build_hash`, must not be `None`")

        self._build_hash = build_hash

    @property
    def outdated(self):
        """Gets the outdated of this Version.

        Check if we're running the latest version

        :return: The outdated of this Version.
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this Version.

        Check if we're running the latest version

        :param outdated: The outdated of this Version.
        :type outdated: bool
        """
        if outdated is None:
            raise ValueError("Invalid value for `outdated`, must not be `None`")

        self._outdated = outdated

    @property
    def outpost_outdated(self):
        """Gets the outpost_outdated of this Version.

        Check if any outpost is outdated/has a version mismatch

        :return: The outpost_outdated of this Version.
        :rtype: bool
        """
        return self._outpost_outdated

    @outpost_outdated.setter
    def outpost_outdated(self, outpost_outdated):
        """Sets the outpost_outdated of this Version.

        Check if any outpost is outdated/has a version mismatch

        :param outpost_outdated: The outpost_outdated of this Version.
        :type outpost_outdated: bool
        """
        if outpost_outdated is None:
            raise ValueError("Invalid value for `outpost_outdated`, must not be `None`")

        self._outpost_outdated = outpost_outdated
