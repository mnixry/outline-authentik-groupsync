# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set import FlowSet
from authentik_openapi.models.user_creation_mode_enum import UserCreationModeEnum
from authentik_openapi.models.user_type_enum import UserTypeEnum
from authentik_openapi import util


class UserWriteStage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, flow_set: List[FlowSet]=None, user_creation_mode: UserCreationModeEnum=None, create_users_as_inactive: bool=None, create_users_group: str=None, user_type: UserTypeEnum=None, user_path_template: str=None):
        """UserWriteStage - a model defined in OpenAPI

        :param pk: The pk of this UserWriteStage.
        :param name: The name of this UserWriteStage.
        :param component: The component of this UserWriteStage.
        :param verbose_name: The verbose_name of this UserWriteStage.
        :param verbose_name_plural: The verbose_name_plural of this UserWriteStage.
        :param meta_model_name: The meta_model_name of this UserWriteStage.
        :param flow_set: The flow_set of this UserWriteStage.
        :param user_creation_mode: The user_creation_mode of this UserWriteStage.
        :param create_users_as_inactive: The create_users_as_inactive of this UserWriteStage.
        :param create_users_group: The create_users_group of this UserWriteStage.
        :param user_type: The user_type of this UserWriteStage.
        :param user_path_template: The user_path_template of this UserWriteStage.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'flow_set': List[FlowSet],
            'user_creation_mode': UserCreationModeEnum,
            'create_users_as_inactive': bool,
            'create_users_group': str,
            'user_type': UserTypeEnum,
            'user_path_template': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'flow_set': 'flow_set',
            'user_creation_mode': 'user_creation_mode',
            'create_users_as_inactive': 'create_users_as_inactive',
            'create_users_group': 'create_users_group',
            'user_type': 'user_type',
            'user_path_template': 'user_path_template'
        }

        self._pk = pk
        self._name = name
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._flow_set = flow_set
        self._user_creation_mode = user_creation_mode
        self._create_users_as_inactive = create_users_as_inactive
        self._create_users_group = create_users_group
        self._user_type = user_type
        self._user_path_template = user_path_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserWriteStage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserWriteStage of this UserWriteStage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this UserWriteStage.


        :return: The pk of this UserWriteStage.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this UserWriteStage.


        :param pk: The pk of this UserWriteStage.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this UserWriteStage.


        :return: The name of this UserWriteStage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserWriteStage.


        :param name: The name of this UserWriteStage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def component(self):
        """Gets the component of this UserWriteStage.

        Get object type so that we know how to edit the object

        :return: The component of this UserWriteStage.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this UserWriteStage.

        Get object type so that we know how to edit the object

        :param component: The component of this UserWriteStage.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this UserWriteStage.

        Return object's verbose_name

        :return: The verbose_name of this UserWriteStage.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this UserWriteStage.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this UserWriteStage.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this UserWriteStage.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this UserWriteStage.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this UserWriteStage.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this UserWriteStage.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this UserWriteStage.

        Return internal model name

        :return: The meta_model_name of this UserWriteStage.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this UserWriteStage.

        Return internal model name

        :param meta_model_name: The meta_model_name of this UserWriteStage.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def flow_set(self):
        """Gets the flow_set of this UserWriteStage.


        :return: The flow_set of this UserWriteStage.
        :rtype: List[FlowSet]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this UserWriteStage.


        :param flow_set: The flow_set of this UserWriteStage.
        :type flow_set: List[FlowSet]
        """

        self._flow_set = flow_set

    @property
    def user_creation_mode(self):
        """Gets the user_creation_mode of this UserWriteStage.


        :return: The user_creation_mode of this UserWriteStage.
        :rtype: UserCreationModeEnum
        """
        return self._user_creation_mode

    @user_creation_mode.setter
    def user_creation_mode(self, user_creation_mode):
        """Sets the user_creation_mode of this UserWriteStage.


        :param user_creation_mode: The user_creation_mode of this UserWriteStage.
        :type user_creation_mode: UserCreationModeEnum
        """

        self._user_creation_mode = user_creation_mode

    @property
    def create_users_as_inactive(self):
        """Gets the create_users_as_inactive of this UserWriteStage.

        When set, newly created users are inactive and cannot login.

        :return: The create_users_as_inactive of this UserWriteStage.
        :rtype: bool
        """
        return self._create_users_as_inactive

    @create_users_as_inactive.setter
    def create_users_as_inactive(self, create_users_as_inactive):
        """Sets the create_users_as_inactive of this UserWriteStage.

        When set, newly created users are inactive and cannot login.

        :param create_users_as_inactive: The create_users_as_inactive of this UserWriteStage.
        :type create_users_as_inactive: bool
        """

        self._create_users_as_inactive = create_users_as_inactive

    @property
    def create_users_group(self):
        """Gets the create_users_group of this UserWriteStage.

        Optionally add newly created users to this group.

        :return: The create_users_group of this UserWriteStage.
        :rtype: str
        """
        return self._create_users_group

    @create_users_group.setter
    def create_users_group(self, create_users_group):
        """Sets the create_users_group of this UserWriteStage.

        Optionally add newly created users to this group.

        :param create_users_group: The create_users_group of this UserWriteStage.
        :type create_users_group: str
        """

        self._create_users_group = create_users_group

    @property
    def user_type(self):
        """Gets the user_type of this UserWriteStage.


        :return: The user_type of this UserWriteStage.
        :rtype: UserTypeEnum
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserWriteStage.


        :param user_type: The user_type of this UserWriteStage.
        :type user_type: UserTypeEnum
        """

        self._user_type = user_type

    @property
    def user_path_template(self):
        """Gets the user_path_template of this UserWriteStage.


        :return: The user_path_template of this UserWriteStage.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this UserWriteStage.


        :param user_path_template: The user_path_template of this UserWriteStage.
        :type user_path_template: str
        """

        self._user_path_template = user_path_template
