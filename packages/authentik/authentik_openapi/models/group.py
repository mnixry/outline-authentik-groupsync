# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.group_member import GroupMember
from authentik_openapi.models.role import Role
from authentik_openapi import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, num_pk: int=None, name: str=None, is_superuser: bool=None, parent: str=None, parent_name: str=None, users: List[int]=None, users_obj: List[GroupMember]=None, attributes: Dict[str, object]=None, roles: List[str]=None, roles_obj: List[Role]=None):
        """Group - a model defined in OpenAPI

        :param pk: The pk of this Group.
        :param num_pk: The num_pk of this Group.
        :param name: The name of this Group.
        :param is_superuser: The is_superuser of this Group.
        :param parent: The parent of this Group.
        :param parent_name: The parent_name of this Group.
        :param users: The users of this Group.
        :param users_obj: The users_obj of this Group.
        :param attributes: The attributes of this Group.
        :param roles: The roles of this Group.
        :param roles_obj: The roles_obj of this Group.
        """
        self.openapi_types = {
            'pk': str,
            'num_pk': int,
            'name': str,
            'is_superuser': bool,
            'parent': str,
            'parent_name': str,
            'users': List[int],
            'users_obj': List[GroupMember],
            'attributes': Dict[str, object],
            'roles': List[str],
            'roles_obj': List[Role]
        }

        self.attribute_map = {
            'pk': 'pk',
            'num_pk': 'num_pk',
            'name': 'name',
            'is_superuser': 'is_superuser',
            'parent': 'parent',
            'parent_name': 'parent_name',
            'users': 'users',
            'users_obj': 'users_obj',
            'attributes': 'attributes',
            'roles': 'roles',
            'roles_obj': 'roles_obj'
        }

        self._pk = pk
        self._num_pk = num_pk
        self._name = name
        self._is_superuser = is_superuser
        self._parent = parent
        self._parent_name = parent_name
        self._users = users
        self._users_obj = users_obj
        self._attributes = attributes
        self._roles = roles
        self._roles_obj = roles_obj

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Group.


        :return: The pk of this Group.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Group.


        :param pk: The pk of this Group.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def num_pk(self):
        """Gets the num_pk of this Group.


        :return: The num_pk of this Group.
        :rtype: int
        """
        return self._num_pk

    @num_pk.setter
    def num_pk(self, num_pk):
        """Sets the num_pk of this Group.


        :param num_pk: The num_pk of this Group.
        :type num_pk: int
        """
        if num_pk is None:
            raise ValueError("Invalid value for `num_pk`, must not be `None`")

        self._num_pk = num_pk

    @property
    def name(self):
        """Gets the name of this Group.


        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def is_superuser(self):
        """Gets the is_superuser of this Group.

        Users added to this group will be superusers.

        :return: The is_superuser of this Group.
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this Group.

        Users added to this group will be superusers.

        :param is_superuser: The is_superuser of this Group.
        :type is_superuser: bool
        """

        self._is_superuser = is_superuser

    @property
    def parent(self):
        """Gets the parent of this Group.


        :return: The parent of this Group.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Group.


        :param parent: The parent of this Group.
        :type parent: str
        """

        self._parent = parent

    @property
    def parent_name(self):
        """Gets the parent_name of this Group.


        :return: The parent_name of this Group.
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this Group.


        :param parent_name: The parent_name of this Group.
        :type parent_name: str
        """
        if parent_name is None:
            raise ValueError("Invalid value for `parent_name`, must not be `None`")

        self._parent_name = parent_name

    @property
    def users(self):
        """Gets the users of this Group.


        :return: The users of this Group.
        :rtype: List[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Group.


        :param users: The users of this Group.
        :type users: List[int]
        """

        self._users = users

    @property
    def users_obj(self):
        """Gets the users_obj of this Group.


        :return: The users_obj of this Group.
        :rtype: List[GroupMember]
        """
        return self._users_obj

    @users_obj.setter
    def users_obj(self, users_obj):
        """Sets the users_obj of this Group.


        :param users_obj: The users_obj of this Group.
        :type users_obj: List[GroupMember]
        """
        if users_obj is None:
            raise ValueError("Invalid value for `users_obj`, must not be `None`")

        self._users_obj = users_obj

    @property
    def attributes(self):
        """Gets the attributes of this Group.


        :return: The attributes of this Group.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Group.


        :param attributes: The attributes of this Group.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def roles(self):
        """Gets the roles of this Group.


        :return: The roles of this Group.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Group.


        :param roles: The roles of this Group.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def roles_obj(self):
        """Gets the roles_obj of this Group.


        :return: The roles_obj of this Group.
        :rtype: List[Role]
        """
        return self._roles_obj

    @roles_obj.setter
    def roles_obj(self, roles_obj):
        """Sets the roles_obj of this Group.


        :param roles_obj: The roles_obj of this Group.
        :type roles_obj: List[Role]
        """
        if roles_obj is None:
            raise ValueError("Invalid value for `roles_obj`, must not be `None`")

        self._roles_obj = roles_obj
