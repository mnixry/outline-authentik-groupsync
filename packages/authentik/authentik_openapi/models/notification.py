# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.event import Event
from authentik_openapi.models.severity_enum import SeverityEnum
from authentik_openapi import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, severity: SeverityEnum=None, body: str=None, created: datetime=None, event: Event=None, seen: bool=None):
        """Notification - a model defined in OpenAPI

        :param pk: The pk of this Notification.
        :param severity: The severity of this Notification.
        :param body: The body of this Notification.
        :param created: The created of this Notification.
        :param event: The event of this Notification.
        :param seen: The seen of this Notification.
        """
        self.openapi_types = {
            'pk': str,
            'severity': SeverityEnum,
            'body': str,
            'created': datetime,
            'event': Event,
            'seen': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'severity': 'severity',
            'body': 'body',
            'created': 'created',
            'event': 'event',
            'seen': 'seen'
        }

        self._pk = pk
        self._severity = severity
        self._body = body
        self._created = created
        self._event = event
        self._seen = seen

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this Notification.


        :return: The pk of this Notification.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this Notification.


        :param pk: The pk of this Notification.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def severity(self):
        """Gets the severity of this Notification.


        :return: The severity of this Notification.
        :rtype: SeverityEnum
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Notification.


        :param severity: The severity of this Notification.
        :type severity: SeverityEnum
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity

    @property
    def body(self):
        """Gets the body of this Notification.


        :return: The body of this Notification.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Notification.


        :param body: The body of this Notification.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def created(self):
        """Gets the created of this Notification.


        :return: The created of this Notification.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Notification.


        :param created: The created of this Notification.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def event(self):
        """Gets the event of this Notification.


        :return: The event of this Notification.
        :rtype: Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Notification.


        :param event: The event of this Notification.
        :type event: Event
        """

        self._event = event

    @property
    def seen(self):
        """Gets the seen of this Notification.


        :return: The seen of this Notification.
        :rtype: bool
        """
        return self._seen

    @seen.setter
    def seen(self, seen):
        """Sets the seen of this Notification.


        :param seen: The seen of this Notification.
        :type seen: bool
        """

        self._seen = seen
