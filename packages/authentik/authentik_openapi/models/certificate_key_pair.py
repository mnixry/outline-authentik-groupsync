# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class CertificateKeyPair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, fingerprint_sha256: str=None, fingerprint_sha1: str=None, cert_expiry: datetime=None, cert_subject: str=None, private_key_available: bool=None, private_key_type: str=None, certificate_download_url: str=None, private_key_download_url: str=None, managed: str=None):
        """CertificateKeyPair - a model defined in OpenAPI

        :param pk: The pk of this CertificateKeyPair.
        :param name: The name of this CertificateKeyPair.
        :param fingerprint_sha256: The fingerprint_sha256 of this CertificateKeyPair.
        :param fingerprint_sha1: The fingerprint_sha1 of this CertificateKeyPair.
        :param cert_expiry: The cert_expiry of this CertificateKeyPair.
        :param cert_subject: The cert_subject of this CertificateKeyPair.
        :param private_key_available: The private_key_available of this CertificateKeyPair.
        :param private_key_type: The private_key_type of this CertificateKeyPair.
        :param certificate_download_url: The certificate_download_url of this CertificateKeyPair.
        :param private_key_download_url: The private_key_download_url of this CertificateKeyPair.
        :param managed: The managed of this CertificateKeyPair.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'fingerprint_sha256': str,
            'fingerprint_sha1': str,
            'cert_expiry': datetime,
            'cert_subject': str,
            'private_key_available': bool,
            'private_key_type': str,
            'certificate_download_url': str,
            'private_key_download_url': str,
            'managed': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'fingerprint_sha256': 'fingerprint_sha256',
            'fingerprint_sha1': 'fingerprint_sha1',
            'cert_expiry': 'cert_expiry',
            'cert_subject': 'cert_subject',
            'private_key_available': 'private_key_available',
            'private_key_type': 'private_key_type',
            'certificate_download_url': 'certificate_download_url',
            'private_key_download_url': 'private_key_download_url',
            'managed': 'managed'
        }

        self._pk = pk
        self._name = name
        self._fingerprint_sha256 = fingerprint_sha256
        self._fingerprint_sha1 = fingerprint_sha1
        self._cert_expiry = cert_expiry
        self._cert_subject = cert_subject
        self._private_key_available = private_key_available
        self._private_key_type = private_key_type
        self._certificate_download_url = certificate_download_url
        self._private_key_download_url = private_key_download_url
        self._managed = managed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateKeyPair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateKeyPair of this CertificateKeyPair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this CertificateKeyPair.


        :return: The pk of this CertificateKeyPair.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this CertificateKeyPair.


        :param pk: The pk of this CertificateKeyPair.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this CertificateKeyPair.


        :return: The name of this CertificateKeyPair.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateKeyPair.


        :param name: The name of this CertificateKeyPair.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def fingerprint_sha256(self):
        """Gets the fingerprint_sha256 of this CertificateKeyPair.

        Get certificate Hash (SHA256)

        :return: The fingerprint_sha256 of this CertificateKeyPair.
        :rtype: str
        """
        return self._fingerprint_sha256

    @fingerprint_sha256.setter
    def fingerprint_sha256(self, fingerprint_sha256):
        """Sets the fingerprint_sha256 of this CertificateKeyPair.

        Get certificate Hash (SHA256)

        :param fingerprint_sha256: The fingerprint_sha256 of this CertificateKeyPair.
        :type fingerprint_sha256: str
        """
        if fingerprint_sha256 is None:
            raise ValueError("Invalid value for `fingerprint_sha256`, must not be `None`")

        self._fingerprint_sha256 = fingerprint_sha256

    @property
    def fingerprint_sha1(self):
        """Gets the fingerprint_sha1 of this CertificateKeyPair.

        Get certificate Hash (SHA1)

        :return: The fingerprint_sha1 of this CertificateKeyPair.
        :rtype: str
        """
        return self._fingerprint_sha1

    @fingerprint_sha1.setter
    def fingerprint_sha1(self, fingerprint_sha1):
        """Sets the fingerprint_sha1 of this CertificateKeyPair.

        Get certificate Hash (SHA1)

        :param fingerprint_sha1: The fingerprint_sha1 of this CertificateKeyPair.
        :type fingerprint_sha1: str
        """
        if fingerprint_sha1 is None:
            raise ValueError("Invalid value for `fingerprint_sha1`, must not be `None`")

        self._fingerprint_sha1 = fingerprint_sha1

    @property
    def cert_expiry(self):
        """Gets the cert_expiry of this CertificateKeyPair.

        Get certificate expiry

        :return: The cert_expiry of this CertificateKeyPair.
        :rtype: datetime
        """
        return self._cert_expiry

    @cert_expiry.setter
    def cert_expiry(self, cert_expiry):
        """Sets the cert_expiry of this CertificateKeyPair.

        Get certificate expiry

        :param cert_expiry: The cert_expiry of this CertificateKeyPair.
        :type cert_expiry: datetime
        """
        if cert_expiry is None:
            raise ValueError("Invalid value for `cert_expiry`, must not be `None`")

        self._cert_expiry = cert_expiry

    @property
    def cert_subject(self):
        """Gets the cert_subject of this CertificateKeyPair.

        Get certificate subject as full rfc4514

        :return: The cert_subject of this CertificateKeyPair.
        :rtype: str
        """
        return self._cert_subject

    @cert_subject.setter
    def cert_subject(self, cert_subject):
        """Sets the cert_subject of this CertificateKeyPair.

        Get certificate subject as full rfc4514

        :param cert_subject: The cert_subject of this CertificateKeyPair.
        :type cert_subject: str
        """
        if cert_subject is None:
            raise ValueError("Invalid value for `cert_subject`, must not be `None`")

        self._cert_subject = cert_subject

    @property
    def private_key_available(self):
        """Gets the private_key_available of this CertificateKeyPair.

        Show if this keypair has a private key configured or not

        :return: The private_key_available of this CertificateKeyPair.
        :rtype: bool
        """
        return self._private_key_available

    @private_key_available.setter
    def private_key_available(self, private_key_available):
        """Sets the private_key_available of this CertificateKeyPair.

        Show if this keypair has a private key configured or not

        :param private_key_available: The private_key_available of this CertificateKeyPair.
        :type private_key_available: bool
        """
        if private_key_available is None:
            raise ValueError("Invalid value for `private_key_available`, must not be `None`")

        self._private_key_available = private_key_available

    @property
    def private_key_type(self):
        """Gets the private_key_type of this CertificateKeyPair.

        Get the private key's type, if set

        :return: The private_key_type of this CertificateKeyPair.
        :rtype: str
        """
        return self._private_key_type

    @private_key_type.setter
    def private_key_type(self, private_key_type):
        """Sets the private_key_type of this CertificateKeyPair.

        Get the private key's type, if set

        :param private_key_type: The private_key_type of this CertificateKeyPair.
        :type private_key_type: str
        """
        if private_key_type is None:
            raise ValueError("Invalid value for `private_key_type`, must not be `None`")

        self._private_key_type = private_key_type

    @property
    def certificate_download_url(self):
        """Gets the certificate_download_url of this CertificateKeyPair.

        Get URL to download certificate

        :return: The certificate_download_url of this CertificateKeyPair.
        :rtype: str
        """
        return self._certificate_download_url

    @certificate_download_url.setter
    def certificate_download_url(self, certificate_download_url):
        """Sets the certificate_download_url of this CertificateKeyPair.

        Get URL to download certificate

        :param certificate_download_url: The certificate_download_url of this CertificateKeyPair.
        :type certificate_download_url: str
        """
        if certificate_download_url is None:
            raise ValueError("Invalid value for `certificate_download_url`, must not be `None`")

        self._certificate_download_url = certificate_download_url

    @property
    def private_key_download_url(self):
        """Gets the private_key_download_url of this CertificateKeyPair.

        Get URL to download private key

        :return: The private_key_download_url of this CertificateKeyPair.
        :rtype: str
        """
        return self._private_key_download_url

    @private_key_download_url.setter
    def private_key_download_url(self, private_key_download_url):
        """Sets the private_key_download_url of this CertificateKeyPair.

        Get URL to download private key

        :param private_key_download_url: The private_key_download_url of this CertificateKeyPair.
        :type private_key_download_url: str
        """
        if private_key_download_url is None:
            raise ValueError("Invalid value for `private_key_download_url`, must not be `None`")

        self._private_key_download_url = private_key_download_url

    @property
    def managed(self):
        """Gets the managed of this CertificateKeyPair.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this CertificateKeyPair.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this CertificateKeyPair.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this CertificateKeyPair.
        :type managed: str
        """
        if managed is None:
            raise ValueError("Invalid value for `managed`, must not be `None`")

        self._managed = managed
