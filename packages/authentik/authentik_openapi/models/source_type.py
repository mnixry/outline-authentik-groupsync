# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class SourceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, verbose_name: str=None, urls_customizable: bool=None, request_token_url: str=None, authorization_url: str=None, access_token_url: str=None, profile_url: str=None, oidc_well_known_url: str=None, oidc_jwks_url: str=None):
        """SourceType - a model defined in OpenAPI

        :param name: The name of this SourceType.
        :param verbose_name: The verbose_name of this SourceType.
        :param urls_customizable: The urls_customizable of this SourceType.
        :param request_token_url: The request_token_url of this SourceType.
        :param authorization_url: The authorization_url of this SourceType.
        :param access_token_url: The access_token_url of this SourceType.
        :param profile_url: The profile_url of this SourceType.
        :param oidc_well_known_url: The oidc_well_known_url of this SourceType.
        :param oidc_jwks_url: The oidc_jwks_url of this SourceType.
        """
        self.openapi_types = {
            'name': str,
            'verbose_name': str,
            'urls_customizable': bool,
            'request_token_url': str,
            'authorization_url': str,
            'access_token_url': str,
            'profile_url': str,
            'oidc_well_known_url': str,
            'oidc_jwks_url': str
        }

        self.attribute_map = {
            'name': 'name',
            'verbose_name': 'verbose_name',
            'urls_customizable': 'urls_customizable',
            'request_token_url': 'request_token_url',
            'authorization_url': 'authorization_url',
            'access_token_url': 'access_token_url',
            'profile_url': 'profile_url',
            'oidc_well_known_url': 'oidc_well_known_url',
            'oidc_jwks_url': 'oidc_jwks_url'
        }

        self._name = name
        self._verbose_name = verbose_name
        self._urls_customizable = urls_customizable
        self._request_token_url = request_token_url
        self._authorization_url = authorization_url
        self._access_token_url = access_token_url
        self._profile_url = profile_url
        self._oidc_well_known_url = oidc_well_known_url
        self._oidc_jwks_url = oidc_jwks_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceType of this SourceType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SourceType.


        :return: The name of this SourceType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceType.


        :param name: The name of this SourceType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def verbose_name(self):
        """Gets the verbose_name of this SourceType.


        :return: The verbose_name of this SourceType.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this SourceType.


        :param verbose_name: The verbose_name of this SourceType.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def urls_customizable(self):
        """Gets the urls_customizable of this SourceType.


        :return: The urls_customizable of this SourceType.
        :rtype: bool
        """
        return self._urls_customizable

    @urls_customizable.setter
    def urls_customizable(self, urls_customizable):
        """Sets the urls_customizable of this SourceType.


        :param urls_customizable: The urls_customizable of this SourceType.
        :type urls_customizable: bool
        """
        if urls_customizable is None:
            raise ValueError("Invalid value for `urls_customizable`, must not be `None`")

        self._urls_customizable = urls_customizable

    @property
    def request_token_url(self):
        """Gets the request_token_url of this SourceType.


        :return: The request_token_url of this SourceType.
        :rtype: str
        """
        return self._request_token_url

    @request_token_url.setter
    def request_token_url(self, request_token_url):
        """Sets the request_token_url of this SourceType.


        :param request_token_url: The request_token_url of this SourceType.
        :type request_token_url: str
        """
        if request_token_url is None:
            raise ValueError("Invalid value for `request_token_url`, must not be `None`")

        self._request_token_url = request_token_url

    @property
    def authorization_url(self):
        """Gets the authorization_url of this SourceType.


        :return: The authorization_url of this SourceType.
        :rtype: str
        """
        return self._authorization_url

    @authorization_url.setter
    def authorization_url(self, authorization_url):
        """Sets the authorization_url of this SourceType.


        :param authorization_url: The authorization_url of this SourceType.
        :type authorization_url: str
        """
        if authorization_url is None:
            raise ValueError("Invalid value for `authorization_url`, must not be `None`")

        self._authorization_url = authorization_url

    @property
    def access_token_url(self):
        """Gets the access_token_url of this SourceType.


        :return: The access_token_url of this SourceType.
        :rtype: str
        """
        return self._access_token_url

    @access_token_url.setter
    def access_token_url(self, access_token_url):
        """Sets the access_token_url of this SourceType.


        :param access_token_url: The access_token_url of this SourceType.
        :type access_token_url: str
        """
        if access_token_url is None:
            raise ValueError("Invalid value for `access_token_url`, must not be `None`")

        self._access_token_url = access_token_url

    @property
    def profile_url(self):
        """Gets the profile_url of this SourceType.


        :return: The profile_url of this SourceType.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this SourceType.


        :param profile_url: The profile_url of this SourceType.
        :type profile_url: str
        """
        if profile_url is None:
            raise ValueError("Invalid value for `profile_url`, must not be `None`")

        self._profile_url = profile_url

    @property
    def oidc_well_known_url(self):
        """Gets the oidc_well_known_url of this SourceType.


        :return: The oidc_well_known_url of this SourceType.
        :rtype: str
        """
        return self._oidc_well_known_url

    @oidc_well_known_url.setter
    def oidc_well_known_url(self, oidc_well_known_url):
        """Sets the oidc_well_known_url of this SourceType.


        :param oidc_well_known_url: The oidc_well_known_url of this SourceType.
        :type oidc_well_known_url: str
        """
        if oidc_well_known_url is None:
            raise ValueError("Invalid value for `oidc_well_known_url`, must not be `None`")

        self._oidc_well_known_url = oidc_well_known_url

    @property
    def oidc_jwks_url(self):
        """Gets the oidc_jwks_url of this SourceType.


        :return: The oidc_jwks_url of this SourceType.
        :rtype: str
        """
        return self._oidc_jwks_url

    @oidc_jwks_url.setter
    def oidc_jwks_url(self, oidc_jwks_url):
        """Sets the oidc_jwks_url of this SourceType.


        :param oidc_jwks_url: The oidc_jwks_url of this SourceType.
        :type oidc_jwks_url: str
        """
        if oidc_jwks_url is None:
            raise ValueError("Invalid value for `oidc_jwks_url`, must not be `None`")

        self._oidc_jwks_url = oidc_jwks_url
