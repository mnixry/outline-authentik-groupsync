# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class AuthenticatorDuoStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, configure_flow: str=None, friendly_name: str=None, client_id: str=None, client_secret: str=None, api_hostname: str=None, admin_integration_key: str=None, admin_secret_key: str=None):
        """AuthenticatorDuoStageRequest - a model defined in OpenAPI

        :param name: The name of this AuthenticatorDuoStageRequest.
        :param flow_set: The flow_set of this AuthenticatorDuoStageRequest.
        :param configure_flow: The configure_flow of this AuthenticatorDuoStageRequest.
        :param friendly_name: The friendly_name of this AuthenticatorDuoStageRequest.
        :param client_id: The client_id of this AuthenticatorDuoStageRequest.
        :param client_secret: The client_secret of this AuthenticatorDuoStageRequest.
        :param api_hostname: The api_hostname of this AuthenticatorDuoStageRequest.
        :param admin_integration_key: The admin_integration_key of this AuthenticatorDuoStageRequest.
        :param admin_secret_key: The admin_secret_key of this AuthenticatorDuoStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'configure_flow': str,
            'friendly_name': str,
            'client_id': str,
            'client_secret': str,
            'api_hostname': str,
            'admin_integration_key': str,
            'admin_secret_key': str
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'configure_flow': 'configure_flow',
            'friendly_name': 'friendly_name',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'api_hostname': 'api_hostname',
            'admin_integration_key': 'admin_integration_key',
            'admin_secret_key': 'admin_secret_key'
        }

        self._name = name
        self._flow_set = flow_set
        self._configure_flow = configure_flow
        self._friendly_name = friendly_name
        self._client_id = client_id
        self._client_secret = client_secret
        self._api_hostname = api_hostname
        self._admin_integration_key = admin_integration_key
        self._admin_secret_key = admin_secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatorDuoStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatorDuoStageRequest of this AuthenticatorDuoStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AuthenticatorDuoStageRequest.


        :return: The name of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticatorDuoStageRequest.


        :param name: The name of this AuthenticatorDuoStageRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this AuthenticatorDuoStageRequest.


        :return: The flow_set of this AuthenticatorDuoStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this AuthenticatorDuoStageRequest.


        :param flow_set: The flow_set of this AuthenticatorDuoStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def configure_flow(self):
        """Gets the configure_flow of this AuthenticatorDuoStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :return: The configure_flow of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._configure_flow

    @configure_flow.setter
    def configure_flow(self, configure_flow):
        """Sets the configure_flow of this AuthenticatorDuoStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :param configure_flow: The configure_flow of this AuthenticatorDuoStageRequest.
        :type configure_flow: str
        """

        self._configure_flow = configure_flow

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AuthenticatorDuoStageRequest.


        :return: The friendly_name of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AuthenticatorDuoStageRequest.


        :param friendly_name: The friendly_name of this AuthenticatorDuoStageRequest.
        :type friendly_name: str
        """
        if friendly_name is not None and len(friendly_name) < 1:
            raise ValueError("Invalid value for `friendly_name`, length must be greater than or equal to `1`")

        self._friendly_name = friendly_name

    @property
    def client_id(self):
        """Gets the client_id of this AuthenticatorDuoStageRequest.


        :return: The client_id of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AuthenticatorDuoStageRequest.


        :param client_id: The client_id of this AuthenticatorDuoStageRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) < 1:
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this AuthenticatorDuoStageRequest.


        :return: The client_secret of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AuthenticatorDuoStageRequest.


        :param client_secret: The client_secret of this AuthenticatorDuoStageRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")
        if client_secret is not None and len(client_secret) < 1:
            raise ValueError("Invalid value for `client_secret`, length must be greater than or equal to `1`")

        self._client_secret = client_secret

    @property
    def api_hostname(self):
        """Gets the api_hostname of this AuthenticatorDuoStageRequest.


        :return: The api_hostname of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._api_hostname

    @api_hostname.setter
    def api_hostname(self, api_hostname):
        """Sets the api_hostname of this AuthenticatorDuoStageRequest.


        :param api_hostname: The api_hostname of this AuthenticatorDuoStageRequest.
        :type api_hostname: str
        """
        if api_hostname is None:
            raise ValueError("Invalid value for `api_hostname`, must not be `None`")
        if api_hostname is not None and len(api_hostname) < 1:
            raise ValueError("Invalid value for `api_hostname`, length must be greater than or equal to `1`")

        self._api_hostname = api_hostname

    @property
    def admin_integration_key(self):
        """Gets the admin_integration_key of this AuthenticatorDuoStageRequest.


        :return: The admin_integration_key of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._admin_integration_key

    @admin_integration_key.setter
    def admin_integration_key(self, admin_integration_key):
        """Sets the admin_integration_key of this AuthenticatorDuoStageRequest.


        :param admin_integration_key: The admin_integration_key of this AuthenticatorDuoStageRequest.
        :type admin_integration_key: str
        """

        self._admin_integration_key = admin_integration_key

    @property
    def admin_secret_key(self):
        """Gets the admin_secret_key of this AuthenticatorDuoStageRequest.


        :return: The admin_secret_key of this AuthenticatorDuoStageRequest.
        :rtype: str
        """
        return self._admin_secret_key

    @admin_secret_key.setter
    def admin_secret_key(self, admin_secret_key):
        """Sets the admin_secret_key of this AuthenticatorDuoStageRequest.


        :param admin_secret_key: The admin_secret_key of this AuthenticatorDuoStageRequest.
        :type admin_secret_key: str
        """

        self._admin_secret_key = admin_secret_key
