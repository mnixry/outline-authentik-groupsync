# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.policy_test_result import PolicyTestResult
from authentik_openapi import util


class RadiusCheckAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: str=None, access: PolicyTestResult=None):
        """RadiusCheckAccess - a model defined in OpenAPI

        :param attributes: The attributes of this RadiusCheckAccess.
        :param access: The access of this RadiusCheckAccess.
        """
        self.openapi_types = {
            'attributes': str,
            'access': PolicyTestResult
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'access': 'access'
        }

        self._attributes = attributes
        self._access = access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RadiusCheckAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RadiusCheckAccess of this RadiusCheckAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this RadiusCheckAccess.


        :return: The attributes of this RadiusCheckAccess.
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this RadiusCheckAccess.


        :param attributes: The attributes of this RadiusCheckAccess.
        :type attributes: str
        """

        self._attributes = attributes

    @property
    def access(self):
        """Gets the access of this RadiusCheckAccess.


        :return: The access of this RadiusCheckAccess.
        :rtype: PolicyTestResult
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this RadiusCheckAccess.


        :param access: The access of this RadiusCheckAccess.
        :type access: PolicyTestResult
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")

        self._access = access
