# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
import re
from authentik_openapi import util


class PatchedInvitationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, expires: datetime=None, fixed_data: Dict[str, object]=None, single_use: bool=None, flow: str=None):
        """PatchedInvitationRequest - a model defined in OpenAPI

        :param name: The name of this PatchedInvitationRequest.
        :param expires: The expires of this PatchedInvitationRequest.
        :param fixed_data: The fixed_data of this PatchedInvitationRequest.
        :param single_use: The single_use of this PatchedInvitationRequest.
        :param flow: The flow of this PatchedInvitationRequest.
        """
        self.openapi_types = {
            'name': str,
            'expires': datetime,
            'fixed_data': Dict[str, object],
            'single_use': bool,
            'flow': str
        }

        self.attribute_map = {
            'name': 'name',
            'expires': 'expires',
            'fixed_data': 'fixed_data',
            'single_use': 'single_use',
            'flow': 'flow'
        }

        self._name = name
        self._expires = expires
        self._fixed_data = fixed_data
        self._single_use = single_use
        self._flow = flow

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedInvitationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedInvitationRequest of this PatchedInvitationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedInvitationRequest.


        :return: The name of this PatchedInvitationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedInvitationRequest.


        :param name: The name of this PatchedInvitationRequest.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[-a-zA-Z0-9_]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._name = name

    @property
    def expires(self):
        """Gets the expires of this PatchedInvitationRequest.


        :return: The expires of this PatchedInvitationRequest.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this PatchedInvitationRequest.


        :param expires: The expires of this PatchedInvitationRequest.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def fixed_data(self):
        """Gets the fixed_data of this PatchedInvitationRequest.


        :return: The fixed_data of this PatchedInvitationRequest.
        :rtype: Dict[str, object]
        """
        return self._fixed_data

    @fixed_data.setter
    def fixed_data(self, fixed_data):
        """Sets the fixed_data of this PatchedInvitationRequest.


        :param fixed_data: The fixed_data of this PatchedInvitationRequest.
        :type fixed_data: Dict[str, object]
        """

        self._fixed_data = fixed_data

    @property
    def single_use(self):
        """Gets the single_use of this PatchedInvitationRequest.

        When enabled, the invitation will be deleted after usage.

        :return: The single_use of this PatchedInvitationRequest.
        :rtype: bool
        """
        return self._single_use

    @single_use.setter
    def single_use(self, single_use):
        """Sets the single_use of this PatchedInvitationRequest.

        When enabled, the invitation will be deleted after usage.

        :param single_use: The single_use of this PatchedInvitationRequest.
        :type single_use: bool
        """

        self._single_use = single_use

    @property
    def flow(self):
        """Gets the flow of this PatchedInvitationRequest.

        When set, only the configured flow can use this invitation.

        :return: The flow of this PatchedInvitationRequest.
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this PatchedInvitationRequest.

        When set, only the configured flow can use this invitation.

        :param flow: The flow of this PatchedInvitationRequest.
        :type flow: str
        """

        self._flow = flow
