# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class PatchedInvitationStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, continue_flow_without_invitation: bool=None):
        """PatchedInvitationStageRequest - a model defined in OpenAPI

        :param name: The name of this PatchedInvitationStageRequest.
        :param flow_set: The flow_set of this PatchedInvitationStageRequest.
        :param continue_flow_without_invitation: The continue_flow_without_invitation of this PatchedInvitationStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'continue_flow_without_invitation': bool
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'continue_flow_without_invitation': 'continue_flow_without_invitation'
        }

        self._name = name
        self._flow_set = flow_set
        self._continue_flow_without_invitation = continue_flow_without_invitation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchedInvitationStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchedInvitationStageRequest of this PatchedInvitationStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PatchedInvitationStageRequest.


        :return: The name of this PatchedInvitationStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchedInvitationStageRequest.


        :param name: The name of this PatchedInvitationStageRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this PatchedInvitationStageRequest.


        :return: The flow_set of this PatchedInvitationStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this PatchedInvitationStageRequest.


        :param flow_set: The flow_set of this PatchedInvitationStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def continue_flow_without_invitation(self):
        """Gets the continue_flow_without_invitation of this PatchedInvitationStageRequest.

        If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given.

        :return: The continue_flow_without_invitation of this PatchedInvitationStageRequest.
        :rtype: bool
        """
        return self._continue_flow_without_invitation

    @continue_flow_without_invitation.setter
    def continue_flow_without_invitation(self, continue_flow_without_invitation):
        """Sets the continue_flow_without_invitation of this PatchedInvitationStageRequest.

        If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given.

        :param continue_flow_without_invitation: The continue_flow_without_invitation of this PatchedInvitationStageRequest.
        :type continue_flow_without_invitation: bool
        """

        self._continue_flow_without_invitation = continue_flow_without_invitation
