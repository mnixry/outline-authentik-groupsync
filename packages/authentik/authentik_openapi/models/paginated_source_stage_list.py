# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.pagination import Pagination
from authentik_openapi.models.source_stage import SourceStage
from authentik_openapi import util


class PaginatedSourceStageList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pagination: Pagination=None, results: List[SourceStage]=None):
        """PaginatedSourceStageList - a model defined in OpenAPI

        :param pagination: The pagination of this PaginatedSourceStageList.
        :param results: The results of this PaginatedSourceStageList.
        """
        self.openapi_types = {
            'pagination': Pagination,
            'results': List[SourceStage]
        }

        self.attribute_map = {
            'pagination': 'pagination',
            'results': 'results'
        }

        self._pagination = pagination
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginatedSourceStageList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginatedSourceStageList of this PaginatedSourceStageList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pagination(self):
        """Gets the pagination of this PaginatedSourceStageList.


        :return: The pagination of this PaginatedSourceStageList.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this PaginatedSourceStageList.


        :param pagination: The pagination of this PaginatedSourceStageList.
        :type pagination: Pagination
        """
        if pagination is None:
            raise ValueError("Invalid value for `pagination`, must not be `None`")

        self._pagination = pagination

    @property
    def results(self):
        """Gets the results of this PaginatedSourceStageList.


        :return: The results of this PaginatedSourceStageList.
        :rtype: List[SourceStage]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this PaginatedSourceStageList.


        :param results: The results of this PaginatedSourceStageList.
        :type results: List[SourceStage]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results
