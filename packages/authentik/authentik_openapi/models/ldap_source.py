# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.policy_engine_mode import PolicyEngineMode
from authentik_openapi.models.user_matching_mode_enum import UserMatchingModeEnum
import re
from authentik_openapi import util


class LDAPSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, slug: str=None, enabled: bool=None, authentication_flow: str=None, enrollment_flow: str=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, policy_engine_mode: PolicyEngineMode=None, user_matching_mode: UserMatchingModeEnum=None, managed: str=None, user_path_template: str=None, icon: str=None, server_uri: str=None, peer_certificate: str=None, client_certificate: str=None, bind_cn: str=None, start_tls: bool=None, sni: bool=None, base_dn: str=None, additional_user_dn: str=None, additional_group_dn: str=None, user_object_filter: str=None, group_object_filter: str=None, group_membership_field: str=None, object_uniqueness_field: str=None, password_login_update_internal_password: bool=None, sync_users: bool=None, sync_users_password: bool=None, sync_groups: bool=None, sync_parent_group: str=None, connectivity: Dict[str, Dict[str, str]]=None):
        """LDAPSource - a model defined in OpenAPI

        :param pk: The pk of this LDAPSource.
        :param name: The name of this LDAPSource.
        :param slug: The slug of this LDAPSource.
        :param enabled: The enabled of this LDAPSource.
        :param authentication_flow: The authentication_flow of this LDAPSource.
        :param enrollment_flow: The enrollment_flow of this LDAPSource.
        :param user_property_mappings: The user_property_mappings of this LDAPSource.
        :param group_property_mappings: The group_property_mappings of this LDAPSource.
        :param component: The component of this LDAPSource.
        :param verbose_name: The verbose_name of this LDAPSource.
        :param verbose_name_plural: The verbose_name_plural of this LDAPSource.
        :param meta_model_name: The meta_model_name of this LDAPSource.
        :param policy_engine_mode: The policy_engine_mode of this LDAPSource.
        :param user_matching_mode: The user_matching_mode of this LDAPSource.
        :param managed: The managed of this LDAPSource.
        :param user_path_template: The user_path_template of this LDAPSource.
        :param icon: The icon of this LDAPSource.
        :param server_uri: The server_uri of this LDAPSource.
        :param peer_certificate: The peer_certificate of this LDAPSource.
        :param client_certificate: The client_certificate of this LDAPSource.
        :param bind_cn: The bind_cn of this LDAPSource.
        :param start_tls: The start_tls of this LDAPSource.
        :param sni: The sni of this LDAPSource.
        :param base_dn: The base_dn of this LDAPSource.
        :param additional_user_dn: The additional_user_dn of this LDAPSource.
        :param additional_group_dn: The additional_group_dn of this LDAPSource.
        :param user_object_filter: The user_object_filter of this LDAPSource.
        :param group_object_filter: The group_object_filter of this LDAPSource.
        :param group_membership_field: The group_membership_field of this LDAPSource.
        :param object_uniqueness_field: The object_uniqueness_field of this LDAPSource.
        :param password_login_update_internal_password: The password_login_update_internal_password of this LDAPSource.
        :param sync_users: The sync_users of this LDAPSource.
        :param sync_users_password: The sync_users_password of this LDAPSource.
        :param sync_groups: The sync_groups of this LDAPSource.
        :param sync_parent_group: The sync_parent_group of this LDAPSource.
        :param connectivity: The connectivity of this LDAPSource.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'slug': str,
            'enabled': bool,
            'authentication_flow': str,
            'enrollment_flow': str,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'policy_engine_mode': PolicyEngineMode,
            'user_matching_mode': UserMatchingModeEnum,
            'managed': str,
            'user_path_template': str,
            'icon': str,
            'server_uri': str,
            'peer_certificate': str,
            'client_certificate': str,
            'bind_cn': str,
            'start_tls': bool,
            'sni': bool,
            'base_dn': str,
            'additional_user_dn': str,
            'additional_group_dn': str,
            'user_object_filter': str,
            'group_object_filter': str,
            'group_membership_field': str,
            'object_uniqueness_field': str,
            'password_login_update_internal_password': bool,
            'sync_users': bool,
            'sync_users_password': bool,
            'sync_groups': bool,
            'sync_parent_group': str,
            'connectivity': Dict[str, Dict[str, str]]
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'authentication_flow': 'authentication_flow',
            'enrollment_flow': 'enrollment_flow',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'policy_engine_mode': 'policy_engine_mode',
            'user_matching_mode': 'user_matching_mode',
            'managed': 'managed',
            'user_path_template': 'user_path_template',
            'icon': 'icon',
            'server_uri': 'server_uri',
            'peer_certificate': 'peer_certificate',
            'client_certificate': 'client_certificate',
            'bind_cn': 'bind_cn',
            'start_tls': 'start_tls',
            'sni': 'sni',
            'base_dn': 'base_dn',
            'additional_user_dn': 'additional_user_dn',
            'additional_group_dn': 'additional_group_dn',
            'user_object_filter': 'user_object_filter',
            'group_object_filter': 'group_object_filter',
            'group_membership_field': 'group_membership_field',
            'object_uniqueness_field': 'object_uniqueness_field',
            'password_login_update_internal_password': 'password_login_update_internal_password',
            'sync_users': 'sync_users',
            'sync_users_password': 'sync_users_password',
            'sync_groups': 'sync_groups',
            'sync_parent_group': 'sync_parent_group',
            'connectivity': 'connectivity'
        }

        self._pk = pk
        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._authentication_flow = authentication_flow
        self._enrollment_flow = enrollment_flow
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._policy_engine_mode = policy_engine_mode
        self._user_matching_mode = user_matching_mode
        self._managed = managed
        self._user_path_template = user_path_template
        self._icon = icon
        self._server_uri = server_uri
        self._peer_certificate = peer_certificate
        self._client_certificate = client_certificate
        self._bind_cn = bind_cn
        self._start_tls = start_tls
        self._sni = sni
        self._base_dn = base_dn
        self._additional_user_dn = additional_user_dn
        self._additional_group_dn = additional_group_dn
        self._user_object_filter = user_object_filter
        self._group_object_filter = group_object_filter
        self._group_membership_field = group_membership_field
        self._object_uniqueness_field = object_uniqueness_field
        self._password_login_update_internal_password = password_login_update_internal_password
        self._sync_users = sync_users
        self._sync_users_password = sync_users_password
        self._sync_groups = sync_groups
        self._sync_parent_group = sync_parent_group
        self._connectivity = connectivity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LDAPSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LDAPSource of this LDAPSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this LDAPSource.


        :return: The pk of this LDAPSource.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this LDAPSource.


        :param pk: The pk of this LDAPSource.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this LDAPSource.

        Source's display Name.

        :return: The name of this LDAPSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LDAPSource.

        Source's display Name.

        :param name: The name of this LDAPSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this LDAPSource.

        Internal source name, used in URLs.

        :return: The slug of this LDAPSource.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this LDAPSource.

        Internal source name, used in URLs.

        :param slug: The slug of this LDAPSource.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this LDAPSource.


        :return: The enabled of this LDAPSource.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LDAPSource.


        :param enabled: The enabled of this LDAPSource.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this LDAPSource.

        Flow to use when authenticating existing users.

        :return: The authentication_flow of this LDAPSource.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this LDAPSource.

        Flow to use when authenticating existing users.

        :param authentication_flow: The authentication_flow of this LDAPSource.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def enrollment_flow(self):
        """Gets the enrollment_flow of this LDAPSource.

        Flow to use when enrolling new users.

        :return: The enrollment_flow of this LDAPSource.
        :rtype: str
        """
        return self._enrollment_flow

    @enrollment_flow.setter
    def enrollment_flow(self, enrollment_flow):
        """Sets the enrollment_flow of this LDAPSource.

        Flow to use when enrolling new users.

        :param enrollment_flow: The enrollment_flow of this LDAPSource.
        :type enrollment_flow: str
        """

        self._enrollment_flow = enrollment_flow

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this LDAPSource.


        :return: The user_property_mappings of this LDAPSource.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this LDAPSource.


        :param user_property_mappings: The user_property_mappings of this LDAPSource.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this LDAPSource.


        :return: The group_property_mappings of this LDAPSource.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this LDAPSource.


        :param group_property_mappings: The group_property_mappings of this LDAPSource.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def component(self):
        """Gets the component of this LDAPSource.

        Get object component so that we know how to edit the object

        :return: The component of this LDAPSource.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this LDAPSource.

        Get object component so that we know how to edit the object

        :param component: The component of this LDAPSource.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this LDAPSource.

        Return object's verbose_name

        :return: The verbose_name of this LDAPSource.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this LDAPSource.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this LDAPSource.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this LDAPSource.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this LDAPSource.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this LDAPSource.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this LDAPSource.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this LDAPSource.

        Return internal model name

        :return: The meta_model_name of this LDAPSource.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this LDAPSource.

        Return internal model name

        :param meta_model_name: The meta_model_name of this LDAPSource.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def policy_engine_mode(self):
        """Gets the policy_engine_mode of this LDAPSource.


        :return: The policy_engine_mode of this LDAPSource.
        :rtype: PolicyEngineMode
        """
        return self._policy_engine_mode

    @policy_engine_mode.setter
    def policy_engine_mode(self, policy_engine_mode):
        """Sets the policy_engine_mode of this LDAPSource.


        :param policy_engine_mode: The policy_engine_mode of this LDAPSource.
        :type policy_engine_mode: PolicyEngineMode
        """

        self._policy_engine_mode = policy_engine_mode

    @property
    def user_matching_mode(self):
        """Gets the user_matching_mode of this LDAPSource.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :return: The user_matching_mode of this LDAPSource.
        :rtype: UserMatchingModeEnum
        """
        return self._user_matching_mode

    @user_matching_mode.setter
    def user_matching_mode(self, user_matching_mode):
        """Sets the user_matching_mode of this LDAPSource.

        How the source determines if an existing user should be authenticated or a new user enrolled.

        :param user_matching_mode: The user_matching_mode of this LDAPSource.
        :type user_matching_mode: UserMatchingModeEnum
        """

        self._user_matching_mode = user_matching_mode

    @property
    def managed(self):
        """Gets the managed of this LDAPSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this LDAPSource.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this LDAPSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this LDAPSource.
        :type managed: str
        """
        if managed is None:
            raise ValueError("Invalid value for `managed`, must not be `None`")

        self._managed = managed

    @property
    def user_path_template(self):
        """Gets the user_path_template of this LDAPSource.


        :return: The user_path_template of this LDAPSource.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this LDAPSource.


        :param user_path_template: The user_path_template of this LDAPSource.
        :type user_path_template: str
        """

        self._user_path_template = user_path_template

    @property
    def icon(self):
        """Gets the icon of this LDAPSource.


        :return: The icon of this LDAPSource.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this LDAPSource.


        :param icon: The icon of this LDAPSource.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def server_uri(self):
        """Gets the server_uri of this LDAPSource.


        :return: The server_uri of this LDAPSource.
        :rtype: str
        """
        return self._server_uri

    @server_uri.setter
    def server_uri(self, server_uri):
        """Sets the server_uri of this LDAPSource.


        :param server_uri: The server_uri of this LDAPSource.
        :type server_uri: str
        """
        if server_uri is None:
            raise ValueError("Invalid value for `server_uri`, must not be `None`")

        self._server_uri = server_uri

    @property
    def peer_certificate(self):
        """Gets the peer_certificate of this LDAPSource.

        Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.

        :return: The peer_certificate of this LDAPSource.
        :rtype: str
        """
        return self._peer_certificate

    @peer_certificate.setter
    def peer_certificate(self, peer_certificate):
        """Sets the peer_certificate of this LDAPSource.

        Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.

        :param peer_certificate: The peer_certificate of this LDAPSource.
        :type peer_certificate: str
        """

        self._peer_certificate = peer_certificate

    @property
    def client_certificate(self):
        """Gets the client_certificate of this LDAPSource.

        Client certificate to authenticate against the LDAP Server's Certificate.

        :return: The client_certificate of this LDAPSource.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this LDAPSource.

        Client certificate to authenticate against the LDAP Server's Certificate.

        :param client_certificate: The client_certificate of this LDAPSource.
        :type client_certificate: str
        """

        self._client_certificate = client_certificate

    @property
    def bind_cn(self):
        """Gets the bind_cn of this LDAPSource.


        :return: The bind_cn of this LDAPSource.
        :rtype: str
        """
        return self._bind_cn

    @bind_cn.setter
    def bind_cn(self, bind_cn):
        """Sets the bind_cn of this LDAPSource.


        :param bind_cn: The bind_cn of this LDAPSource.
        :type bind_cn: str
        """

        self._bind_cn = bind_cn

    @property
    def start_tls(self):
        """Gets the start_tls of this LDAPSource.


        :return: The start_tls of this LDAPSource.
        :rtype: bool
        """
        return self._start_tls

    @start_tls.setter
    def start_tls(self, start_tls):
        """Sets the start_tls of this LDAPSource.


        :param start_tls: The start_tls of this LDAPSource.
        :type start_tls: bool
        """

        self._start_tls = start_tls

    @property
    def sni(self):
        """Gets the sni of this LDAPSource.


        :return: The sni of this LDAPSource.
        :rtype: bool
        """
        return self._sni

    @sni.setter
    def sni(self, sni):
        """Sets the sni of this LDAPSource.


        :param sni: The sni of this LDAPSource.
        :type sni: bool
        """

        self._sni = sni

    @property
    def base_dn(self):
        """Gets the base_dn of this LDAPSource.


        :return: The base_dn of this LDAPSource.
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this LDAPSource.


        :param base_dn: The base_dn of this LDAPSource.
        :type base_dn: str
        """
        if base_dn is None:
            raise ValueError("Invalid value for `base_dn`, must not be `None`")

        self._base_dn = base_dn

    @property
    def additional_user_dn(self):
        """Gets the additional_user_dn of this LDAPSource.

        Prepended to Base DN for User-queries.

        :return: The additional_user_dn of this LDAPSource.
        :rtype: str
        """
        return self._additional_user_dn

    @additional_user_dn.setter
    def additional_user_dn(self, additional_user_dn):
        """Sets the additional_user_dn of this LDAPSource.

        Prepended to Base DN for User-queries.

        :param additional_user_dn: The additional_user_dn of this LDAPSource.
        :type additional_user_dn: str
        """

        self._additional_user_dn = additional_user_dn

    @property
    def additional_group_dn(self):
        """Gets the additional_group_dn of this LDAPSource.

        Prepended to Base DN for Group-queries.

        :return: The additional_group_dn of this LDAPSource.
        :rtype: str
        """
        return self._additional_group_dn

    @additional_group_dn.setter
    def additional_group_dn(self, additional_group_dn):
        """Sets the additional_group_dn of this LDAPSource.

        Prepended to Base DN for Group-queries.

        :param additional_group_dn: The additional_group_dn of this LDAPSource.
        :type additional_group_dn: str
        """

        self._additional_group_dn = additional_group_dn

    @property
    def user_object_filter(self):
        """Gets the user_object_filter of this LDAPSource.

        Consider Objects matching this filter to be Users.

        :return: The user_object_filter of this LDAPSource.
        :rtype: str
        """
        return self._user_object_filter

    @user_object_filter.setter
    def user_object_filter(self, user_object_filter):
        """Sets the user_object_filter of this LDAPSource.

        Consider Objects matching this filter to be Users.

        :param user_object_filter: The user_object_filter of this LDAPSource.
        :type user_object_filter: str
        """

        self._user_object_filter = user_object_filter

    @property
    def group_object_filter(self):
        """Gets the group_object_filter of this LDAPSource.

        Consider Objects matching this filter to be Groups.

        :return: The group_object_filter of this LDAPSource.
        :rtype: str
        """
        return self._group_object_filter

    @group_object_filter.setter
    def group_object_filter(self, group_object_filter):
        """Sets the group_object_filter of this LDAPSource.

        Consider Objects matching this filter to be Groups.

        :param group_object_filter: The group_object_filter of this LDAPSource.
        :type group_object_filter: str
        """

        self._group_object_filter = group_object_filter

    @property
    def group_membership_field(self):
        """Gets the group_membership_field of this LDAPSource.

        Field which contains members of a group.

        :return: The group_membership_field of this LDAPSource.
        :rtype: str
        """
        return self._group_membership_field

    @group_membership_field.setter
    def group_membership_field(self, group_membership_field):
        """Sets the group_membership_field of this LDAPSource.

        Field which contains members of a group.

        :param group_membership_field: The group_membership_field of this LDAPSource.
        :type group_membership_field: str
        """

        self._group_membership_field = group_membership_field

    @property
    def object_uniqueness_field(self):
        """Gets the object_uniqueness_field of this LDAPSource.

        Field which contains a unique Identifier.

        :return: The object_uniqueness_field of this LDAPSource.
        :rtype: str
        """
        return self._object_uniqueness_field

    @object_uniqueness_field.setter
    def object_uniqueness_field(self, object_uniqueness_field):
        """Sets the object_uniqueness_field of this LDAPSource.

        Field which contains a unique Identifier.

        :param object_uniqueness_field: The object_uniqueness_field of this LDAPSource.
        :type object_uniqueness_field: str
        """

        self._object_uniqueness_field = object_uniqueness_field

    @property
    def password_login_update_internal_password(self):
        """Gets the password_login_update_internal_password of this LDAPSource.

        Update internal authentik password when login succeeds with LDAP

        :return: The password_login_update_internal_password of this LDAPSource.
        :rtype: bool
        """
        return self._password_login_update_internal_password

    @password_login_update_internal_password.setter
    def password_login_update_internal_password(self, password_login_update_internal_password):
        """Sets the password_login_update_internal_password of this LDAPSource.

        Update internal authentik password when login succeeds with LDAP

        :param password_login_update_internal_password: The password_login_update_internal_password of this LDAPSource.
        :type password_login_update_internal_password: bool
        """

        self._password_login_update_internal_password = password_login_update_internal_password

    @property
    def sync_users(self):
        """Gets the sync_users of this LDAPSource.


        :return: The sync_users of this LDAPSource.
        :rtype: bool
        """
        return self._sync_users

    @sync_users.setter
    def sync_users(self, sync_users):
        """Sets the sync_users of this LDAPSource.


        :param sync_users: The sync_users of this LDAPSource.
        :type sync_users: bool
        """

        self._sync_users = sync_users

    @property
    def sync_users_password(self):
        """Gets the sync_users_password of this LDAPSource.

        When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source.

        :return: The sync_users_password of this LDAPSource.
        :rtype: bool
        """
        return self._sync_users_password

    @sync_users_password.setter
    def sync_users_password(self, sync_users_password):
        """Sets the sync_users_password of this LDAPSource.

        When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source.

        :param sync_users_password: The sync_users_password of this LDAPSource.
        :type sync_users_password: bool
        """

        self._sync_users_password = sync_users_password

    @property
    def sync_groups(self):
        """Gets the sync_groups of this LDAPSource.


        :return: The sync_groups of this LDAPSource.
        :rtype: bool
        """
        return self._sync_groups

    @sync_groups.setter
    def sync_groups(self, sync_groups):
        """Sets the sync_groups of this LDAPSource.


        :param sync_groups: The sync_groups of this LDAPSource.
        :type sync_groups: bool
        """

        self._sync_groups = sync_groups

    @property
    def sync_parent_group(self):
        """Gets the sync_parent_group of this LDAPSource.


        :return: The sync_parent_group of this LDAPSource.
        :rtype: str
        """
        return self._sync_parent_group

    @sync_parent_group.setter
    def sync_parent_group(self, sync_parent_group):
        """Sets the sync_parent_group of this LDAPSource.


        :param sync_parent_group: The sync_parent_group of this LDAPSource.
        :type sync_parent_group: str
        """

        self._sync_parent_group = sync_parent_group

    @property
    def connectivity(self):
        """Gets the connectivity of this LDAPSource.

        Get cached source connectivity

        :return: The connectivity of this LDAPSource.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this LDAPSource.

        Get cached source connectivity

        :param connectivity: The connectivity of this LDAPSource.
        :type connectivity: Dict[str, Dict[str, str]]
        """
        if connectivity is None:
            raise ValueError("Invalid value for `connectivity`, must not be `None`")

        self._connectivity = connectivity
