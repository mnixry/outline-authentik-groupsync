# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.token import Token
import re
from authentik_openapi import util


class SCIMSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, slug: str=None, enabled: bool=None, user_property_mappings: List[str]=None, group_property_mappings: List[str]=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, managed: str=None, user_path_template: str=None, root_url: str=None, token_obj: Token=None):
        """SCIMSource - a model defined in OpenAPI

        :param pk: The pk of this SCIMSource.
        :param name: The name of this SCIMSource.
        :param slug: The slug of this SCIMSource.
        :param enabled: The enabled of this SCIMSource.
        :param user_property_mappings: The user_property_mappings of this SCIMSource.
        :param group_property_mappings: The group_property_mappings of this SCIMSource.
        :param component: The component of this SCIMSource.
        :param verbose_name: The verbose_name of this SCIMSource.
        :param verbose_name_plural: The verbose_name_plural of this SCIMSource.
        :param meta_model_name: The meta_model_name of this SCIMSource.
        :param managed: The managed of this SCIMSource.
        :param user_path_template: The user_path_template of this SCIMSource.
        :param root_url: The root_url of this SCIMSource.
        :param token_obj: The token_obj of this SCIMSource.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'slug': str,
            'enabled': bool,
            'user_property_mappings': List[str],
            'group_property_mappings': List[str],
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'managed': str,
            'user_path_template': str,
            'root_url': str,
            'token_obj': Token
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'slug': 'slug',
            'enabled': 'enabled',
            'user_property_mappings': 'user_property_mappings',
            'group_property_mappings': 'group_property_mappings',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'managed': 'managed',
            'user_path_template': 'user_path_template',
            'root_url': 'root_url',
            'token_obj': 'token_obj'
        }

        self._pk = pk
        self._name = name
        self._slug = slug
        self._enabled = enabled
        self._user_property_mappings = user_property_mappings
        self._group_property_mappings = group_property_mappings
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._managed = managed
        self._user_path_template = user_path_template
        self._root_url = root_url
        self._token_obj = token_obj

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SCIMSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SCIMSource of this SCIMSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this SCIMSource.


        :return: The pk of this SCIMSource.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this SCIMSource.


        :param pk: The pk of this SCIMSource.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this SCIMSource.

        Source's display Name.

        :return: The name of this SCIMSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SCIMSource.

        Source's display Name.

        :param name: The name of this SCIMSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SCIMSource.

        Internal source name, used in URLs.

        :return: The slug of this SCIMSource.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SCIMSource.

        Internal source name, used in URLs.

        :param slug: The slug of this SCIMSource.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def enabled(self):
        """Gets the enabled of this SCIMSource.


        :return: The enabled of this SCIMSource.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SCIMSource.


        :param enabled: The enabled of this SCIMSource.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def user_property_mappings(self):
        """Gets the user_property_mappings of this SCIMSource.


        :return: The user_property_mappings of this SCIMSource.
        :rtype: List[str]
        """
        return self._user_property_mappings

    @user_property_mappings.setter
    def user_property_mappings(self, user_property_mappings):
        """Sets the user_property_mappings of this SCIMSource.


        :param user_property_mappings: The user_property_mappings of this SCIMSource.
        :type user_property_mappings: List[str]
        """

        self._user_property_mappings = user_property_mappings

    @property
    def group_property_mappings(self):
        """Gets the group_property_mappings of this SCIMSource.


        :return: The group_property_mappings of this SCIMSource.
        :rtype: List[str]
        """
        return self._group_property_mappings

    @group_property_mappings.setter
    def group_property_mappings(self, group_property_mappings):
        """Sets the group_property_mappings of this SCIMSource.


        :param group_property_mappings: The group_property_mappings of this SCIMSource.
        :type group_property_mappings: List[str]
        """

        self._group_property_mappings = group_property_mappings

    @property
    def component(self):
        """Gets the component of this SCIMSource.

        Get object component so that we know how to edit the object

        :return: The component of this SCIMSource.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this SCIMSource.

        Get object component so that we know how to edit the object

        :param component: The component of this SCIMSource.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this SCIMSource.

        Return object's verbose_name

        :return: The verbose_name of this SCIMSource.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this SCIMSource.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this SCIMSource.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this SCIMSource.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this SCIMSource.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this SCIMSource.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this SCIMSource.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this SCIMSource.

        Return internal model name

        :return: The meta_model_name of this SCIMSource.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this SCIMSource.

        Return internal model name

        :param meta_model_name: The meta_model_name of this SCIMSource.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def managed(self):
        """Gets the managed of this SCIMSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :return: The managed of this SCIMSource.
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this SCIMSource.

        Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.

        :param managed: The managed of this SCIMSource.
        :type managed: str
        """
        if managed is None:
            raise ValueError("Invalid value for `managed`, must not be `None`")

        self._managed = managed

    @property
    def user_path_template(self):
        """Gets the user_path_template of this SCIMSource.


        :return: The user_path_template of this SCIMSource.
        :rtype: str
        """
        return self._user_path_template

    @user_path_template.setter
    def user_path_template(self, user_path_template):
        """Sets the user_path_template of this SCIMSource.


        :param user_path_template: The user_path_template of this SCIMSource.
        :type user_path_template: str
        """

        self._user_path_template = user_path_template

    @property
    def root_url(self):
        """Gets the root_url of this SCIMSource.

        Get Root URL

        :return: The root_url of this SCIMSource.
        :rtype: str
        """
        return self._root_url

    @root_url.setter
    def root_url(self, root_url):
        """Sets the root_url of this SCIMSource.

        Get Root URL

        :param root_url: The root_url of this SCIMSource.
        :type root_url: str
        """
        if root_url is None:
            raise ValueError("Invalid value for `root_url`, must not be `None`")

        self._root_url = root_url

    @property
    def token_obj(self):
        """Gets the token_obj of this SCIMSource.


        :return: The token_obj of this SCIMSource.
        :rtype: Token
        """
        return self._token_obj

    @token_obj.setter
    def token_obj(self, token_obj):
        """Sets the token_obj of this SCIMSource.


        :param token_obj: The token_obj of this SCIMSource.
        :type token_obj: Token
        """
        if token_obj is None:
            raise ValueError("Invalid value for `token_obj`, must not be `None`")

        self._token_obj = token_obj
