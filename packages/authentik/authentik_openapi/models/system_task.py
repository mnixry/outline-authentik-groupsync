# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.log_event import LogEvent
from authentik_openapi.models.system_task_status_enum import SystemTaskStatusEnum
from authentik_openapi import util


class SystemTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None, name: str=None, full_name: str=None, uid: str=None, description: str=None, start_timestamp: datetime=None, finish_timestamp: datetime=None, duration: float=None, status: SystemTaskStatusEnum=None, messages: List[LogEvent]=None, expires: datetime=None, expiring: bool=None):
        """SystemTask - a model defined in OpenAPI

        :param uuid: The uuid of this SystemTask.
        :param name: The name of this SystemTask.
        :param full_name: The full_name of this SystemTask.
        :param uid: The uid of this SystemTask.
        :param description: The description of this SystemTask.
        :param start_timestamp: The start_timestamp of this SystemTask.
        :param finish_timestamp: The finish_timestamp of this SystemTask.
        :param duration: The duration of this SystemTask.
        :param status: The status of this SystemTask.
        :param messages: The messages of this SystemTask.
        :param expires: The expires of this SystemTask.
        :param expiring: The expiring of this SystemTask.
        """
        self.openapi_types = {
            'uuid': str,
            'name': str,
            'full_name': str,
            'uid': str,
            'description': str,
            'start_timestamp': datetime,
            'finish_timestamp': datetime,
            'duration': float,
            'status': SystemTaskStatusEnum,
            'messages': List[LogEvent],
            'expires': datetime,
            'expiring': bool
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'full_name': 'full_name',
            'uid': 'uid',
            'description': 'description',
            'start_timestamp': 'start_timestamp',
            'finish_timestamp': 'finish_timestamp',
            'duration': 'duration',
            'status': 'status',
            'messages': 'messages',
            'expires': 'expires',
            'expiring': 'expiring'
        }

        self._uuid = uuid
        self._name = name
        self._full_name = full_name
        self._uid = uid
        self._description = description
        self._start_timestamp = start_timestamp
        self._finish_timestamp = finish_timestamp
        self._duration = duration
        self._status = status
        self._messages = messages
        self._expires = expires
        self._expiring = expiring

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemTask of this SystemTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this SystemTask.


        :return: The uuid of this SystemTask.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SystemTask.


        :param uuid: The uuid of this SystemTask.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this SystemTask.


        :return: The name of this SystemTask.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemTask.


        :param name: The name of this SystemTask.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def full_name(self):
        """Gets the full_name of this SystemTask.

        Get full name with UID

        :return: The full_name of this SystemTask.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SystemTask.

        Get full name with UID

        :param full_name: The full_name of this SystemTask.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def uid(self):
        """Gets the uid of this SystemTask.


        :return: The uid of this SystemTask.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SystemTask.


        :param uid: The uid of this SystemTask.
        :type uid: str
        """

        self._uid = uid

    @property
    def description(self):
        """Gets the description of this SystemTask.


        :return: The description of this SystemTask.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SystemTask.


        :param description: The description of this SystemTask.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this SystemTask.


        :return: The start_timestamp of this SystemTask.
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this SystemTask.


        :param start_timestamp: The start_timestamp of this SystemTask.
        :type start_timestamp: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")

        self._start_timestamp = start_timestamp

    @property
    def finish_timestamp(self):
        """Gets the finish_timestamp of this SystemTask.


        :return: The finish_timestamp of this SystemTask.
        :rtype: datetime
        """
        return self._finish_timestamp

    @finish_timestamp.setter
    def finish_timestamp(self, finish_timestamp):
        """Sets the finish_timestamp of this SystemTask.


        :param finish_timestamp: The finish_timestamp of this SystemTask.
        :type finish_timestamp: datetime
        """
        if finish_timestamp is None:
            raise ValueError("Invalid value for `finish_timestamp`, must not be `None`")

        self._finish_timestamp = finish_timestamp

    @property
    def duration(self):
        """Gets the duration of this SystemTask.


        :return: The duration of this SystemTask.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SystemTask.


        :param duration: The duration of this SystemTask.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def status(self):
        """Gets the status of this SystemTask.


        :return: The status of this SystemTask.
        :rtype: SystemTaskStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SystemTask.


        :param status: The status of this SystemTask.
        :type status: SystemTaskStatusEnum
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def messages(self):
        """Gets the messages of this SystemTask.


        :return: The messages of this SystemTask.
        :rtype: List[LogEvent]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this SystemTask.


        :param messages: The messages of this SystemTask.
        :type messages: List[LogEvent]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def expires(self):
        """Gets the expires of this SystemTask.


        :return: The expires of this SystemTask.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this SystemTask.


        :param expires: The expires of this SystemTask.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def expiring(self):
        """Gets the expiring of this SystemTask.


        :return: The expiring of this SystemTask.
        :rtype: bool
        """
        return self._expiring

    @expiring.setter
    def expiring(self, expiring):
        """Sets the expiring of this SystemTask.


        :param expiring: The expiring of this SystemTask.
        :type expiring: bool
        """

        self._expiring = expiring
