# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class AuthenticatorStaticStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, configure_flow: str=None, friendly_name: str=None, token_count: int=None, token_length: int=None):
        """AuthenticatorStaticStageRequest - a model defined in OpenAPI

        :param name: The name of this AuthenticatorStaticStageRequest.
        :param flow_set: The flow_set of this AuthenticatorStaticStageRequest.
        :param configure_flow: The configure_flow of this AuthenticatorStaticStageRequest.
        :param friendly_name: The friendly_name of this AuthenticatorStaticStageRequest.
        :param token_count: The token_count of this AuthenticatorStaticStageRequest.
        :param token_length: The token_length of this AuthenticatorStaticStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'configure_flow': str,
            'friendly_name': str,
            'token_count': int,
            'token_length': int
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'configure_flow': 'configure_flow',
            'friendly_name': 'friendly_name',
            'token_count': 'token_count',
            'token_length': 'token_length'
        }

        self._name = name
        self._flow_set = flow_set
        self._configure_flow = configure_flow
        self._friendly_name = friendly_name
        self._token_count = token_count
        self._token_length = token_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatorStaticStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatorStaticStageRequest of this AuthenticatorStaticStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AuthenticatorStaticStageRequest.


        :return: The name of this AuthenticatorStaticStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticatorStaticStageRequest.


        :param name: The name of this AuthenticatorStaticStageRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this AuthenticatorStaticStageRequest.


        :return: The flow_set of this AuthenticatorStaticStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this AuthenticatorStaticStageRequest.


        :param flow_set: The flow_set of this AuthenticatorStaticStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def configure_flow(self):
        """Gets the configure_flow of this AuthenticatorStaticStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :return: The configure_flow of this AuthenticatorStaticStageRequest.
        :rtype: str
        """
        return self._configure_flow

    @configure_flow.setter
    def configure_flow(self, configure_flow):
        """Sets the configure_flow of this AuthenticatorStaticStageRequest.

        Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.

        :param configure_flow: The configure_flow of this AuthenticatorStaticStageRequest.
        :type configure_flow: str
        """

        self._configure_flow = configure_flow

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AuthenticatorStaticStageRequest.


        :return: The friendly_name of this AuthenticatorStaticStageRequest.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AuthenticatorStaticStageRequest.


        :param friendly_name: The friendly_name of this AuthenticatorStaticStageRequest.
        :type friendly_name: str
        """
        if friendly_name is not None and len(friendly_name) < 1:
            raise ValueError("Invalid value for `friendly_name`, length must be greater than or equal to `1`")

        self._friendly_name = friendly_name

    @property
    def token_count(self):
        """Gets the token_count of this AuthenticatorStaticStageRequest.


        :return: The token_count of this AuthenticatorStaticStageRequest.
        :rtype: int
        """
        return self._token_count

    @token_count.setter
    def token_count(self, token_count):
        """Sets the token_count of this AuthenticatorStaticStageRequest.


        :param token_count: The token_count of this AuthenticatorStaticStageRequest.
        :type token_count: int
        """
        if token_count is not None and token_count > 2147483647:
            raise ValueError("Invalid value for `token_count`, must be a value less than or equal to `2147483647`")
        if token_count is not None and token_count < 0:
            raise ValueError("Invalid value for `token_count`, must be a value greater than or equal to `0`")

        self._token_count = token_count

    @property
    def token_length(self):
        """Gets the token_length of this AuthenticatorStaticStageRequest.


        :return: The token_length of this AuthenticatorStaticStageRequest.
        :rtype: int
        """
        return self._token_length

    @token_length.setter
    def token_length(self, token_length):
        """Sets the token_length of this AuthenticatorStaticStageRequest.


        :param token_length: The token_length of this AuthenticatorStaticStageRequest.
        :type token_length: int
        """
        if token_length is not None and token_length > 2147483647:
            raise ValueError("Invalid value for `token_length`, must be a value less than or equal to `2147483647`")
        if token_length is not None and token_length < 0:
            raise ValueError("Invalid value for `token_length`, must be a value greater than or equal to `0`")

        self._token_length = token_length
