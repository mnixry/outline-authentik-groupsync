# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class ErrorReportingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, sentry_dsn: str=None, environment: str=None, send_pii: bool=None, traces_sample_rate: float=None):
        """ErrorReportingConfig - a model defined in OpenAPI

        :param enabled: The enabled of this ErrorReportingConfig.
        :param sentry_dsn: The sentry_dsn of this ErrorReportingConfig.
        :param environment: The environment of this ErrorReportingConfig.
        :param send_pii: The send_pii of this ErrorReportingConfig.
        :param traces_sample_rate: The traces_sample_rate of this ErrorReportingConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'sentry_dsn': str,
            'environment': str,
            'send_pii': bool,
            'traces_sample_rate': float
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'sentry_dsn': 'sentry_dsn',
            'environment': 'environment',
            'send_pii': 'send_pii',
            'traces_sample_rate': 'traces_sample_rate'
        }

        self._enabled = enabled
        self._sentry_dsn = sentry_dsn
        self._environment = environment
        self._send_pii = send_pii
        self._traces_sample_rate = traces_sample_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorReportingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorReportingConfig of this ErrorReportingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ErrorReportingConfig.


        :return: The enabled of this ErrorReportingConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ErrorReportingConfig.


        :param enabled: The enabled of this ErrorReportingConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def sentry_dsn(self):
        """Gets the sentry_dsn of this ErrorReportingConfig.


        :return: The sentry_dsn of this ErrorReportingConfig.
        :rtype: str
        """
        return self._sentry_dsn

    @sentry_dsn.setter
    def sentry_dsn(self, sentry_dsn):
        """Sets the sentry_dsn of this ErrorReportingConfig.


        :param sentry_dsn: The sentry_dsn of this ErrorReportingConfig.
        :type sentry_dsn: str
        """
        if sentry_dsn is None:
            raise ValueError("Invalid value for `sentry_dsn`, must not be `None`")

        self._sentry_dsn = sentry_dsn

    @property
    def environment(self):
        """Gets the environment of this ErrorReportingConfig.


        :return: The environment of this ErrorReportingConfig.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ErrorReportingConfig.


        :param environment: The environment of this ErrorReportingConfig.
        :type environment: str
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment

    @property
    def send_pii(self):
        """Gets the send_pii of this ErrorReportingConfig.


        :return: The send_pii of this ErrorReportingConfig.
        :rtype: bool
        """
        return self._send_pii

    @send_pii.setter
    def send_pii(self, send_pii):
        """Sets the send_pii of this ErrorReportingConfig.


        :param send_pii: The send_pii of this ErrorReportingConfig.
        :type send_pii: bool
        """
        if send_pii is None:
            raise ValueError("Invalid value for `send_pii`, must not be `None`")

        self._send_pii = send_pii

    @property
    def traces_sample_rate(self):
        """Gets the traces_sample_rate of this ErrorReportingConfig.


        :return: The traces_sample_rate of this ErrorReportingConfig.
        :rtype: float
        """
        return self._traces_sample_rate

    @traces_sample_rate.setter
    def traces_sample_rate(self, traces_sample_rate):
        """Sets the traces_sample_rate of this ErrorReportingConfig.


        :param traces_sample_rate: The traces_sample_rate of this ErrorReportingConfig.
        :type traces_sample_rate: float
        """
        if traces_sample_rate is None:
            raise ValueError("Invalid value for `traces_sample_rate`, must not be `None`")

        self._traces_sample_rate = traces_sample_rate
