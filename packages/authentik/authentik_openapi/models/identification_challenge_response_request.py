# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class IdentificationChallengeResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: str='ak-stage-identification', uid_field: str=None, password: str=None):
        """IdentificationChallengeResponseRequest - a model defined in OpenAPI

        :param component: The component of this IdentificationChallengeResponseRequest.
        :param uid_field: The uid_field of this IdentificationChallengeResponseRequest.
        :param password: The password of this IdentificationChallengeResponseRequest.
        """
        self.openapi_types = {
            'component': str,
            'uid_field': str,
            'password': str
        }

        self.attribute_map = {
            'component': 'component',
            'uid_field': 'uid_field',
            'password': 'password'
        }

        self._component = component
        self._uid_field = uid_field
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentificationChallengeResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentificationChallengeResponseRequest of this IdentificationChallengeResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this IdentificationChallengeResponseRequest.


        :return: The component of this IdentificationChallengeResponseRequest.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this IdentificationChallengeResponseRequest.


        :param component: The component of this IdentificationChallengeResponseRequest.
        :type component: str
        """
        if component is not None and len(component) < 1:
            raise ValueError("Invalid value for `component`, length must be greater than or equal to `1`")

        self._component = component

    @property
    def uid_field(self):
        """Gets the uid_field of this IdentificationChallengeResponseRequest.


        :return: The uid_field of this IdentificationChallengeResponseRequest.
        :rtype: str
        """
        return self._uid_field

    @uid_field.setter
    def uid_field(self, uid_field):
        """Sets the uid_field of this IdentificationChallengeResponseRequest.


        :param uid_field: The uid_field of this IdentificationChallengeResponseRequest.
        :type uid_field: str
        """
        if uid_field is None:
            raise ValueError("Invalid value for `uid_field`, must not be `None`")
        if uid_field is not None and len(uid_field) < 1:
            raise ValueError("Invalid value for `uid_field`, length must be greater than or equal to `1`")

        self._uid_field = uid_field

    @property
    def password(self):
        """Gets the password of this IdentificationChallengeResponseRequest.


        :return: The password of this IdentificationChallengeResponseRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this IdentificationChallengeResponseRequest.


        :param password: The password of this IdentificationChallengeResponseRequest.
        :type password: str
        """

        self._password = password
