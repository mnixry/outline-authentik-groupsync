# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class AuthenticatorDuoStageDeviceImportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, error: str=None):
        """AuthenticatorDuoStageDeviceImportResponse - a model defined in OpenAPI

        :param count: The count of this AuthenticatorDuoStageDeviceImportResponse.
        :param error: The error of this AuthenticatorDuoStageDeviceImportResponse.
        """
        self.openapi_types = {
            'count': int,
            'error': str
        }

        self.attribute_map = {
            'count': 'count',
            'error': 'error'
        }

        self._count = count
        self._error = error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticatorDuoStageDeviceImportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticatorDuoStageDeviceImportResponse of this AuthenticatorDuoStageDeviceImportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this AuthenticatorDuoStageDeviceImportResponse.


        :return: The count of this AuthenticatorDuoStageDeviceImportResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AuthenticatorDuoStageDeviceImportResponse.


        :param count: The count of this AuthenticatorDuoStageDeviceImportResponse.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def error(self):
        """Gets the error of this AuthenticatorDuoStageDeviceImportResponse.


        :return: The error of this AuthenticatorDuoStageDeviceImportResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AuthenticatorDuoStageDeviceImportResponse.


        :param error: The error of this AuthenticatorDuoStageDeviceImportResponse.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error
