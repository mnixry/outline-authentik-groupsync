# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class DockerServiceConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, local: bool=None, url: str=None, tls_verification: str=None, tls_authentication: str=None):
        """DockerServiceConnectionRequest - a model defined in OpenAPI

        :param name: The name of this DockerServiceConnectionRequest.
        :param local: The local of this DockerServiceConnectionRequest.
        :param url: The url of this DockerServiceConnectionRequest.
        :param tls_verification: The tls_verification of this DockerServiceConnectionRequest.
        :param tls_authentication: The tls_authentication of this DockerServiceConnectionRequest.
        """
        self.openapi_types = {
            'name': str,
            'local': bool,
            'url': str,
            'tls_verification': str,
            'tls_authentication': str
        }

        self.attribute_map = {
            'name': 'name',
            'local': 'local',
            'url': 'url',
            'tls_verification': 'tls_verification',
            'tls_authentication': 'tls_authentication'
        }

        self._name = name
        self._local = local
        self._url = url
        self._tls_verification = tls_verification
        self._tls_authentication = tls_authentication

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DockerServiceConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DockerServiceConnectionRequest of this DockerServiceConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DockerServiceConnectionRequest.


        :return: The name of this DockerServiceConnectionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerServiceConnectionRequest.


        :param name: The name of this DockerServiceConnectionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def local(self):
        """Gets the local of this DockerServiceConnectionRequest.

        If enabled, use the local connection. Required Docker socket/Kubernetes Integration

        :return: The local of this DockerServiceConnectionRequest.
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this DockerServiceConnectionRequest.

        If enabled, use the local connection. Required Docker socket/Kubernetes Integration

        :param local: The local of this DockerServiceConnectionRequest.
        :type local: bool
        """

        self._local = local

    @property
    def url(self):
        """Gets the url of this DockerServiceConnectionRequest.

        Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system.

        :return: The url of this DockerServiceConnectionRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DockerServiceConnectionRequest.

        Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system.

        :param url: The url of this DockerServiceConnectionRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def tls_verification(self):
        """Gets the tls_verification of this DockerServiceConnectionRequest.

        CA which the endpoint's Certificate is verified against. Can be left empty for no validation.

        :return: The tls_verification of this DockerServiceConnectionRequest.
        :rtype: str
        """
        return self._tls_verification

    @tls_verification.setter
    def tls_verification(self, tls_verification):
        """Sets the tls_verification of this DockerServiceConnectionRequest.

        CA which the endpoint's Certificate is verified against. Can be left empty for no validation.

        :param tls_verification: The tls_verification of this DockerServiceConnectionRequest.
        :type tls_verification: str
        """

        self._tls_verification = tls_verification

    @property
    def tls_authentication(self):
        """Gets the tls_authentication of this DockerServiceConnectionRequest.

        Certificate/Key used for authentication. Can be left empty for no authentication.

        :return: The tls_authentication of this DockerServiceConnectionRequest.
        :rtype: str
        """
        return self._tls_authentication

    @tls_authentication.setter
    def tls_authentication(self, tls_authentication):
        """Sets the tls_authentication of this DockerServiceConnectionRequest.

        Certificate/Key used for authentication. Can be left empty for no authentication.

        :param tls_authentication: The tls_authentication of this DockerServiceConnectionRequest.
        :type tls_authentication: str
        """

        self._tls_authentication = tls_authentication
