# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class UserServiceAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, create_group: bool=False, expiring: bool=True, expires: datetime=None):
        """UserServiceAccountRequest - a model defined in OpenAPI

        :param name: The name of this UserServiceAccountRequest.
        :param create_group: The create_group of this UserServiceAccountRequest.
        :param expiring: The expiring of this UserServiceAccountRequest.
        :param expires: The expires of this UserServiceAccountRequest.
        """
        self.openapi_types = {
            'name': str,
            'create_group': bool,
            'expiring': bool,
            'expires': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'create_group': 'create_group',
            'expiring': 'expiring',
            'expires': 'expires'
        }

        self._name = name
        self._create_group = create_group
        self._expiring = expiring
        self._expires = expires

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserServiceAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserServiceAccountRequest of this UserServiceAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UserServiceAccountRequest.


        :return: The name of this UserServiceAccountRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserServiceAccountRequest.


        :param name: The name of this UserServiceAccountRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def create_group(self):
        """Gets the create_group of this UserServiceAccountRequest.


        :return: The create_group of this UserServiceAccountRequest.
        :rtype: bool
        """
        return self._create_group

    @create_group.setter
    def create_group(self, create_group):
        """Sets the create_group of this UserServiceAccountRequest.


        :param create_group: The create_group of this UserServiceAccountRequest.
        :type create_group: bool
        """

        self._create_group = create_group

    @property
    def expiring(self):
        """Gets the expiring of this UserServiceAccountRequest.


        :return: The expiring of this UserServiceAccountRequest.
        :rtype: bool
        """
        return self._expiring

    @expiring.setter
    def expiring(self, expiring):
        """Sets the expiring of this UserServiceAccountRequest.


        :param expiring: The expiring of this UserServiceAccountRequest.
        :type expiring: bool
        """

        self._expiring = expiring

    @property
    def expires(self):
        """Gets the expires of this UserServiceAccountRequest.

        If not provided, valid for 360 days

        :return: The expires of this UserServiceAccountRequest.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this UserServiceAccountRequest.

        If not provided, valid for 360 days

        :param expires: The expires of this UserServiceAccountRequest.
        :type expires: datetime
        """

        self._expires = expires
