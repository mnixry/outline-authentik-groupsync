# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class OutpostHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid: str=None, last_seen: datetime=None, version: str=None, golang_version: str=None, openssl_enabled: bool=None, openssl_version: str=None, fips_enabled: bool=None, version_should: str=None, version_outdated: bool=None, build_hash: str=None, build_hash_should: str=None, hostname: str=None):
        """OutpostHealth - a model defined in OpenAPI

        :param uid: The uid of this OutpostHealth.
        :param last_seen: The last_seen of this OutpostHealth.
        :param version: The version of this OutpostHealth.
        :param golang_version: The golang_version of this OutpostHealth.
        :param openssl_enabled: The openssl_enabled of this OutpostHealth.
        :param openssl_version: The openssl_version of this OutpostHealth.
        :param fips_enabled: The fips_enabled of this OutpostHealth.
        :param version_should: The version_should of this OutpostHealth.
        :param version_outdated: The version_outdated of this OutpostHealth.
        :param build_hash: The build_hash of this OutpostHealth.
        :param build_hash_should: The build_hash_should of this OutpostHealth.
        :param hostname: The hostname of this OutpostHealth.
        """
        self.openapi_types = {
            'uid': str,
            'last_seen': datetime,
            'version': str,
            'golang_version': str,
            'openssl_enabled': bool,
            'openssl_version': str,
            'fips_enabled': bool,
            'version_should': str,
            'version_outdated': bool,
            'build_hash': str,
            'build_hash_should': str,
            'hostname': str
        }

        self.attribute_map = {
            'uid': 'uid',
            'last_seen': 'last_seen',
            'version': 'version',
            'golang_version': 'golang_version',
            'openssl_enabled': 'openssl_enabled',
            'openssl_version': 'openssl_version',
            'fips_enabled': 'fips_enabled',
            'version_should': 'version_should',
            'version_outdated': 'version_outdated',
            'build_hash': 'build_hash',
            'build_hash_should': 'build_hash_should',
            'hostname': 'hostname'
        }

        self._uid = uid
        self._last_seen = last_seen
        self._version = version
        self._golang_version = golang_version
        self._openssl_enabled = openssl_enabled
        self._openssl_version = openssl_version
        self._fips_enabled = fips_enabled
        self._version_should = version_should
        self._version_outdated = version_outdated
        self._build_hash = build_hash
        self._build_hash_should = build_hash_should
        self._hostname = hostname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutpostHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutpostHealth of this OutpostHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self):
        """Gets the uid of this OutpostHealth.


        :return: The uid of this OutpostHealth.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OutpostHealth.


        :param uid: The uid of this OutpostHealth.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def last_seen(self):
        """Gets the last_seen of this OutpostHealth.


        :return: The last_seen of this OutpostHealth.
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this OutpostHealth.


        :param last_seen: The last_seen of this OutpostHealth.
        :type last_seen: datetime
        """
        if last_seen is None:
            raise ValueError("Invalid value for `last_seen`, must not be `None`")

        self._last_seen = last_seen

    @property
    def version(self):
        """Gets the version of this OutpostHealth.


        :return: The version of this OutpostHealth.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OutpostHealth.


        :param version: The version of this OutpostHealth.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def golang_version(self):
        """Gets the golang_version of this OutpostHealth.


        :return: The golang_version of this OutpostHealth.
        :rtype: str
        """
        return self._golang_version

    @golang_version.setter
    def golang_version(self, golang_version):
        """Sets the golang_version of this OutpostHealth.


        :param golang_version: The golang_version of this OutpostHealth.
        :type golang_version: str
        """
        if golang_version is None:
            raise ValueError("Invalid value for `golang_version`, must not be `None`")

        self._golang_version = golang_version

    @property
    def openssl_enabled(self):
        """Gets the openssl_enabled of this OutpostHealth.


        :return: The openssl_enabled of this OutpostHealth.
        :rtype: bool
        """
        return self._openssl_enabled

    @openssl_enabled.setter
    def openssl_enabled(self, openssl_enabled):
        """Sets the openssl_enabled of this OutpostHealth.


        :param openssl_enabled: The openssl_enabled of this OutpostHealth.
        :type openssl_enabled: bool
        """
        if openssl_enabled is None:
            raise ValueError("Invalid value for `openssl_enabled`, must not be `None`")

        self._openssl_enabled = openssl_enabled

    @property
    def openssl_version(self):
        """Gets the openssl_version of this OutpostHealth.


        :return: The openssl_version of this OutpostHealth.
        :rtype: str
        """
        return self._openssl_version

    @openssl_version.setter
    def openssl_version(self, openssl_version):
        """Sets the openssl_version of this OutpostHealth.


        :param openssl_version: The openssl_version of this OutpostHealth.
        :type openssl_version: str
        """
        if openssl_version is None:
            raise ValueError("Invalid value for `openssl_version`, must not be `None`")

        self._openssl_version = openssl_version

    @property
    def fips_enabled(self):
        """Gets the fips_enabled of this OutpostHealth.

        Get FIPS enabled

        :return: The fips_enabled of this OutpostHealth.
        :rtype: bool
        """
        return self._fips_enabled

    @fips_enabled.setter
    def fips_enabled(self, fips_enabled):
        """Sets the fips_enabled of this OutpostHealth.

        Get FIPS enabled

        :param fips_enabled: The fips_enabled of this OutpostHealth.
        :type fips_enabled: bool
        """
        if fips_enabled is None:
            raise ValueError("Invalid value for `fips_enabled`, must not be `None`")

        self._fips_enabled = fips_enabled

    @property
    def version_should(self):
        """Gets the version_should of this OutpostHealth.


        :return: The version_should of this OutpostHealth.
        :rtype: str
        """
        return self._version_should

    @version_should.setter
    def version_should(self, version_should):
        """Sets the version_should of this OutpostHealth.


        :param version_should: The version_should of this OutpostHealth.
        :type version_should: str
        """
        if version_should is None:
            raise ValueError("Invalid value for `version_should`, must not be `None`")

        self._version_should = version_should

    @property
    def version_outdated(self):
        """Gets the version_outdated of this OutpostHealth.


        :return: The version_outdated of this OutpostHealth.
        :rtype: bool
        """
        return self._version_outdated

    @version_outdated.setter
    def version_outdated(self, version_outdated):
        """Sets the version_outdated of this OutpostHealth.


        :param version_outdated: The version_outdated of this OutpostHealth.
        :type version_outdated: bool
        """
        if version_outdated is None:
            raise ValueError("Invalid value for `version_outdated`, must not be `None`")

        self._version_outdated = version_outdated

    @property
    def build_hash(self):
        """Gets the build_hash of this OutpostHealth.


        :return: The build_hash of this OutpostHealth.
        :rtype: str
        """
        return self._build_hash

    @build_hash.setter
    def build_hash(self, build_hash):
        """Sets the build_hash of this OutpostHealth.


        :param build_hash: The build_hash of this OutpostHealth.
        :type build_hash: str
        """
        if build_hash is None:
            raise ValueError("Invalid value for `build_hash`, must not be `None`")

        self._build_hash = build_hash

    @property
    def build_hash_should(self):
        """Gets the build_hash_should of this OutpostHealth.


        :return: The build_hash_should of this OutpostHealth.
        :rtype: str
        """
        return self._build_hash_should

    @build_hash_should.setter
    def build_hash_should(self, build_hash_should):
        """Sets the build_hash_should of this OutpostHealth.


        :param build_hash_should: The build_hash_should of this OutpostHealth.
        :type build_hash_should: str
        """
        if build_hash_should is None:
            raise ValueError("Invalid value for `build_hash_should`, must not be `None`")

        self._build_hash_should = build_hash_should

    @property
    def hostname(self):
        """Gets the hostname of this OutpostHealth.


        :return: The hostname of this OutpostHealth.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this OutpostHealth.


        :param hostname: The hostname of this OutpostHealth.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname
