# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_stage_binding import FlowStageBinding
from authentik_openapi import util


class FlowInspectorPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_stage: FlowStageBinding=None, next_planned_stage: FlowStageBinding=None, plan_context: Dict[str, object]=None, session_id: str=None):
        """FlowInspectorPlan - a model defined in OpenAPI

        :param current_stage: The current_stage of this FlowInspectorPlan.
        :param next_planned_stage: The next_planned_stage of this FlowInspectorPlan.
        :param plan_context: The plan_context of this FlowInspectorPlan.
        :param session_id: The session_id of this FlowInspectorPlan.
        """
        self.openapi_types = {
            'current_stage': FlowStageBinding,
            'next_planned_stage': FlowStageBinding,
            'plan_context': Dict[str, object],
            'session_id': str
        }

        self.attribute_map = {
            'current_stage': 'current_stage',
            'next_planned_stage': 'next_planned_stage',
            'plan_context': 'plan_context',
            'session_id': 'session_id'
        }

        self._current_stage = current_stage
        self._next_planned_stage = next_planned_stage
        self._plan_context = plan_context
        self._session_id = session_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowInspectorPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowInspectorPlan of this FlowInspectorPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_stage(self):
        """Gets the current_stage of this FlowInspectorPlan.


        :return: The current_stage of this FlowInspectorPlan.
        :rtype: FlowStageBinding
        """
        return self._current_stage

    @current_stage.setter
    def current_stage(self, current_stage):
        """Sets the current_stage of this FlowInspectorPlan.


        :param current_stage: The current_stage of this FlowInspectorPlan.
        :type current_stage: FlowStageBinding
        """
        if current_stage is None:
            raise ValueError("Invalid value for `current_stage`, must not be `None`")

        self._current_stage = current_stage

    @property
    def next_planned_stage(self):
        """Gets the next_planned_stage of this FlowInspectorPlan.


        :return: The next_planned_stage of this FlowInspectorPlan.
        :rtype: FlowStageBinding
        """
        return self._next_planned_stage

    @next_planned_stage.setter
    def next_planned_stage(self, next_planned_stage):
        """Sets the next_planned_stage of this FlowInspectorPlan.


        :param next_planned_stage: The next_planned_stage of this FlowInspectorPlan.
        :type next_planned_stage: FlowStageBinding
        """
        if next_planned_stage is None:
            raise ValueError("Invalid value for `next_planned_stage`, must not be `None`")

        self._next_planned_stage = next_planned_stage

    @property
    def plan_context(self):
        """Gets the plan_context of this FlowInspectorPlan.

        Get the plan's context, sanitized

        :return: The plan_context of this FlowInspectorPlan.
        :rtype: Dict[str, object]
        """
        return self._plan_context

    @plan_context.setter
    def plan_context(self, plan_context):
        """Sets the plan_context of this FlowInspectorPlan.

        Get the plan's context, sanitized

        :param plan_context: The plan_context of this FlowInspectorPlan.
        :type plan_context: Dict[str, object]
        """
        if plan_context is None:
            raise ValueError("Invalid value for `plan_context`, must not be `None`")

        self._plan_context = plan_context

    @property
    def session_id(self):
        """Gets the session_id of this FlowInspectorPlan.

        Get a unique session ID

        :return: The session_id of this FlowInspectorPlan.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this FlowInspectorPlan.

        Get a unique session ID

        :param session_id: The session_id of this FlowInspectorPlan.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")

        self._session_id = session_id
