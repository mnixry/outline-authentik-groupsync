# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.client_type_enum import ClientTypeEnum
from authentik_openapi.models.digest_algorithm_enum import DigestAlgorithmEnum
from authentik_openapi.models.google_workspace_provider_request import GoogleWorkspaceProviderRequest
from authentik_openapi.models.issuer_mode_enum import IssuerModeEnum
from authentik_openapi.models.ldapapi_access_mode import LDAPAPIAccessMode
from authentik_openapi.models.ldap_provider_request import LDAPProviderRequest
from authentik_openapi.models.microsoft_entra_provider_request import MicrosoftEntraProviderRequest
from authentik_openapi.models.o_auth2_provider_request import OAuth2ProviderRequest
from authentik_openapi.models.outgoing_sync_delete_action import OutgoingSyncDeleteAction
from authentik_openapi.models.proxy_mode import ProxyMode
from authentik_openapi.models.proxy_provider_request import ProxyProviderRequest
from authentik_openapi.models.rac_provider_request import RACProviderRequest
from authentik_openapi.models.radius_provider_request import RadiusProviderRequest
from authentik_openapi.models.saml_provider_request import SAMLProviderRequest
from authentik_openapi.models.scim_provider_request import SCIMProviderRequest
from authentik_openapi.models.signature_algorithm_enum import SignatureAlgorithmEnum
from authentik_openapi.models.sp_binding_enum import SpBindingEnum
from authentik_openapi.models.sub_mode_enum import SubModeEnum
from authentik_openapi import util


class ModelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, property_mappings: List[str]=None, property_mappings_group: List[str]=None, delegated_subject: str=None, credentials: object=None, scopes: str=None, exclude_users_service_account: bool=None, filter_group: str=None, user_delete_action: OutgoingSyncDeleteAction=None, group_delete_action: OutgoingSyncDeleteAction=None, default_group_email_domain: str=None, authentication_flow: str=None, authorization_flow: str=None, base_dn: str=None, certificate: str=None, tls_server_name: str=None, uid_start_number: int=None, gid_start_number: int=None, search_mode: LDAPAPIAccessMode=None, bind_mode: LDAPAPIAccessMode=None, mfa_support: bool=None, client_id: str=None, client_secret: str=None, tenant_id: str=None, client_type: ClientTypeEnum=None, access_code_validity: str=None, access_token_validity: str=None, refresh_token_validity: str=None, include_claims_in_id_token: bool=None, signing_key: str=None, redirect_uris: str=None, sub_mode: SubModeEnum=None, issuer_mode: IssuerModeEnum=None, jwks_sources: List[str]=None, internal_host: str=None, external_host: str=None, internal_host_ssl_validation: bool=None, skip_path_regex: str=None, basic_auth_enabled: bool=None, basic_auth_password_attribute: str=None, basic_auth_user_attribute: str=None, mode: ProxyMode=None, intercept_header_auth: bool=None, cookie_domain: str=None, settings: object=None, connection_expiry: str=None, delete_token_on_disconnect: bool=None, client_networks: str=None, shared_secret: str=None, acs_url: str=None, audience: str=None, issuer: str=None, assertion_valid_not_before: str=None, assertion_valid_not_on_or_after: str=None, session_valid_not_on_or_after: str=None, name_id_mapping: str=None, digest_algorithm: DigestAlgorithmEnum=None, signature_algorithm: SignatureAlgorithmEnum=None, signing_kp: str=None, verification_kp: str=None, encryption_kp: str=None, sign_assertion: bool=None, sign_response: bool=None, sp_binding: SpBindingEnum=None, default_relay_state: str=None, url: str=None, token: str=None):
        """ModelRequest - a model defined in OpenAPI

        :param name: The name of this ModelRequest.
        :param property_mappings: The property_mappings of this ModelRequest.
        :param property_mappings_group: The property_mappings_group of this ModelRequest.
        :param delegated_subject: The delegated_subject of this ModelRequest.
        :param credentials: The credentials of this ModelRequest.
        :param scopes: The scopes of this ModelRequest.
        :param exclude_users_service_account: The exclude_users_service_account of this ModelRequest.
        :param filter_group: The filter_group of this ModelRequest.
        :param user_delete_action: The user_delete_action of this ModelRequest.
        :param group_delete_action: The group_delete_action of this ModelRequest.
        :param default_group_email_domain: The default_group_email_domain of this ModelRequest.
        :param authentication_flow: The authentication_flow of this ModelRequest.
        :param authorization_flow: The authorization_flow of this ModelRequest.
        :param base_dn: The base_dn of this ModelRequest.
        :param certificate: The certificate of this ModelRequest.
        :param tls_server_name: The tls_server_name of this ModelRequest.
        :param uid_start_number: The uid_start_number of this ModelRequest.
        :param gid_start_number: The gid_start_number of this ModelRequest.
        :param search_mode: The search_mode of this ModelRequest.
        :param bind_mode: The bind_mode of this ModelRequest.
        :param mfa_support: The mfa_support of this ModelRequest.
        :param client_id: The client_id of this ModelRequest.
        :param client_secret: The client_secret of this ModelRequest.
        :param tenant_id: The tenant_id of this ModelRequest.
        :param client_type: The client_type of this ModelRequest.
        :param access_code_validity: The access_code_validity of this ModelRequest.
        :param access_token_validity: The access_token_validity of this ModelRequest.
        :param refresh_token_validity: The refresh_token_validity of this ModelRequest.
        :param include_claims_in_id_token: The include_claims_in_id_token of this ModelRequest.
        :param signing_key: The signing_key of this ModelRequest.
        :param redirect_uris: The redirect_uris of this ModelRequest.
        :param sub_mode: The sub_mode of this ModelRequest.
        :param issuer_mode: The issuer_mode of this ModelRequest.
        :param jwks_sources: The jwks_sources of this ModelRequest.
        :param internal_host: The internal_host of this ModelRequest.
        :param external_host: The external_host of this ModelRequest.
        :param internal_host_ssl_validation: The internal_host_ssl_validation of this ModelRequest.
        :param skip_path_regex: The skip_path_regex of this ModelRequest.
        :param basic_auth_enabled: The basic_auth_enabled of this ModelRequest.
        :param basic_auth_password_attribute: The basic_auth_password_attribute of this ModelRequest.
        :param basic_auth_user_attribute: The basic_auth_user_attribute of this ModelRequest.
        :param mode: The mode of this ModelRequest.
        :param intercept_header_auth: The intercept_header_auth of this ModelRequest.
        :param cookie_domain: The cookie_domain of this ModelRequest.
        :param settings: The settings of this ModelRequest.
        :param connection_expiry: The connection_expiry of this ModelRequest.
        :param delete_token_on_disconnect: The delete_token_on_disconnect of this ModelRequest.
        :param client_networks: The client_networks of this ModelRequest.
        :param shared_secret: The shared_secret of this ModelRequest.
        :param acs_url: The acs_url of this ModelRequest.
        :param audience: The audience of this ModelRequest.
        :param issuer: The issuer of this ModelRequest.
        :param assertion_valid_not_before: The assertion_valid_not_before of this ModelRequest.
        :param assertion_valid_not_on_or_after: The assertion_valid_not_on_or_after of this ModelRequest.
        :param session_valid_not_on_or_after: The session_valid_not_on_or_after of this ModelRequest.
        :param name_id_mapping: The name_id_mapping of this ModelRequest.
        :param digest_algorithm: The digest_algorithm of this ModelRequest.
        :param signature_algorithm: The signature_algorithm of this ModelRequest.
        :param signing_kp: The signing_kp of this ModelRequest.
        :param verification_kp: The verification_kp of this ModelRequest.
        :param encryption_kp: The encryption_kp of this ModelRequest.
        :param sign_assertion: The sign_assertion of this ModelRequest.
        :param sign_response: The sign_response of this ModelRequest.
        :param sp_binding: The sp_binding of this ModelRequest.
        :param default_relay_state: The default_relay_state of this ModelRequest.
        :param url: The url of this ModelRequest.
        :param token: The token of this ModelRequest.
        """
        self.openapi_types = {
            'name': str,
            'property_mappings': List[str],
            'property_mappings_group': List[str],
            'delegated_subject': str,
            'credentials': object,
            'scopes': str,
            'exclude_users_service_account': bool,
            'filter_group': str,
            'user_delete_action': OutgoingSyncDeleteAction,
            'group_delete_action': OutgoingSyncDeleteAction,
            'default_group_email_domain': str,
            'authentication_flow': str,
            'authorization_flow': str,
            'base_dn': str,
            'certificate': str,
            'tls_server_name': str,
            'uid_start_number': int,
            'gid_start_number': int,
            'search_mode': LDAPAPIAccessMode,
            'bind_mode': LDAPAPIAccessMode,
            'mfa_support': bool,
            'client_id': str,
            'client_secret': str,
            'tenant_id': str,
            'client_type': ClientTypeEnum,
            'access_code_validity': str,
            'access_token_validity': str,
            'refresh_token_validity': str,
            'include_claims_in_id_token': bool,
            'signing_key': str,
            'redirect_uris': str,
            'sub_mode': SubModeEnum,
            'issuer_mode': IssuerModeEnum,
            'jwks_sources': List[str],
            'internal_host': str,
            'external_host': str,
            'internal_host_ssl_validation': bool,
            'skip_path_regex': str,
            'basic_auth_enabled': bool,
            'basic_auth_password_attribute': str,
            'basic_auth_user_attribute': str,
            'mode': ProxyMode,
            'intercept_header_auth': bool,
            'cookie_domain': str,
            'settings': object,
            'connection_expiry': str,
            'delete_token_on_disconnect': bool,
            'client_networks': str,
            'shared_secret': str,
            'acs_url': str,
            'audience': str,
            'issuer': str,
            'assertion_valid_not_before': str,
            'assertion_valid_not_on_or_after': str,
            'session_valid_not_on_or_after': str,
            'name_id_mapping': str,
            'digest_algorithm': DigestAlgorithmEnum,
            'signature_algorithm': SignatureAlgorithmEnum,
            'signing_kp': str,
            'verification_kp': str,
            'encryption_kp': str,
            'sign_assertion': bool,
            'sign_response': bool,
            'sp_binding': SpBindingEnum,
            'default_relay_state': str,
            'url': str,
            'token': str
        }

        self.attribute_map = {
            'name': 'name',
            'property_mappings': 'property_mappings',
            'property_mappings_group': 'property_mappings_group',
            'delegated_subject': 'delegated_subject',
            'credentials': 'credentials',
            'scopes': 'scopes',
            'exclude_users_service_account': 'exclude_users_service_account',
            'filter_group': 'filter_group',
            'user_delete_action': 'user_delete_action',
            'group_delete_action': 'group_delete_action',
            'default_group_email_domain': 'default_group_email_domain',
            'authentication_flow': 'authentication_flow',
            'authorization_flow': 'authorization_flow',
            'base_dn': 'base_dn',
            'certificate': 'certificate',
            'tls_server_name': 'tls_server_name',
            'uid_start_number': 'uid_start_number',
            'gid_start_number': 'gid_start_number',
            'search_mode': 'search_mode',
            'bind_mode': 'bind_mode',
            'mfa_support': 'mfa_support',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'tenant_id': 'tenant_id',
            'client_type': 'client_type',
            'access_code_validity': 'access_code_validity',
            'access_token_validity': 'access_token_validity',
            'refresh_token_validity': 'refresh_token_validity',
            'include_claims_in_id_token': 'include_claims_in_id_token',
            'signing_key': 'signing_key',
            'redirect_uris': 'redirect_uris',
            'sub_mode': 'sub_mode',
            'issuer_mode': 'issuer_mode',
            'jwks_sources': 'jwks_sources',
            'internal_host': 'internal_host',
            'external_host': 'external_host',
            'internal_host_ssl_validation': 'internal_host_ssl_validation',
            'skip_path_regex': 'skip_path_regex',
            'basic_auth_enabled': 'basic_auth_enabled',
            'basic_auth_password_attribute': 'basic_auth_password_attribute',
            'basic_auth_user_attribute': 'basic_auth_user_attribute',
            'mode': 'mode',
            'intercept_header_auth': 'intercept_header_auth',
            'cookie_domain': 'cookie_domain',
            'settings': 'settings',
            'connection_expiry': 'connection_expiry',
            'delete_token_on_disconnect': 'delete_token_on_disconnect',
            'client_networks': 'client_networks',
            'shared_secret': 'shared_secret',
            'acs_url': 'acs_url',
            'audience': 'audience',
            'issuer': 'issuer',
            'assertion_valid_not_before': 'assertion_valid_not_before',
            'assertion_valid_not_on_or_after': 'assertion_valid_not_on_or_after',
            'session_valid_not_on_or_after': 'session_valid_not_on_or_after',
            'name_id_mapping': 'name_id_mapping',
            'digest_algorithm': 'digest_algorithm',
            'signature_algorithm': 'signature_algorithm',
            'signing_kp': 'signing_kp',
            'verification_kp': 'verification_kp',
            'encryption_kp': 'encryption_kp',
            'sign_assertion': 'sign_assertion',
            'sign_response': 'sign_response',
            'sp_binding': 'sp_binding',
            'default_relay_state': 'default_relay_state',
            'url': 'url',
            'token': 'token'
        }

        self._name = name
        self._property_mappings = property_mappings
        self._property_mappings_group = property_mappings_group
        self._delegated_subject = delegated_subject
        self._credentials = credentials
        self._scopes = scopes
        self._exclude_users_service_account = exclude_users_service_account
        self._filter_group = filter_group
        self._user_delete_action = user_delete_action
        self._group_delete_action = group_delete_action
        self._default_group_email_domain = default_group_email_domain
        self._authentication_flow = authentication_flow
        self._authorization_flow = authorization_flow
        self._base_dn = base_dn
        self._certificate = certificate
        self._tls_server_name = tls_server_name
        self._uid_start_number = uid_start_number
        self._gid_start_number = gid_start_number
        self._search_mode = search_mode
        self._bind_mode = bind_mode
        self._mfa_support = mfa_support
        self._client_id = client_id
        self._client_secret = client_secret
        self._tenant_id = tenant_id
        self._client_type = client_type
        self._access_code_validity = access_code_validity
        self._access_token_validity = access_token_validity
        self._refresh_token_validity = refresh_token_validity
        self._include_claims_in_id_token = include_claims_in_id_token
        self._signing_key = signing_key
        self._redirect_uris = redirect_uris
        self._sub_mode = sub_mode
        self._issuer_mode = issuer_mode
        self._jwks_sources = jwks_sources
        self._internal_host = internal_host
        self._external_host = external_host
        self._internal_host_ssl_validation = internal_host_ssl_validation
        self._skip_path_regex = skip_path_regex
        self._basic_auth_enabled = basic_auth_enabled
        self._basic_auth_password_attribute = basic_auth_password_attribute
        self._basic_auth_user_attribute = basic_auth_user_attribute
        self._mode = mode
        self._intercept_header_auth = intercept_header_auth
        self._cookie_domain = cookie_domain
        self._settings = settings
        self._connection_expiry = connection_expiry
        self._delete_token_on_disconnect = delete_token_on_disconnect
        self._client_networks = client_networks
        self._shared_secret = shared_secret
        self._acs_url = acs_url
        self._audience = audience
        self._issuer = issuer
        self._assertion_valid_not_before = assertion_valid_not_before
        self._assertion_valid_not_on_or_after = assertion_valid_not_on_or_after
        self._session_valid_not_on_or_after = session_valid_not_on_or_after
        self._name_id_mapping = name_id_mapping
        self._digest_algorithm = digest_algorithm
        self._signature_algorithm = signature_algorithm
        self._signing_kp = signing_kp
        self._verification_kp = verification_kp
        self._encryption_kp = encryption_kp
        self._sign_assertion = sign_assertion
        self._sign_response = sign_response
        self._sp_binding = sp_binding
        self._default_relay_state = default_relay_state
        self._url = url
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The modelRequest of this ModelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ModelRequest.


        :return: The name of this ModelRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelRequest.


        :param name: The name of this ModelRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def property_mappings(self):
        """Gets the property_mappings of this ModelRequest.


        :return: The property_mappings of this ModelRequest.
        :rtype: List[str]
        """
        return self._property_mappings

    @property_mappings.setter
    def property_mappings(self, property_mappings):
        """Sets the property_mappings of this ModelRequest.


        :param property_mappings: The property_mappings of this ModelRequest.
        :type property_mappings: List[str]
        """

        self._property_mappings = property_mappings

    @property
    def property_mappings_group(self):
        """Gets the property_mappings_group of this ModelRequest.

        Property mappings used for group creation/updating.

        :return: The property_mappings_group of this ModelRequest.
        :rtype: List[str]
        """
        return self._property_mappings_group

    @property_mappings_group.setter
    def property_mappings_group(self, property_mappings_group):
        """Sets the property_mappings_group of this ModelRequest.

        Property mappings used for group creation/updating.

        :param property_mappings_group: The property_mappings_group of this ModelRequest.
        :type property_mappings_group: List[str]
        """

        self._property_mappings_group = property_mappings_group

    @property
    def delegated_subject(self):
        """Gets the delegated_subject of this ModelRequest.


        :return: The delegated_subject of this ModelRequest.
        :rtype: str
        """
        return self._delegated_subject

    @delegated_subject.setter
    def delegated_subject(self, delegated_subject):
        """Sets the delegated_subject of this ModelRequest.


        :param delegated_subject: The delegated_subject of this ModelRequest.
        :type delegated_subject: str
        """
        if delegated_subject is None:
            raise ValueError("Invalid value for `delegated_subject`, must not be `None`")
        if delegated_subject is not None and len(delegated_subject) > 254:
            raise ValueError("Invalid value for `delegated_subject`, length must be less than or equal to `254`")
        if delegated_subject is not None and len(delegated_subject) < 1:
            raise ValueError("Invalid value for `delegated_subject`, length must be greater than or equal to `1`")

        self._delegated_subject = delegated_subject

    @property
    def credentials(self):
        """Gets the credentials of this ModelRequest.


        :return: The credentials of this ModelRequest.
        :rtype: object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this ModelRequest.


        :param credentials: The credentials of this ModelRequest.
        :type credentials: object
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")

        self._credentials = credentials

    @property
    def scopes(self):
        """Gets the scopes of this ModelRequest.


        :return: The scopes of this ModelRequest.
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ModelRequest.


        :param scopes: The scopes of this ModelRequest.
        :type scopes: str
        """
        if scopes is not None and len(scopes) < 1:
            raise ValueError("Invalid value for `scopes`, length must be greater than or equal to `1`")

        self._scopes = scopes

    @property
    def exclude_users_service_account(self):
        """Gets the exclude_users_service_account of this ModelRequest.


        :return: The exclude_users_service_account of this ModelRequest.
        :rtype: bool
        """
        return self._exclude_users_service_account

    @exclude_users_service_account.setter
    def exclude_users_service_account(self, exclude_users_service_account):
        """Sets the exclude_users_service_account of this ModelRequest.


        :param exclude_users_service_account: The exclude_users_service_account of this ModelRequest.
        :type exclude_users_service_account: bool
        """

        self._exclude_users_service_account = exclude_users_service_account

    @property
    def filter_group(self):
        """Gets the filter_group of this ModelRequest.


        :return: The filter_group of this ModelRequest.
        :rtype: str
        """
        return self._filter_group

    @filter_group.setter
    def filter_group(self, filter_group):
        """Sets the filter_group of this ModelRequest.


        :param filter_group: The filter_group of this ModelRequest.
        :type filter_group: str
        """

        self._filter_group = filter_group

    @property
    def user_delete_action(self):
        """Gets the user_delete_action of this ModelRequest.


        :return: The user_delete_action of this ModelRequest.
        :rtype: OutgoingSyncDeleteAction
        """
        return self._user_delete_action

    @user_delete_action.setter
    def user_delete_action(self, user_delete_action):
        """Sets the user_delete_action of this ModelRequest.


        :param user_delete_action: The user_delete_action of this ModelRequest.
        :type user_delete_action: OutgoingSyncDeleteAction
        """

        self._user_delete_action = user_delete_action

    @property
    def group_delete_action(self):
        """Gets the group_delete_action of this ModelRequest.


        :return: The group_delete_action of this ModelRequest.
        :rtype: OutgoingSyncDeleteAction
        """
        return self._group_delete_action

    @group_delete_action.setter
    def group_delete_action(self, group_delete_action):
        """Sets the group_delete_action of this ModelRequest.


        :param group_delete_action: The group_delete_action of this ModelRequest.
        :type group_delete_action: OutgoingSyncDeleteAction
        """

        self._group_delete_action = group_delete_action

    @property
    def default_group_email_domain(self):
        """Gets the default_group_email_domain of this ModelRequest.


        :return: The default_group_email_domain of this ModelRequest.
        :rtype: str
        """
        return self._default_group_email_domain

    @default_group_email_domain.setter
    def default_group_email_domain(self, default_group_email_domain):
        """Sets the default_group_email_domain of this ModelRequest.


        :param default_group_email_domain: The default_group_email_domain of this ModelRequest.
        :type default_group_email_domain: str
        """
        if default_group_email_domain is None:
            raise ValueError("Invalid value for `default_group_email_domain`, must not be `None`")
        if default_group_email_domain is not None and len(default_group_email_domain) < 1:
            raise ValueError("Invalid value for `default_group_email_domain`, length must be greater than or equal to `1`")

        self._default_group_email_domain = default_group_email_domain

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this ModelRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :return: The authentication_flow of this ModelRequest.
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this ModelRequest.

        Flow used for authentication when the associated application is accessed by an un-authenticated user.

        :param authentication_flow: The authentication_flow of this ModelRequest.
        :type authentication_flow: str
        """

        self._authentication_flow = authentication_flow

    @property
    def authorization_flow(self):
        """Gets the authorization_flow of this ModelRequest.

        Flow used when authorizing this provider.

        :return: The authorization_flow of this ModelRequest.
        :rtype: str
        """
        return self._authorization_flow

    @authorization_flow.setter
    def authorization_flow(self, authorization_flow):
        """Sets the authorization_flow of this ModelRequest.

        Flow used when authorizing this provider.

        :param authorization_flow: The authorization_flow of this ModelRequest.
        :type authorization_flow: str
        """
        if authorization_flow is None:
            raise ValueError("Invalid value for `authorization_flow`, must not be `None`")

        self._authorization_flow = authorization_flow

    @property
    def base_dn(self):
        """Gets the base_dn of this ModelRequest.

        DN under which objects are accessible.

        :return: The base_dn of this ModelRequest.
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this ModelRequest.

        DN under which objects are accessible.

        :param base_dn: The base_dn of this ModelRequest.
        :type base_dn: str
        """
        if base_dn is not None and len(base_dn) < 1:
            raise ValueError("Invalid value for `base_dn`, length must be greater than or equal to `1`")

        self._base_dn = base_dn

    @property
    def certificate(self):
        """Gets the certificate of this ModelRequest.


        :return: The certificate of this ModelRequest.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ModelRequest.


        :param certificate: The certificate of this ModelRequest.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def tls_server_name(self):
        """Gets the tls_server_name of this ModelRequest.


        :return: The tls_server_name of this ModelRequest.
        :rtype: str
        """
        return self._tls_server_name

    @tls_server_name.setter
    def tls_server_name(self, tls_server_name):
        """Sets the tls_server_name of this ModelRequest.


        :param tls_server_name: The tls_server_name of this ModelRequest.
        :type tls_server_name: str
        """

        self._tls_server_name = tls_server_name

    @property
    def uid_start_number(self):
        """Gets the uid_start_number of this ModelRequest.

        The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber

        :return: The uid_start_number of this ModelRequest.
        :rtype: int
        """
        return self._uid_start_number

    @uid_start_number.setter
    def uid_start_number(self, uid_start_number):
        """Sets the uid_start_number of this ModelRequest.

        The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren't too low for POSIX users. Default is 2000 to ensure that we don't collide with local users uidNumber

        :param uid_start_number: The uid_start_number of this ModelRequest.
        :type uid_start_number: int
        """
        if uid_start_number is not None and uid_start_number > 2147483647:
            raise ValueError("Invalid value for `uid_start_number`, must be a value less than or equal to `2147483647`")
        if uid_start_number is not None and uid_start_number < -2147483648:
            raise ValueError("Invalid value for `uid_start_number`, must be a value greater than or equal to `-2147483648`")

        self._uid_start_number = uid_start_number

    @property
    def gid_start_number(self):
        """Gets the gid_start_number of this ModelRequest.

        The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber

        :return: The gid_start_number of this ModelRequest.
        :rtype: int
        """
        return self._gid_start_number

    @gid_start_number.setter
    def gid_start_number(self, gid_start_number):
        """Sets the gid_start_number of this ModelRequest.

        The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren't too low for POSIX groups. Default is 4000 to ensure that we don't collide with local groups or users primary groups gidNumber

        :param gid_start_number: The gid_start_number of this ModelRequest.
        :type gid_start_number: int
        """
        if gid_start_number is not None and gid_start_number > 2147483647:
            raise ValueError("Invalid value for `gid_start_number`, must be a value less than or equal to `2147483647`")
        if gid_start_number is not None and gid_start_number < -2147483648:
            raise ValueError("Invalid value for `gid_start_number`, must be a value greater than or equal to `-2147483648`")

        self._gid_start_number = gid_start_number

    @property
    def search_mode(self):
        """Gets the search_mode of this ModelRequest.


        :return: The search_mode of this ModelRequest.
        :rtype: LDAPAPIAccessMode
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this ModelRequest.


        :param search_mode: The search_mode of this ModelRequest.
        :type search_mode: LDAPAPIAccessMode
        """

        self._search_mode = search_mode

    @property
    def bind_mode(self):
        """Gets the bind_mode of this ModelRequest.


        :return: The bind_mode of this ModelRequest.
        :rtype: LDAPAPIAccessMode
        """
        return self._bind_mode

    @bind_mode.setter
    def bind_mode(self, bind_mode):
        """Sets the bind_mode of this ModelRequest.


        :param bind_mode: The bind_mode of this ModelRequest.
        :type bind_mode: LDAPAPIAccessMode
        """

        self._bind_mode = bind_mode

    @property
    def mfa_support(self):
        """Gets the mfa_support of this ModelRequest.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :return: The mfa_support of this ModelRequest.
        :rtype: bool
        """
        return self._mfa_support

    @mfa_support.setter
    def mfa_support(self, mfa_support):
        """Sets the mfa_support of this ModelRequest.

        When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.

        :param mfa_support: The mfa_support of this ModelRequest.
        :type mfa_support: bool
        """

        self._mfa_support = mfa_support

    @property
    def client_id(self):
        """Gets the client_id of this ModelRequest.


        :return: The client_id of this ModelRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ModelRequest.


        :param client_id: The client_id of this ModelRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) > 255:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `255`")
        if client_id is not None and len(client_id) < 1:
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ModelRequest.


        :return: The client_secret of this ModelRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ModelRequest.


        :param client_secret: The client_secret of this ModelRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")
        if client_secret is not None and len(client_secret) > 255:
            raise ValueError("Invalid value for `client_secret`, length must be less than or equal to `255`")

        self._client_secret = client_secret

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ModelRequest.


        :return: The tenant_id of this ModelRequest.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ModelRequest.


        :param tenant_id: The tenant_id of this ModelRequest.
        :type tenant_id: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")
        if tenant_id is not None and len(tenant_id) < 1:
            raise ValueError("Invalid value for `tenant_id`, length must be greater than or equal to `1`")

        self._tenant_id = tenant_id

    @property
    def client_type(self):
        """Gets the client_type of this ModelRequest.

        Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable

        :return: The client_type of this ModelRequest.
        :rtype: ClientTypeEnum
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this ModelRequest.

        Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable

        :param client_type: The client_type of this ModelRequest.
        :type client_type: ClientTypeEnum
        """

        self._client_type = client_type

    @property
    def access_code_validity(self):
        """Gets the access_code_validity of this ModelRequest.

        Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The access_code_validity of this ModelRequest.
        :rtype: str
        """
        return self._access_code_validity

    @access_code_validity.setter
    def access_code_validity(self, access_code_validity):
        """Sets the access_code_validity of this ModelRequest.

        Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param access_code_validity: The access_code_validity of this ModelRequest.
        :type access_code_validity: str
        """
        if access_code_validity is not None and len(access_code_validity) < 1:
            raise ValueError("Invalid value for `access_code_validity`, length must be greater than or equal to `1`")

        self._access_code_validity = access_code_validity

    @property
    def access_token_validity(self):
        """Gets the access_token_validity of this ModelRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The access_token_validity of this ModelRequest.
        :rtype: str
        """
        return self._access_token_validity

    @access_token_validity.setter
    def access_token_validity(self, access_token_validity):
        """Sets the access_token_validity of this ModelRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param access_token_validity: The access_token_validity of this ModelRequest.
        :type access_token_validity: str
        """
        if access_token_validity is not None and len(access_token_validity) < 1:
            raise ValueError("Invalid value for `access_token_validity`, length must be greater than or equal to `1`")

        self._access_token_validity = access_token_validity

    @property
    def refresh_token_validity(self):
        """Gets the refresh_token_validity of this ModelRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The refresh_token_validity of this ModelRequest.
        :rtype: str
        """
        return self._refresh_token_validity

    @refresh_token_validity.setter
    def refresh_token_validity(self, refresh_token_validity):
        """Sets the refresh_token_validity of this ModelRequest.

        Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param refresh_token_validity: The refresh_token_validity of this ModelRequest.
        :type refresh_token_validity: str
        """
        if refresh_token_validity is not None and len(refresh_token_validity) < 1:
            raise ValueError("Invalid value for `refresh_token_validity`, length must be greater than or equal to `1`")

        self._refresh_token_validity = refresh_token_validity

    @property
    def include_claims_in_id_token(self):
        """Gets the include_claims_in_id_token of this ModelRequest.

        Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.

        :return: The include_claims_in_id_token of this ModelRequest.
        :rtype: bool
        """
        return self._include_claims_in_id_token

    @include_claims_in_id_token.setter
    def include_claims_in_id_token(self, include_claims_in_id_token):
        """Sets the include_claims_in_id_token of this ModelRequest.

        Include User claims from scopes in the id_token, for applications that don't access the userinfo endpoint.

        :param include_claims_in_id_token: The include_claims_in_id_token of this ModelRequest.
        :type include_claims_in_id_token: bool
        """

        self._include_claims_in_id_token = include_claims_in_id_token

    @property
    def signing_key(self):
        """Gets the signing_key of this ModelRequest.

        Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.

        :return: The signing_key of this ModelRequest.
        :rtype: str
        """
        return self._signing_key

    @signing_key.setter
    def signing_key(self, signing_key):
        """Sets the signing_key of this ModelRequest.

        Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.

        :param signing_key: The signing_key of this ModelRequest.
        :type signing_key: str
        """

        self._signing_key = signing_key

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this ModelRequest.

        Enter each URI on a new line.

        :return: The redirect_uris of this ModelRequest.
        :rtype: str
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this ModelRequest.

        Enter each URI on a new line.

        :param redirect_uris: The redirect_uris of this ModelRequest.
        :type redirect_uris: str
        """

        self._redirect_uris = redirect_uris

    @property
    def sub_mode(self):
        """Gets the sub_mode of this ModelRequest.

        Configure what data should be used as unique User Identifier. For most cases, the default should be fine.

        :return: The sub_mode of this ModelRequest.
        :rtype: SubModeEnum
        """
        return self._sub_mode

    @sub_mode.setter
    def sub_mode(self, sub_mode):
        """Sets the sub_mode of this ModelRequest.

        Configure what data should be used as unique User Identifier. For most cases, the default should be fine.

        :param sub_mode: The sub_mode of this ModelRequest.
        :type sub_mode: SubModeEnum
        """

        self._sub_mode = sub_mode

    @property
    def issuer_mode(self):
        """Gets the issuer_mode of this ModelRequest.

        Configure how the issuer field of the ID Token should be filled.

        :return: The issuer_mode of this ModelRequest.
        :rtype: IssuerModeEnum
        """
        return self._issuer_mode

    @issuer_mode.setter
    def issuer_mode(self, issuer_mode):
        """Sets the issuer_mode of this ModelRequest.

        Configure how the issuer field of the ID Token should be filled.

        :param issuer_mode: The issuer_mode of this ModelRequest.
        :type issuer_mode: IssuerModeEnum
        """

        self._issuer_mode = issuer_mode

    @property
    def jwks_sources(self):
        """Gets the jwks_sources of this ModelRequest.


        :return: The jwks_sources of this ModelRequest.
        :rtype: List[str]
        """
        return self._jwks_sources

    @jwks_sources.setter
    def jwks_sources(self, jwks_sources):
        """Sets the jwks_sources of this ModelRequest.


        :param jwks_sources: The jwks_sources of this ModelRequest.
        :type jwks_sources: List[str]
        """

        self._jwks_sources = jwks_sources

    @property
    def internal_host(self):
        """Gets the internal_host of this ModelRequest.


        :return: The internal_host of this ModelRequest.
        :rtype: str
        """
        return self._internal_host

    @internal_host.setter
    def internal_host(self, internal_host):
        """Sets the internal_host of this ModelRequest.


        :param internal_host: The internal_host of this ModelRequest.
        :type internal_host: str
        """

        self._internal_host = internal_host

    @property
    def external_host(self):
        """Gets the external_host of this ModelRequest.


        :return: The external_host of this ModelRequest.
        :rtype: str
        """
        return self._external_host

    @external_host.setter
    def external_host(self, external_host):
        """Sets the external_host of this ModelRequest.


        :param external_host: The external_host of this ModelRequest.
        :type external_host: str
        """
        if external_host is None:
            raise ValueError("Invalid value for `external_host`, must not be `None`")
        if external_host is not None and len(external_host) < 1:
            raise ValueError("Invalid value for `external_host`, length must be greater than or equal to `1`")

        self._external_host = external_host

    @property
    def internal_host_ssl_validation(self):
        """Gets the internal_host_ssl_validation of this ModelRequest.

        Validate SSL Certificates of upstream servers

        :return: The internal_host_ssl_validation of this ModelRequest.
        :rtype: bool
        """
        return self._internal_host_ssl_validation

    @internal_host_ssl_validation.setter
    def internal_host_ssl_validation(self, internal_host_ssl_validation):
        """Sets the internal_host_ssl_validation of this ModelRequest.

        Validate SSL Certificates of upstream servers

        :param internal_host_ssl_validation: The internal_host_ssl_validation of this ModelRequest.
        :type internal_host_ssl_validation: bool
        """

        self._internal_host_ssl_validation = internal_host_ssl_validation

    @property
    def skip_path_regex(self):
        """Gets the skip_path_regex of this ModelRequest.

        Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.

        :return: The skip_path_regex of this ModelRequest.
        :rtype: str
        """
        return self._skip_path_regex

    @skip_path_regex.setter
    def skip_path_regex(self, skip_path_regex):
        """Sets the skip_path_regex of this ModelRequest.

        Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.

        :param skip_path_regex: The skip_path_regex of this ModelRequest.
        :type skip_path_regex: str
        """

        self._skip_path_regex = skip_path_regex

    @property
    def basic_auth_enabled(self):
        """Gets the basic_auth_enabled of this ModelRequest.

        Set a custom HTTP-Basic Authentication header based on values from authentik.

        :return: The basic_auth_enabled of this ModelRequest.
        :rtype: bool
        """
        return self._basic_auth_enabled

    @basic_auth_enabled.setter
    def basic_auth_enabled(self, basic_auth_enabled):
        """Sets the basic_auth_enabled of this ModelRequest.

        Set a custom HTTP-Basic Authentication header based on values from authentik.

        :param basic_auth_enabled: The basic_auth_enabled of this ModelRequest.
        :type basic_auth_enabled: bool
        """

        self._basic_auth_enabled = basic_auth_enabled

    @property
    def basic_auth_password_attribute(self):
        """Gets the basic_auth_password_attribute of this ModelRequest.

        User/Group Attribute used for the password part of the HTTP-Basic Header.

        :return: The basic_auth_password_attribute of this ModelRequest.
        :rtype: str
        """
        return self._basic_auth_password_attribute

    @basic_auth_password_attribute.setter
    def basic_auth_password_attribute(self, basic_auth_password_attribute):
        """Sets the basic_auth_password_attribute of this ModelRequest.

        User/Group Attribute used for the password part of the HTTP-Basic Header.

        :param basic_auth_password_attribute: The basic_auth_password_attribute of this ModelRequest.
        :type basic_auth_password_attribute: str
        """

        self._basic_auth_password_attribute = basic_auth_password_attribute

    @property
    def basic_auth_user_attribute(self):
        """Gets the basic_auth_user_attribute of this ModelRequest.

        User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.

        :return: The basic_auth_user_attribute of this ModelRequest.
        :rtype: str
        """
        return self._basic_auth_user_attribute

    @basic_auth_user_attribute.setter
    def basic_auth_user_attribute(self, basic_auth_user_attribute):
        """Sets the basic_auth_user_attribute of this ModelRequest.

        User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user's Email address is used.

        :param basic_auth_user_attribute: The basic_auth_user_attribute of this ModelRequest.
        :type basic_auth_user_attribute: str
        """

        self._basic_auth_user_attribute = basic_auth_user_attribute

    @property
    def mode(self):
        """Gets the mode of this ModelRequest.

        Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.

        :return: The mode of this ModelRequest.
        :rtype: ProxyMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ModelRequest.

        Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.

        :param mode: The mode of this ModelRequest.
        :type mode: ProxyMode
        """

        self._mode = mode

    @property
    def intercept_header_auth(self):
        """Gets the intercept_header_auth of this ModelRequest.

        When enabled, this provider will intercept the authorization header and authenticate requests based on its value.

        :return: The intercept_header_auth of this ModelRequest.
        :rtype: bool
        """
        return self._intercept_header_auth

    @intercept_header_auth.setter
    def intercept_header_auth(self, intercept_header_auth):
        """Sets the intercept_header_auth of this ModelRequest.

        When enabled, this provider will intercept the authorization header and authenticate requests based on its value.

        :param intercept_header_auth: The intercept_header_auth of this ModelRequest.
        :type intercept_header_auth: bool
        """

        self._intercept_header_auth = intercept_header_auth

    @property
    def cookie_domain(self):
        """Gets the cookie_domain of this ModelRequest.


        :return: The cookie_domain of this ModelRequest.
        :rtype: str
        """
        return self._cookie_domain

    @cookie_domain.setter
    def cookie_domain(self, cookie_domain):
        """Sets the cookie_domain of this ModelRequest.


        :param cookie_domain: The cookie_domain of this ModelRequest.
        :type cookie_domain: str
        """

        self._cookie_domain = cookie_domain

    @property
    def settings(self):
        """Gets the settings of this ModelRequest.


        :return: The settings of this ModelRequest.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ModelRequest.


        :param settings: The settings of this ModelRequest.
        :type settings: object
        """

        self._settings = settings

    @property
    def connection_expiry(self):
        """Gets the connection_expiry of this ModelRequest.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :return: The connection_expiry of this ModelRequest.
        :rtype: str
        """
        return self._connection_expiry

    @connection_expiry.setter
    def connection_expiry(self, connection_expiry):
        """Sets the connection_expiry of this ModelRequest.

        Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)

        :param connection_expiry: The connection_expiry of this ModelRequest.
        :type connection_expiry: str
        """
        if connection_expiry is not None and len(connection_expiry) < 1:
            raise ValueError("Invalid value for `connection_expiry`, length must be greater than or equal to `1`")

        self._connection_expiry = connection_expiry

    @property
    def delete_token_on_disconnect(self):
        """Gets the delete_token_on_disconnect of this ModelRequest.

        When set to true, connection tokens will be deleted upon disconnect.

        :return: The delete_token_on_disconnect of this ModelRequest.
        :rtype: bool
        """
        return self._delete_token_on_disconnect

    @delete_token_on_disconnect.setter
    def delete_token_on_disconnect(self, delete_token_on_disconnect):
        """Sets the delete_token_on_disconnect of this ModelRequest.

        When set to true, connection tokens will be deleted upon disconnect.

        :param delete_token_on_disconnect: The delete_token_on_disconnect of this ModelRequest.
        :type delete_token_on_disconnect: bool
        """

        self._delete_token_on_disconnect = delete_token_on_disconnect

    @property
    def client_networks(self):
        """Gets the client_networks of this ModelRequest.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :return: The client_networks of this ModelRequest.
        :rtype: str
        """
        return self._client_networks

    @client_networks.setter
    def client_networks(self, client_networks):
        """Sets the client_networks of this ModelRequest.

        List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.

        :param client_networks: The client_networks of this ModelRequest.
        :type client_networks: str
        """
        if client_networks is not None and len(client_networks) < 1:
            raise ValueError("Invalid value for `client_networks`, length must be greater than or equal to `1`")

        self._client_networks = client_networks

    @property
    def shared_secret(self):
        """Gets the shared_secret of this ModelRequest.

        Shared secret between clients and server to hash packets.

        :return: The shared_secret of this ModelRequest.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this ModelRequest.

        Shared secret between clients and server to hash packets.

        :param shared_secret: The shared_secret of this ModelRequest.
        :type shared_secret: str
        """
        if shared_secret is not None and len(shared_secret) < 1:
            raise ValueError("Invalid value for `shared_secret`, length must be greater than or equal to `1`")

        self._shared_secret = shared_secret

    @property
    def acs_url(self):
        """Gets the acs_url of this ModelRequest.


        :return: The acs_url of this ModelRequest.
        :rtype: str
        """
        return self._acs_url

    @acs_url.setter
    def acs_url(self, acs_url):
        """Sets the acs_url of this ModelRequest.


        :param acs_url: The acs_url of this ModelRequest.
        :type acs_url: str
        """
        if acs_url is None:
            raise ValueError("Invalid value for `acs_url`, must not be `None`")
        if acs_url is not None and len(acs_url) > 200:
            raise ValueError("Invalid value for `acs_url`, length must be less than or equal to `200`")
        if acs_url is not None and len(acs_url) < 1:
            raise ValueError("Invalid value for `acs_url`, length must be greater than or equal to `1`")

        self._acs_url = acs_url

    @property
    def audience(self):
        """Gets the audience of this ModelRequest.

        Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.

        :return: The audience of this ModelRequest.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this ModelRequest.

        Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.

        :param audience: The audience of this ModelRequest.
        :type audience: str
        """

        self._audience = audience

    @property
    def issuer(self):
        """Gets the issuer of this ModelRequest.

        Also known as EntityID

        :return: The issuer of this ModelRequest.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this ModelRequest.

        Also known as EntityID

        :param issuer: The issuer of this ModelRequest.
        :type issuer: str
        """
        if issuer is not None and len(issuer) < 1:
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")

        self._issuer = issuer

    @property
    def assertion_valid_not_before(self):
        """Gets the assertion_valid_not_before of this ModelRequest.

        Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).

        :return: The assertion_valid_not_before of this ModelRequest.
        :rtype: str
        """
        return self._assertion_valid_not_before

    @assertion_valid_not_before.setter
    def assertion_valid_not_before(self, assertion_valid_not_before):
        """Sets the assertion_valid_not_before of this ModelRequest.

        Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).

        :param assertion_valid_not_before: The assertion_valid_not_before of this ModelRequest.
        :type assertion_valid_not_before: str
        """
        if assertion_valid_not_before is not None and len(assertion_valid_not_before) < 1:
            raise ValueError("Invalid value for `assertion_valid_not_before`, length must be greater than or equal to `1`")

        self._assertion_valid_not_before = assertion_valid_not_before

    @property
    def assertion_valid_not_on_or_after(self):
        """Gets the assertion_valid_not_on_or_after of this ModelRequest.

        Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The assertion_valid_not_on_or_after of this ModelRequest.
        :rtype: str
        """
        return self._assertion_valid_not_on_or_after

    @assertion_valid_not_on_or_after.setter
    def assertion_valid_not_on_or_after(self, assertion_valid_not_on_or_after):
        """Sets the assertion_valid_not_on_or_after of this ModelRequest.

        Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param assertion_valid_not_on_or_after: The assertion_valid_not_on_or_after of this ModelRequest.
        :type assertion_valid_not_on_or_after: str
        """
        if assertion_valid_not_on_or_after is not None and len(assertion_valid_not_on_or_after) < 1:
            raise ValueError("Invalid value for `assertion_valid_not_on_or_after`, length must be greater than or equal to `1`")

        self._assertion_valid_not_on_or_after = assertion_valid_not_on_or_after

    @property
    def session_valid_not_on_or_after(self):
        """Gets the session_valid_not_on_or_after of this ModelRequest.

        Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :return: The session_valid_not_on_or_after of this ModelRequest.
        :rtype: str
        """
        return self._session_valid_not_on_or_after

    @session_valid_not_on_or_after.setter
    def session_valid_not_on_or_after(self, session_valid_not_on_or_after):
        """Sets the session_valid_not_on_or_after of this ModelRequest.

        Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).

        :param session_valid_not_on_or_after: The session_valid_not_on_or_after of this ModelRequest.
        :type session_valid_not_on_or_after: str
        """
        if session_valid_not_on_or_after is not None and len(session_valid_not_on_or_after) < 1:
            raise ValueError("Invalid value for `session_valid_not_on_or_after`, length must be greater than or equal to `1`")

        self._session_valid_not_on_or_after = session_valid_not_on_or_after

    @property
    def name_id_mapping(self):
        """Gets the name_id_mapping of this ModelRequest.

        Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered

        :return: The name_id_mapping of this ModelRequest.
        :rtype: str
        """
        return self._name_id_mapping

    @name_id_mapping.setter
    def name_id_mapping(self, name_id_mapping):
        """Sets the name_id_mapping of this ModelRequest.

        Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered

        :param name_id_mapping: The name_id_mapping of this ModelRequest.
        :type name_id_mapping: str
        """

        self._name_id_mapping = name_id_mapping

    @property
    def digest_algorithm(self):
        """Gets the digest_algorithm of this ModelRequest.


        :return: The digest_algorithm of this ModelRequest.
        :rtype: DigestAlgorithmEnum
        """
        return self._digest_algorithm

    @digest_algorithm.setter
    def digest_algorithm(self, digest_algorithm):
        """Sets the digest_algorithm of this ModelRequest.


        :param digest_algorithm: The digest_algorithm of this ModelRequest.
        :type digest_algorithm: DigestAlgorithmEnum
        """

        self._digest_algorithm = digest_algorithm

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this ModelRequest.


        :return: The signature_algorithm of this ModelRequest.
        :rtype: SignatureAlgorithmEnum
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this ModelRequest.


        :param signature_algorithm: The signature_algorithm of this ModelRequest.
        :type signature_algorithm: SignatureAlgorithmEnum
        """

        self._signature_algorithm = signature_algorithm

    @property
    def signing_kp(self):
        """Gets the signing_kp of this ModelRequest.

        Keypair used to sign outgoing Responses going to the Service Provider.

        :return: The signing_kp of this ModelRequest.
        :rtype: str
        """
        return self._signing_kp

    @signing_kp.setter
    def signing_kp(self, signing_kp):
        """Sets the signing_kp of this ModelRequest.

        Keypair used to sign outgoing Responses going to the Service Provider.

        :param signing_kp: The signing_kp of this ModelRequest.
        :type signing_kp: str
        """

        self._signing_kp = signing_kp

    @property
    def verification_kp(self):
        """Gets the verification_kp of this ModelRequest.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :return: The verification_kp of this ModelRequest.
        :rtype: str
        """
        return self._verification_kp

    @verification_kp.setter
    def verification_kp(self, verification_kp):
        """Sets the verification_kp of this ModelRequest.

        When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.

        :param verification_kp: The verification_kp of this ModelRequest.
        :type verification_kp: str
        """

        self._verification_kp = verification_kp

    @property
    def encryption_kp(self):
        """Gets the encryption_kp of this ModelRequest.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :return: The encryption_kp of this ModelRequest.
        :rtype: str
        """
        return self._encryption_kp

    @encryption_kp.setter
    def encryption_kp(self, encryption_kp):
        """Sets the encryption_kp of this ModelRequest.

        When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.

        :param encryption_kp: The encryption_kp of this ModelRequest.
        :type encryption_kp: str
        """

        self._encryption_kp = encryption_kp

    @property
    def sign_assertion(self):
        """Gets the sign_assertion of this ModelRequest.


        :return: The sign_assertion of this ModelRequest.
        :rtype: bool
        """
        return self._sign_assertion

    @sign_assertion.setter
    def sign_assertion(self, sign_assertion):
        """Sets the sign_assertion of this ModelRequest.


        :param sign_assertion: The sign_assertion of this ModelRequest.
        :type sign_assertion: bool
        """

        self._sign_assertion = sign_assertion

    @property
    def sign_response(self):
        """Gets the sign_response of this ModelRequest.


        :return: The sign_response of this ModelRequest.
        :rtype: bool
        """
        return self._sign_response

    @sign_response.setter
    def sign_response(self, sign_response):
        """Sets the sign_response of this ModelRequest.


        :param sign_response: The sign_response of this ModelRequest.
        :type sign_response: bool
        """

        self._sign_response = sign_response

    @property
    def sp_binding(self):
        """Gets the sp_binding of this ModelRequest.

        This determines how authentik sends the response back to the Service Provider.

        :return: The sp_binding of this ModelRequest.
        :rtype: SpBindingEnum
        """
        return self._sp_binding

    @sp_binding.setter
    def sp_binding(self, sp_binding):
        """Sets the sp_binding of this ModelRequest.

        This determines how authentik sends the response back to the Service Provider.

        :param sp_binding: The sp_binding of this ModelRequest.
        :type sp_binding: SpBindingEnum
        """

        self._sp_binding = sp_binding

    @property
    def default_relay_state(self):
        """Gets the default_relay_state of this ModelRequest.

        Default relay_state value for IDP-initiated logins

        :return: The default_relay_state of this ModelRequest.
        :rtype: str
        """
        return self._default_relay_state

    @default_relay_state.setter
    def default_relay_state(self, default_relay_state):
        """Sets the default_relay_state of this ModelRequest.

        Default relay_state value for IDP-initiated logins

        :param default_relay_state: The default_relay_state of this ModelRequest.
        :type default_relay_state: str
        """

        self._default_relay_state = default_relay_state

    @property
    def url(self):
        """Gets the url of this ModelRequest.

        Base URL to SCIM requests, usually ends in /v2

        :return: The url of this ModelRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ModelRequest.

        Base URL to SCIM requests, usually ends in /v2

        :param url: The url of this ModelRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def token(self):
        """Gets the token of this ModelRequest.

        Authentication token

        :return: The token of this ModelRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ModelRequest.

        Authentication token

        :param token: The token of this ModelRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")
        if token is not None and len(token) < 1:
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `1`")

        self._token = token
