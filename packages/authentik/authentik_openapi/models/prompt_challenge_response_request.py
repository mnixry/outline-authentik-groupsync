# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class PromptChallengeResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: str='ak-stage-prompt'):
        """PromptChallengeResponseRequest - a model defined in OpenAPI

        :param component: The component of this PromptChallengeResponseRequest.
        """
        self.openapi_types = {
            'component': str
        }

        self.attribute_map = {
            'component': 'component'
        }

        self._component = component

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromptChallengeResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromptChallengeResponseRequest of this PromptChallengeResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this PromptChallengeResponseRequest.


        :return: The component of this PromptChallengeResponseRequest.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this PromptChallengeResponseRequest.


        :param component: The component of this PromptChallengeResponseRequest.
        :type component: str
        """
        if component is not None and len(component) < 1:
            raise ValueError("Invalid value for `component`, length must be greater than or equal to `1`")

        self._component = component
