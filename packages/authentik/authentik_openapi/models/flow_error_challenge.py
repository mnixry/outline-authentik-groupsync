# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.contextual_flow_info import ContextualFlowInfo
from authentik_openapi.models.error_detail import ErrorDetail
from authentik_openapi import util


class FlowErrorChallenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_info: ContextualFlowInfo=None, component: str='ak-stage-flow-error', response_errors: Dict[str, List[ErrorDetail]]=None, request_id: str=None, error: str=None, traceback: str=None):
        """FlowErrorChallenge - a model defined in OpenAPI

        :param flow_info: The flow_info of this FlowErrorChallenge.
        :param component: The component of this FlowErrorChallenge.
        :param response_errors: The response_errors of this FlowErrorChallenge.
        :param request_id: The request_id of this FlowErrorChallenge.
        :param error: The error of this FlowErrorChallenge.
        :param traceback: The traceback of this FlowErrorChallenge.
        """
        self.openapi_types = {
            'flow_info': ContextualFlowInfo,
            'component': str,
            'response_errors': Dict[str, List[ErrorDetail]],
            'request_id': str,
            'error': str,
            'traceback': str
        }

        self.attribute_map = {
            'flow_info': 'flow_info',
            'component': 'component',
            'response_errors': 'response_errors',
            'request_id': 'request_id',
            'error': 'error',
            'traceback': 'traceback'
        }

        self._flow_info = flow_info
        self._component = component
        self._response_errors = response_errors
        self._request_id = request_id
        self._error = error
        self._traceback = traceback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowErrorChallenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowErrorChallenge of this FlowErrorChallenge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_info(self):
        """Gets the flow_info of this FlowErrorChallenge.


        :return: The flow_info of this FlowErrorChallenge.
        :rtype: ContextualFlowInfo
        """
        return self._flow_info

    @flow_info.setter
    def flow_info(self, flow_info):
        """Sets the flow_info of this FlowErrorChallenge.


        :param flow_info: The flow_info of this FlowErrorChallenge.
        :type flow_info: ContextualFlowInfo
        """

        self._flow_info = flow_info

    @property
    def component(self):
        """Gets the component of this FlowErrorChallenge.


        :return: The component of this FlowErrorChallenge.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this FlowErrorChallenge.


        :param component: The component of this FlowErrorChallenge.
        :type component: str
        """

        self._component = component

    @property
    def response_errors(self):
        """Gets the response_errors of this FlowErrorChallenge.


        :return: The response_errors of this FlowErrorChallenge.
        :rtype: Dict[str, List[ErrorDetail]]
        """
        return self._response_errors

    @response_errors.setter
    def response_errors(self, response_errors):
        """Sets the response_errors of this FlowErrorChallenge.


        :param response_errors: The response_errors of this FlowErrorChallenge.
        :type response_errors: Dict[str, List[ErrorDetail]]
        """

        self._response_errors = response_errors

    @property
    def request_id(self):
        """Gets the request_id of this FlowErrorChallenge.


        :return: The request_id of this FlowErrorChallenge.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this FlowErrorChallenge.


        :param request_id: The request_id of this FlowErrorChallenge.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def error(self):
        """Gets the error of this FlowErrorChallenge.


        :return: The error of this FlowErrorChallenge.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FlowErrorChallenge.


        :param error: The error of this FlowErrorChallenge.
        :type error: str
        """

        self._error = error

    @property
    def traceback(self):
        """Gets the traceback of this FlowErrorChallenge.


        :return: The traceback of this FlowErrorChallenge.
        :rtype: str
        """
        return self._traceback

    @traceback.setter
    def traceback(self, traceback):
        """Sets the traceback of this FlowErrorChallenge.


        :param traceback: The traceback of this FlowErrorChallenge.
        :type traceback: str
        """

        self._traceback = traceback
