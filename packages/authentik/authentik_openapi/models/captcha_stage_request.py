# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.flow_set_request import FlowSetRequest
from authentik_openapi import util


class CaptchaStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, flow_set: List[FlowSetRequest]=None, public_key: str=None, private_key: str=None, js_url: str=None, api_url: str=None, score_min_threshold: float=None, score_max_threshold: float=None, error_on_invalid_score: bool=None):
        """CaptchaStageRequest - a model defined in OpenAPI

        :param name: The name of this CaptchaStageRequest.
        :param flow_set: The flow_set of this CaptchaStageRequest.
        :param public_key: The public_key of this CaptchaStageRequest.
        :param private_key: The private_key of this CaptchaStageRequest.
        :param js_url: The js_url of this CaptchaStageRequest.
        :param api_url: The api_url of this CaptchaStageRequest.
        :param score_min_threshold: The score_min_threshold of this CaptchaStageRequest.
        :param score_max_threshold: The score_max_threshold of this CaptchaStageRequest.
        :param error_on_invalid_score: The error_on_invalid_score of this CaptchaStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'flow_set': List[FlowSetRequest],
            'public_key': str,
            'private_key': str,
            'js_url': str,
            'api_url': str,
            'score_min_threshold': float,
            'score_max_threshold': float,
            'error_on_invalid_score': bool
        }

        self.attribute_map = {
            'name': 'name',
            'flow_set': 'flow_set',
            'public_key': 'public_key',
            'private_key': 'private_key',
            'js_url': 'js_url',
            'api_url': 'api_url',
            'score_min_threshold': 'score_min_threshold',
            'score_max_threshold': 'score_max_threshold',
            'error_on_invalid_score': 'error_on_invalid_score'
        }

        self._name = name
        self._flow_set = flow_set
        self._public_key = public_key
        self._private_key = private_key
        self._js_url = js_url
        self._api_url = api_url
        self._score_min_threshold = score_min_threshold
        self._score_max_threshold = score_max_threshold
        self._error_on_invalid_score = error_on_invalid_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptchaStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptchaStageRequest of this CaptchaStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CaptchaStageRequest.


        :return: The name of this CaptchaStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CaptchaStageRequest.


        :param name: The name of this CaptchaStageRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def flow_set(self):
        """Gets the flow_set of this CaptchaStageRequest.


        :return: The flow_set of this CaptchaStageRequest.
        :rtype: List[FlowSetRequest]
        """
        return self._flow_set

    @flow_set.setter
    def flow_set(self, flow_set):
        """Sets the flow_set of this CaptchaStageRequest.


        :param flow_set: The flow_set of this CaptchaStageRequest.
        :type flow_set: List[FlowSetRequest]
        """

        self._flow_set = flow_set

    @property
    def public_key(self):
        """Gets the public_key of this CaptchaStageRequest.

        Public key, acquired your captcha Provider.

        :return: The public_key of this CaptchaStageRequest.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this CaptchaStageRequest.

        Public key, acquired your captcha Provider.

        :param public_key: The public_key of this CaptchaStageRequest.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")
        if public_key is not None and len(public_key) < 1:
            raise ValueError("Invalid value for `public_key`, length must be greater than or equal to `1`")

        self._public_key = public_key

    @property
    def private_key(self):
        """Gets the private_key of this CaptchaStageRequest.

        Private key, acquired your captcha Provider.

        :return: The private_key of this CaptchaStageRequest.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this CaptchaStageRequest.

        Private key, acquired your captcha Provider.

        :param private_key: The private_key of this CaptchaStageRequest.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")
        if private_key is not None and len(private_key) < 1:
            raise ValueError("Invalid value for `private_key`, length must be greater than or equal to `1`")

        self._private_key = private_key

    @property
    def js_url(self):
        """Gets the js_url of this CaptchaStageRequest.


        :return: The js_url of this CaptchaStageRequest.
        :rtype: str
        """
        return self._js_url

    @js_url.setter
    def js_url(self, js_url):
        """Sets the js_url of this CaptchaStageRequest.


        :param js_url: The js_url of this CaptchaStageRequest.
        :type js_url: str
        """
        if js_url is not None and len(js_url) < 1:
            raise ValueError("Invalid value for `js_url`, length must be greater than or equal to `1`")

        self._js_url = js_url

    @property
    def api_url(self):
        """Gets the api_url of this CaptchaStageRequest.


        :return: The api_url of this CaptchaStageRequest.
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this CaptchaStageRequest.


        :param api_url: The api_url of this CaptchaStageRequest.
        :type api_url: str
        """
        if api_url is not None and len(api_url) < 1:
            raise ValueError("Invalid value for `api_url`, length must be greater than or equal to `1`")

        self._api_url = api_url

    @property
    def score_min_threshold(self):
        """Gets the score_min_threshold of this CaptchaStageRequest.


        :return: The score_min_threshold of this CaptchaStageRequest.
        :rtype: float
        """
        return self._score_min_threshold

    @score_min_threshold.setter
    def score_min_threshold(self, score_min_threshold):
        """Sets the score_min_threshold of this CaptchaStageRequest.


        :param score_min_threshold: The score_min_threshold of this CaptchaStageRequest.
        :type score_min_threshold: float
        """

        self._score_min_threshold = score_min_threshold

    @property
    def score_max_threshold(self):
        """Gets the score_max_threshold of this CaptchaStageRequest.


        :return: The score_max_threshold of this CaptchaStageRequest.
        :rtype: float
        """
        return self._score_max_threshold

    @score_max_threshold.setter
    def score_max_threshold(self, score_max_threshold):
        """Sets the score_max_threshold of this CaptchaStageRequest.


        :param score_max_threshold: The score_max_threshold of this CaptchaStageRequest.
        :type score_max_threshold: float
        """

        self._score_max_threshold = score_max_threshold

    @property
    def error_on_invalid_score(self):
        """Gets the error_on_invalid_score of this CaptchaStageRequest.

        When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions

        :return: The error_on_invalid_score of this CaptchaStageRequest.
        :rtype: bool
        """
        return self._error_on_invalid_score

    @error_on_invalid_score.setter
    def error_on_invalid_score(self, error_on_invalid_score):
        """Sets the error_on_invalid_score of this CaptchaStageRequest.

        When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions

        :param error_on_invalid_score: The error_on_invalid_score of this CaptchaStageRequest.
        :type error_on_invalid_score: bool
        """

        self._error_on_invalid_score = error_on_invalid_score
