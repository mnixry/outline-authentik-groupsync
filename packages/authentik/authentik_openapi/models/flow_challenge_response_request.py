# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.apple_challenge_response_request import AppleChallengeResponseRequest
from authentik_openapi.models.authenticator_duo_challenge_response_request import AuthenticatorDuoChallengeResponseRequest
from authentik_openapi.models.authenticator_sms_challenge_response_request import AuthenticatorSMSChallengeResponseRequest
from authentik_openapi.models.authenticator_static_challenge_response_request import AuthenticatorStaticChallengeResponseRequest
from authentik_openapi.models.authenticator_totp_challenge_response_request import AuthenticatorTOTPChallengeResponseRequest
from authentik_openapi.models.authenticator_validation_challenge_response_request import AuthenticatorValidationChallengeResponseRequest
from authentik_openapi.models.authenticator_web_authn_challenge_response_request import AuthenticatorWebAuthnChallengeResponseRequest
from authentik_openapi.models.auto_submit_challenge_response_request import AutoSubmitChallengeResponseRequest
from authentik_openapi.models.captcha_challenge_response_request import CaptchaChallengeResponseRequest
from authentik_openapi.models.consent_challenge_response_request import ConsentChallengeResponseRequest
from authentik_openapi.models.device_challenge_request import DeviceChallengeRequest
from authentik_openapi.models.email_challenge_response_request import EmailChallengeResponseRequest
from authentik_openapi.models.identification_challenge_response_request import IdentificationChallengeResponseRequest
from authentik_openapi.models.o_auth_device_code_challenge_response_request import OAuthDeviceCodeChallengeResponseRequest
from authentik_openapi.models.o_auth_device_code_finish_challenge_response_request import OAuthDeviceCodeFinishChallengeResponseRequest
from authentik_openapi.models.password_challenge_response_request import PasswordChallengeResponseRequest
from authentik_openapi.models.plex_authentication_challenge_response_request import PlexAuthenticationChallengeResponseRequest
from authentik_openapi.models.prompt_challenge_response_request import PromptChallengeResponseRequest
from authentik_openapi.models.user_login_challenge_response_request import UserLoginChallengeResponseRequest
from authentik_openapi import util


class FlowChallengeResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component: str='ak-stage-user-login', code: int=None, phone_number: str=None, selected_challenge: DeviceChallengeRequest=None, selected_stage: str=None, webauthn: Dict[str, object]=None, duo: int=None, response: Dict[str, object]=None, token: str=None, uid_field: str=None, password: str=None, remember_me: bool=None):
        """FlowChallengeResponseRequest - a model defined in OpenAPI

        :param component: The component of this FlowChallengeResponseRequest.
        :param code: The code of this FlowChallengeResponseRequest.
        :param phone_number: The phone_number of this FlowChallengeResponseRequest.
        :param selected_challenge: The selected_challenge of this FlowChallengeResponseRequest.
        :param selected_stage: The selected_stage of this FlowChallengeResponseRequest.
        :param webauthn: The webauthn of this FlowChallengeResponseRequest.
        :param duo: The duo of this FlowChallengeResponseRequest.
        :param response: The response of this FlowChallengeResponseRequest.
        :param token: The token of this FlowChallengeResponseRequest.
        :param uid_field: The uid_field of this FlowChallengeResponseRequest.
        :param password: The password of this FlowChallengeResponseRequest.
        :param remember_me: The remember_me of this FlowChallengeResponseRequest.
        """
        self.openapi_types = {
            'component': str,
            'code': int,
            'phone_number': str,
            'selected_challenge': DeviceChallengeRequest,
            'selected_stage': str,
            'webauthn': Dict[str, object],
            'duo': int,
            'response': Dict[str, object],
            'token': str,
            'uid_field': str,
            'password': str,
            'remember_me': bool
        }

        self.attribute_map = {
            'component': 'component',
            'code': 'code',
            'phone_number': 'phone_number',
            'selected_challenge': 'selected_challenge',
            'selected_stage': 'selected_stage',
            'webauthn': 'webauthn',
            'duo': 'duo',
            'response': 'response',
            'token': 'token',
            'uid_field': 'uid_field',
            'password': 'password',
            'remember_me': 'remember_me'
        }

        self._component = component
        self._code = code
        self._phone_number = phone_number
        self._selected_challenge = selected_challenge
        self._selected_stage = selected_stage
        self._webauthn = webauthn
        self._duo = duo
        self._response = response
        self._token = token
        self._uid_field = uid_field
        self._password = password
        self._remember_me = remember_me

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowChallengeResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowChallengeResponseRequest of this FlowChallengeResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component(self):
        """Gets the component of this FlowChallengeResponseRequest.


        :return: The component of this FlowChallengeResponseRequest.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this FlowChallengeResponseRequest.


        :param component: The component of this FlowChallengeResponseRequest.
        :type component: str
        """
        if component is not None and len(component) < 1:
            raise ValueError("Invalid value for `component`, length must be greater than or equal to `1`")

        self._component = component

    @property
    def code(self):
        """Gets the code of this FlowChallengeResponseRequest.


        :return: The code of this FlowChallengeResponseRequest.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FlowChallengeResponseRequest.


        :param code: The code of this FlowChallengeResponseRequest.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def phone_number(self):
        """Gets the phone_number of this FlowChallengeResponseRequest.


        :return: The phone_number of this FlowChallengeResponseRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this FlowChallengeResponseRequest.


        :param phone_number: The phone_number of this FlowChallengeResponseRequest.
        :type phone_number: str
        """
        if phone_number is not None and len(phone_number) < 1:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `1`")

        self._phone_number = phone_number

    @property
    def selected_challenge(self):
        """Gets the selected_challenge of this FlowChallengeResponseRequest.


        :return: The selected_challenge of this FlowChallengeResponseRequest.
        :rtype: DeviceChallengeRequest
        """
        return self._selected_challenge

    @selected_challenge.setter
    def selected_challenge(self, selected_challenge):
        """Sets the selected_challenge of this FlowChallengeResponseRequest.


        :param selected_challenge: The selected_challenge of this FlowChallengeResponseRequest.
        :type selected_challenge: DeviceChallengeRequest
        """

        self._selected_challenge = selected_challenge

    @property
    def selected_stage(self):
        """Gets the selected_stage of this FlowChallengeResponseRequest.


        :return: The selected_stage of this FlowChallengeResponseRequest.
        :rtype: str
        """
        return self._selected_stage

    @selected_stage.setter
    def selected_stage(self, selected_stage):
        """Sets the selected_stage of this FlowChallengeResponseRequest.


        :param selected_stage: The selected_stage of this FlowChallengeResponseRequest.
        :type selected_stage: str
        """
        if selected_stage is not None and len(selected_stage) < 1:
            raise ValueError("Invalid value for `selected_stage`, length must be greater than or equal to `1`")

        self._selected_stage = selected_stage

    @property
    def webauthn(self):
        """Gets the webauthn of this FlowChallengeResponseRequest.


        :return: The webauthn of this FlowChallengeResponseRequest.
        :rtype: Dict[str, object]
        """
        return self._webauthn

    @webauthn.setter
    def webauthn(self, webauthn):
        """Sets the webauthn of this FlowChallengeResponseRequest.


        :param webauthn: The webauthn of this FlowChallengeResponseRequest.
        :type webauthn: Dict[str, object]
        """

        self._webauthn = webauthn

    @property
    def duo(self):
        """Gets the duo of this FlowChallengeResponseRequest.


        :return: The duo of this FlowChallengeResponseRequest.
        :rtype: int
        """
        return self._duo

    @duo.setter
    def duo(self, duo):
        """Sets the duo of this FlowChallengeResponseRequest.


        :param duo: The duo of this FlowChallengeResponseRequest.
        :type duo: int
        """

        self._duo = duo

    @property
    def response(self):
        """Gets the response of this FlowChallengeResponseRequest.


        :return: The response of this FlowChallengeResponseRequest.
        :rtype: Dict[str, object]
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this FlowChallengeResponseRequest.


        :param response: The response of this FlowChallengeResponseRequest.
        :type response: Dict[str, object]
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def token(self):
        """Gets the token of this FlowChallengeResponseRequest.


        :return: The token of this FlowChallengeResponseRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this FlowChallengeResponseRequest.


        :param token: The token of this FlowChallengeResponseRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")
        if token is not None and len(token) < 1:
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `1`")

        self._token = token

    @property
    def uid_field(self):
        """Gets the uid_field of this FlowChallengeResponseRequest.


        :return: The uid_field of this FlowChallengeResponseRequest.
        :rtype: str
        """
        return self._uid_field

    @uid_field.setter
    def uid_field(self, uid_field):
        """Sets the uid_field of this FlowChallengeResponseRequest.


        :param uid_field: The uid_field of this FlowChallengeResponseRequest.
        :type uid_field: str
        """
        if uid_field is None:
            raise ValueError("Invalid value for `uid_field`, must not be `None`")
        if uid_field is not None and len(uid_field) < 1:
            raise ValueError("Invalid value for `uid_field`, length must be greater than or equal to `1`")

        self._uid_field = uid_field

    @property
    def password(self):
        """Gets the password of this FlowChallengeResponseRequest.


        :return: The password of this FlowChallengeResponseRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FlowChallengeResponseRequest.


        :param password: The password of this FlowChallengeResponseRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def remember_me(self):
        """Gets the remember_me of this FlowChallengeResponseRequest.


        :return: The remember_me of this FlowChallengeResponseRequest.
        :rtype: bool
        """
        return self._remember_me

    @remember_me.setter
    def remember_me(self, remember_me):
        """Sets the remember_me of this FlowChallengeResponseRequest.


        :param remember_me: The remember_me of this FlowChallengeResponseRequest.
        :type remember_me: bool
        """
        if remember_me is None:
            raise ValueError("Invalid value for `remember_me`, must not be `None`")

        self._remember_me = remember_me
