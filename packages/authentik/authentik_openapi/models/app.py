# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class App(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, label: str=None):
        """App - a model defined in OpenAPI

        :param name: The name of this App.
        :param label: The label of this App.
        """
        self.openapi_types = {
            'name': str,
            'label': str
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label'
        }

        self._name = name
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'App':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The App of this App.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this App.


        :return: The name of this App.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.


        :param name: The name of this App.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def label(self):
        """Gets the label of this App.


        :return: The label of this App.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this App.


        :param label: The label of this App.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
