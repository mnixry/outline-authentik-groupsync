# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi.models.consent_permission import ConsentPermission
from authentik_openapi.models.contextual_flow_info import ContextualFlowInfo
from authentik_openapi.models.error_detail import ErrorDetail
from authentik_openapi import util


class ConsentChallenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_info: ContextualFlowInfo=None, component: str='ak-stage-consent', response_errors: Dict[str, List[ErrorDetail]]=None, pending_user: str=None, pending_user_avatar: str=None, header_text: str=None, permissions: List[ConsentPermission]=None, additional_permissions: List[ConsentPermission]=None, token: str=None):
        """ConsentChallenge - a model defined in OpenAPI

        :param flow_info: The flow_info of this ConsentChallenge.
        :param component: The component of this ConsentChallenge.
        :param response_errors: The response_errors of this ConsentChallenge.
        :param pending_user: The pending_user of this ConsentChallenge.
        :param pending_user_avatar: The pending_user_avatar of this ConsentChallenge.
        :param header_text: The header_text of this ConsentChallenge.
        :param permissions: The permissions of this ConsentChallenge.
        :param additional_permissions: The additional_permissions of this ConsentChallenge.
        :param token: The token of this ConsentChallenge.
        """
        self.openapi_types = {
            'flow_info': ContextualFlowInfo,
            'component': str,
            'response_errors': Dict[str, List[ErrorDetail]],
            'pending_user': str,
            'pending_user_avatar': str,
            'header_text': str,
            'permissions': List[ConsentPermission],
            'additional_permissions': List[ConsentPermission],
            'token': str
        }

        self.attribute_map = {
            'flow_info': 'flow_info',
            'component': 'component',
            'response_errors': 'response_errors',
            'pending_user': 'pending_user',
            'pending_user_avatar': 'pending_user_avatar',
            'header_text': 'header_text',
            'permissions': 'permissions',
            'additional_permissions': 'additional_permissions',
            'token': 'token'
        }

        self._flow_info = flow_info
        self._component = component
        self._response_errors = response_errors
        self._pending_user = pending_user
        self._pending_user_avatar = pending_user_avatar
        self._header_text = header_text
        self._permissions = permissions
        self._additional_permissions = additional_permissions
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentChallenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentChallenge of this ConsentChallenge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_info(self):
        """Gets the flow_info of this ConsentChallenge.


        :return: The flow_info of this ConsentChallenge.
        :rtype: ContextualFlowInfo
        """
        return self._flow_info

    @flow_info.setter
    def flow_info(self, flow_info):
        """Sets the flow_info of this ConsentChallenge.


        :param flow_info: The flow_info of this ConsentChallenge.
        :type flow_info: ContextualFlowInfo
        """

        self._flow_info = flow_info

    @property
    def component(self):
        """Gets the component of this ConsentChallenge.


        :return: The component of this ConsentChallenge.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ConsentChallenge.


        :param component: The component of this ConsentChallenge.
        :type component: str
        """

        self._component = component

    @property
    def response_errors(self):
        """Gets the response_errors of this ConsentChallenge.


        :return: The response_errors of this ConsentChallenge.
        :rtype: Dict[str, List[ErrorDetail]]
        """
        return self._response_errors

    @response_errors.setter
    def response_errors(self, response_errors):
        """Sets the response_errors of this ConsentChallenge.


        :param response_errors: The response_errors of this ConsentChallenge.
        :type response_errors: Dict[str, List[ErrorDetail]]
        """

        self._response_errors = response_errors

    @property
    def pending_user(self):
        """Gets the pending_user of this ConsentChallenge.


        :return: The pending_user of this ConsentChallenge.
        :rtype: str
        """
        return self._pending_user

    @pending_user.setter
    def pending_user(self, pending_user):
        """Sets the pending_user of this ConsentChallenge.


        :param pending_user: The pending_user of this ConsentChallenge.
        :type pending_user: str
        """
        if pending_user is None:
            raise ValueError("Invalid value for `pending_user`, must not be `None`")

        self._pending_user = pending_user

    @property
    def pending_user_avatar(self):
        """Gets the pending_user_avatar of this ConsentChallenge.


        :return: The pending_user_avatar of this ConsentChallenge.
        :rtype: str
        """
        return self._pending_user_avatar

    @pending_user_avatar.setter
    def pending_user_avatar(self, pending_user_avatar):
        """Sets the pending_user_avatar of this ConsentChallenge.


        :param pending_user_avatar: The pending_user_avatar of this ConsentChallenge.
        :type pending_user_avatar: str
        """
        if pending_user_avatar is None:
            raise ValueError("Invalid value for `pending_user_avatar`, must not be `None`")

        self._pending_user_avatar = pending_user_avatar

    @property
    def header_text(self):
        """Gets the header_text of this ConsentChallenge.


        :return: The header_text of this ConsentChallenge.
        :rtype: str
        """
        return self._header_text

    @header_text.setter
    def header_text(self, header_text):
        """Sets the header_text of this ConsentChallenge.


        :param header_text: The header_text of this ConsentChallenge.
        :type header_text: str
        """

        self._header_text = header_text

    @property
    def permissions(self):
        """Gets the permissions of this ConsentChallenge.


        :return: The permissions of this ConsentChallenge.
        :rtype: List[ConsentPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ConsentChallenge.


        :param permissions: The permissions of this ConsentChallenge.
        :type permissions: List[ConsentPermission]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def additional_permissions(self):
        """Gets the additional_permissions of this ConsentChallenge.


        :return: The additional_permissions of this ConsentChallenge.
        :rtype: List[ConsentPermission]
        """
        return self._additional_permissions

    @additional_permissions.setter
    def additional_permissions(self, additional_permissions):
        """Sets the additional_permissions of this ConsentChallenge.


        :param additional_permissions: The additional_permissions of this ConsentChallenge.
        :type additional_permissions: List[ConsentPermission]
        """
        if additional_permissions is None:
            raise ValueError("Invalid value for `additional_permissions`, must not be `None`")

        self._additional_permissions = additional_permissions

    @property
    def token(self):
        """Gets the token of this ConsentChallenge.


        :return: The token of this ConsentChallenge.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ConsentChallenge.


        :param token: The token of this ConsentChallenge.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
