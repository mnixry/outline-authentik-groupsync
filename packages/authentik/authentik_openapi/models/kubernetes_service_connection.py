# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class KubernetesServiceConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, local: bool=None, component: str=None, verbose_name: str=None, verbose_name_plural: str=None, meta_model_name: str=None, kubeconfig: object=None, verify_ssl: bool=None):
        """KubernetesServiceConnection - a model defined in OpenAPI

        :param pk: The pk of this KubernetesServiceConnection.
        :param name: The name of this KubernetesServiceConnection.
        :param local: The local of this KubernetesServiceConnection.
        :param component: The component of this KubernetesServiceConnection.
        :param verbose_name: The verbose_name of this KubernetesServiceConnection.
        :param verbose_name_plural: The verbose_name_plural of this KubernetesServiceConnection.
        :param meta_model_name: The meta_model_name of this KubernetesServiceConnection.
        :param kubeconfig: The kubeconfig of this KubernetesServiceConnection.
        :param verify_ssl: The verify_ssl of this KubernetesServiceConnection.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'local': bool,
            'component': str,
            'verbose_name': str,
            'verbose_name_plural': str,
            'meta_model_name': str,
            'kubeconfig': object,
            'verify_ssl': bool
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'local': 'local',
            'component': 'component',
            'verbose_name': 'verbose_name',
            'verbose_name_plural': 'verbose_name_plural',
            'meta_model_name': 'meta_model_name',
            'kubeconfig': 'kubeconfig',
            'verify_ssl': 'verify_ssl'
        }

        self._pk = pk
        self._name = name
        self._local = local
        self._component = component
        self._verbose_name = verbose_name
        self._verbose_name_plural = verbose_name_plural
        self._meta_model_name = meta_model_name
        self._kubeconfig = kubeconfig
        self._verify_ssl = verify_ssl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KubernetesServiceConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KubernetesServiceConnection of this KubernetesServiceConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this KubernetesServiceConnection.


        :return: The pk of this KubernetesServiceConnection.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this KubernetesServiceConnection.


        :param pk: The pk of this KubernetesServiceConnection.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this KubernetesServiceConnection.


        :return: The name of this KubernetesServiceConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubernetesServiceConnection.


        :param name: The name of this KubernetesServiceConnection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def local(self):
        """Gets the local of this KubernetesServiceConnection.

        If enabled, use the local connection. Required Docker socket/Kubernetes Integration

        :return: The local of this KubernetesServiceConnection.
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this KubernetesServiceConnection.

        If enabled, use the local connection. Required Docker socket/Kubernetes Integration

        :param local: The local of this KubernetesServiceConnection.
        :type local: bool
        """

        self._local = local

    @property
    def component(self):
        """Gets the component of this KubernetesServiceConnection.


        :return: The component of this KubernetesServiceConnection.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this KubernetesServiceConnection.


        :param component: The component of this KubernetesServiceConnection.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")

        self._component = component

    @property
    def verbose_name(self):
        """Gets the verbose_name of this KubernetesServiceConnection.

        Return object's verbose_name

        :return: The verbose_name of this KubernetesServiceConnection.
        :rtype: str
        """
        return self._verbose_name

    @verbose_name.setter
    def verbose_name(self, verbose_name):
        """Sets the verbose_name of this KubernetesServiceConnection.

        Return object's verbose_name

        :param verbose_name: The verbose_name of this KubernetesServiceConnection.
        :type verbose_name: str
        """
        if verbose_name is None:
            raise ValueError("Invalid value for `verbose_name`, must not be `None`")

        self._verbose_name = verbose_name

    @property
    def verbose_name_plural(self):
        """Gets the verbose_name_plural of this KubernetesServiceConnection.

        Return object's plural verbose_name

        :return: The verbose_name_plural of this KubernetesServiceConnection.
        :rtype: str
        """
        return self._verbose_name_plural

    @verbose_name_plural.setter
    def verbose_name_plural(self, verbose_name_plural):
        """Sets the verbose_name_plural of this KubernetesServiceConnection.

        Return object's plural verbose_name

        :param verbose_name_plural: The verbose_name_plural of this KubernetesServiceConnection.
        :type verbose_name_plural: str
        """
        if verbose_name_plural is None:
            raise ValueError("Invalid value for `verbose_name_plural`, must not be `None`")

        self._verbose_name_plural = verbose_name_plural

    @property
    def meta_model_name(self):
        """Gets the meta_model_name of this KubernetesServiceConnection.

        Return internal model name

        :return: The meta_model_name of this KubernetesServiceConnection.
        :rtype: str
        """
        return self._meta_model_name

    @meta_model_name.setter
    def meta_model_name(self, meta_model_name):
        """Sets the meta_model_name of this KubernetesServiceConnection.

        Return internal model name

        :param meta_model_name: The meta_model_name of this KubernetesServiceConnection.
        :type meta_model_name: str
        """
        if meta_model_name is None:
            raise ValueError("Invalid value for `meta_model_name`, must not be `None`")

        self._meta_model_name = meta_model_name

    @property
    def kubeconfig(self):
        """Gets the kubeconfig of this KubernetesServiceConnection.

        Paste your kubeconfig here. authentik will automatically use the currently selected context.

        :return: The kubeconfig of this KubernetesServiceConnection.
        :rtype: object
        """
        return self._kubeconfig

    @kubeconfig.setter
    def kubeconfig(self, kubeconfig):
        """Sets the kubeconfig of this KubernetesServiceConnection.

        Paste your kubeconfig here. authentik will automatically use the currently selected context.

        :param kubeconfig: The kubeconfig of this KubernetesServiceConnection.
        :type kubeconfig: object
        """

        self._kubeconfig = kubeconfig

    @property
    def verify_ssl(self):
        """Gets the verify_ssl of this KubernetesServiceConnection.

        Verify SSL Certificates of the Kubernetes API endpoint

        :return: The verify_ssl of this KubernetesServiceConnection.
        :rtype: bool
        """
        return self._verify_ssl

    @verify_ssl.setter
    def verify_ssl(self, verify_ssl):
        """Sets the verify_ssl of this KubernetesServiceConnection.

        Verify SSL Certificates of the Kubernetes API endpoint

        :param verify_ssl: The verify_ssl of this KubernetesServiceConnection.
        :type verify_ssl: bool
        """

        self._verify_ssl = verify_ssl
