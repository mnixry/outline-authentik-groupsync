# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class NotificationWebhookMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pk: str=None, name: str=None, expression: str=None):
        """NotificationWebhookMapping - a model defined in OpenAPI

        :param pk: The pk of this NotificationWebhookMapping.
        :param name: The name of this NotificationWebhookMapping.
        :param expression: The expression of this NotificationWebhookMapping.
        """
        self.openapi_types = {
            'pk': str,
            'name': str,
            'expression': str
        }

        self.attribute_map = {
            'pk': 'pk',
            'name': 'name',
            'expression': 'expression'
        }

        self._pk = pk
        self._name = name
        self._expression = expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationWebhookMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationWebhookMapping of this NotificationWebhookMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pk(self):
        """Gets the pk of this NotificationWebhookMapping.


        :return: The pk of this NotificationWebhookMapping.
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this NotificationWebhookMapping.


        :param pk: The pk of this NotificationWebhookMapping.
        :type pk: str
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def name(self):
        """Gets the name of this NotificationWebhookMapping.


        :return: The name of this NotificationWebhookMapping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationWebhookMapping.


        :param name: The name of this NotificationWebhookMapping.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def expression(self):
        """Gets the expression of this NotificationWebhookMapping.


        :return: The expression of this NotificationWebhookMapping.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this NotificationWebhookMapping.


        :param expression: The expression of this NotificationWebhookMapping.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression
