# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from authentik_openapi.models.base_model import Model
from authentik_openapi import util


class SystemInfoRuntime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, python_version: str=None, environment: str=None, architecture: str=None, platform: str=None, uname: str=None, openssl_version: str=None, openssl_fips_enabled: bool=None, authentik_version: str=None):
        """SystemInfoRuntime - a model defined in OpenAPI

        :param python_version: The python_version of this SystemInfoRuntime.
        :param environment: The environment of this SystemInfoRuntime.
        :param architecture: The architecture of this SystemInfoRuntime.
        :param platform: The platform of this SystemInfoRuntime.
        :param uname: The uname of this SystemInfoRuntime.
        :param openssl_version: The openssl_version of this SystemInfoRuntime.
        :param openssl_fips_enabled: The openssl_fips_enabled of this SystemInfoRuntime.
        :param authentik_version: The authentik_version of this SystemInfoRuntime.
        """
        self.openapi_types = {
            'python_version': str,
            'environment': str,
            'architecture': str,
            'platform': str,
            'uname': str,
            'openssl_version': str,
            'openssl_fips_enabled': bool,
            'authentik_version': str
        }

        self.attribute_map = {
            'python_version': 'python_version',
            'environment': 'environment',
            'architecture': 'architecture',
            'platform': 'platform',
            'uname': 'uname',
            'openssl_version': 'openssl_version',
            'openssl_fips_enabled': 'openssl_fips_enabled',
            'authentik_version': 'authentik_version'
        }

        self._python_version = python_version
        self._environment = environment
        self._architecture = architecture
        self._platform = platform
        self._uname = uname
        self._openssl_version = openssl_version
        self._openssl_fips_enabled = openssl_fips_enabled
        self._authentik_version = authentik_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemInfoRuntime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemInfo_runtime of this SystemInfoRuntime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def python_version(self):
        """Gets the python_version of this SystemInfoRuntime.


        :return: The python_version of this SystemInfoRuntime.
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this SystemInfoRuntime.


        :param python_version: The python_version of this SystemInfoRuntime.
        :type python_version: str
        """
        if python_version is None:
            raise ValueError("Invalid value for `python_version`, must not be `None`")

        self._python_version = python_version

    @property
    def environment(self):
        """Gets the environment of this SystemInfoRuntime.


        :return: The environment of this SystemInfoRuntime.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this SystemInfoRuntime.


        :param environment: The environment of this SystemInfoRuntime.
        :type environment: str
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment

    @property
    def architecture(self):
        """Gets the architecture of this SystemInfoRuntime.


        :return: The architecture of this SystemInfoRuntime.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this SystemInfoRuntime.


        :param architecture: The architecture of this SystemInfoRuntime.
        :type architecture: str
        """
        if architecture is None:
            raise ValueError("Invalid value for `architecture`, must not be `None`")

        self._architecture = architecture

    @property
    def platform(self):
        """Gets the platform of this SystemInfoRuntime.


        :return: The platform of this SystemInfoRuntime.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this SystemInfoRuntime.


        :param platform: The platform of this SystemInfoRuntime.
        :type platform: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def uname(self):
        """Gets the uname of this SystemInfoRuntime.


        :return: The uname of this SystemInfoRuntime.
        :rtype: str
        """
        return self._uname

    @uname.setter
    def uname(self, uname):
        """Sets the uname of this SystemInfoRuntime.


        :param uname: The uname of this SystemInfoRuntime.
        :type uname: str
        """
        if uname is None:
            raise ValueError("Invalid value for `uname`, must not be `None`")

        self._uname = uname

    @property
    def openssl_version(self):
        """Gets the openssl_version of this SystemInfoRuntime.


        :return: The openssl_version of this SystemInfoRuntime.
        :rtype: str
        """
        return self._openssl_version

    @openssl_version.setter
    def openssl_version(self, openssl_version):
        """Sets the openssl_version of this SystemInfoRuntime.


        :param openssl_version: The openssl_version of this SystemInfoRuntime.
        :type openssl_version: str
        """
        if openssl_version is None:
            raise ValueError("Invalid value for `openssl_version`, must not be `None`")

        self._openssl_version = openssl_version

    @property
    def openssl_fips_enabled(self):
        """Gets the openssl_fips_enabled of this SystemInfoRuntime.


        :return: The openssl_fips_enabled of this SystemInfoRuntime.
        :rtype: bool
        """
        return self._openssl_fips_enabled

    @openssl_fips_enabled.setter
    def openssl_fips_enabled(self, openssl_fips_enabled):
        """Sets the openssl_fips_enabled of this SystemInfoRuntime.


        :param openssl_fips_enabled: The openssl_fips_enabled of this SystemInfoRuntime.
        :type openssl_fips_enabled: bool
        """
        if openssl_fips_enabled is None:
            raise ValueError("Invalid value for `openssl_fips_enabled`, must not be `None`")

        self._openssl_fips_enabled = openssl_fips_enabled

    @property
    def authentik_version(self):
        """Gets the authentik_version of this SystemInfoRuntime.


        :return: The authentik_version of this SystemInfoRuntime.
        :rtype: str
        """
        return self._authentik_version

    @authentik_version.setter
    def authentik_version(self, authentik_version):
        """Sets the authentik_version of this SystemInfoRuntime.


        :param authentik_version: The authentik_version of this SystemInfoRuntime.
        :type authentik_version: str
        """
        if authentik_version is None:
            raise ValueError("Invalid value for `authentik_version`, must not be `None`")

        self._authentik_version = authentik_version
