# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class DocumentsMovePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, collection_id: str=None, parent_document_id: str=None):
        """DocumentsMovePostRequest - a model defined in OpenAPI

        :param id: The id of this DocumentsMovePostRequest.
        :param collection_id: The collection_id of this DocumentsMovePostRequest.
        :param parent_document_id: The parent_document_id of this DocumentsMovePostRequest.
        """
        self.openapi_types = {
            'id': str,
            'collection_id': str,
            'parent_document_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'collection_id': 'collectionId',
            'parent_document_id': 'parentDocumentId'
        }

        self._id = id
        self._collection_id = collection_id
        self._parent_document_id = parent_document_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentsMovePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _documents_move_post_request of this DocumentsMovePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentsMovePostRequest.

        Unique identifier for the document. Either the UUID or the urlId is acceptable.

        :return: The id of this DocumentsMovePostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentsMovePostRequest.

        Unique identifier for the document. Either the UUID or the urlId is acceptable.

        :param id: The id of this DocumentsMovePostRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def collection_id(self):
        """Gets the collection_id of this DocumentsMovePostRequest.


        :return: The collection_id of this DocumentsMovePostRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this DocumentsMovePostRequest.


        :param collection_id: The collection_id of this DocumentsMovePostRequest.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def parent_document_id(self):
        """Gets the parent_document_id of this DocumentsMovePostRequest.


        :return: The parent_document_id of this DocumentsMovePostRequest.
        :rtype: str
        """
        return self._parent_document_id

    @parent_document_id.setter
    def parent_document_id(self, parent_document_id):
        """Sets the parent_document_id of this DocumentsMovePostRequest.


        :param parent_document_id: The parent_document_id of this DocumentsMovePostRequest.
        :type parent_document_id: str
        """

        self._parent_document_id = parent_document_id
