# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.user import User
from outline_openapi import util


class GroupMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, group_id: str=None, user_id: str=None, user: User=None):
        """GroupMembership - a model defined in OpenAPI

        :param id: The id of this GroupMembership.
        :param group_id: The group_id of this GroupMembership.
        :param user_id: The user_id of this GroupMembership.
        :param user: The user of this GroupMembership.
        """
        self.openapi_types = {
            'id': str,
            'group_id': str,
            'user_id': str,
            'user': User
        }

        self.attribute_map = {
            'id': 'id',
            'group_id': 'groupId',
            'user_id': 'userId',
            'user': 'user'
        }

        self._id = id
        self._group_id = group_id
        self._user_id = user_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupMembership of this GroupMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GroupMembership.

        Unique identifier for the object.

        :return: The id of this GroupMembership.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupMembership.

        Unique identifier for the object.

        :param id: The id of this GroupMembership.
        :type id: str
        """

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this GroupMembership.

        Identifier for the associated group.

        :return: The group_id of this GroupMembership.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupMembership.

        Identifier for the associated group.

        :param group_id: The group_id of this GroupMembership.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def user_id(self):
        """Gets the user_id of this GroupMembership.

        Identifier for the associated user.

        :return: The user_id of this GroupMembership.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GroupMembership.

        Identifier for the associated user.

        :param user_id: The user_id of this GroupMembership.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user(self):
        """Gets the user of this GroupMembership.


        :return: The user of this GroupMembership.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this GroupMembership.


        :param user: The user of this GroupMembership.
        :type user: User
        """

        self._user = user
