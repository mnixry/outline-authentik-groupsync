# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class DocumentsSearchPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: float=None, limit: float=None, query: str=None, user_id: str=None, collection_id: str=None, document_id: str=None, status_filter: str=None, date_filter: str=None):
        """DocumentsSearchPostRequest - a model defined in OpenAPI

        :param offset: The offset of this DocumentsSearchPostRequest.
        :param limit: The limit of this DocumentsSearchPostRequest.
        :param query: The query of this DocumentsSearchPostRequest.
        :param user_id: The user_id of this DocumentsSearchPostRequest.
        :param collection_id: The collection_id of this DocumentsSearchPostRequest.
        :param document_id: The document_id of this DocumentsSearchPostRequest.
        :param status_filter: The status_filter of this DocumentsSearchPostRequest.
        :param date_filter: The date_filter of this DocumentsSearchPostRequest.
        """
        self.openapi_types = {
            'offset': float,
            'limit': float,
            'query': str,
            'user_id': str,
            'collection_id': str,
            'document_id': str,
            'status_filter': str,
            'date_filter': str
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'query': 'query',
            'user_id': 'userId',
            'collection_id': 'collectionId',
            'document_id': 'documentId',
            'status_filter': 'statusFilter',
            'date_filter': 'dateFilter'
        }

        self._offset = offset
        self._limit = limit
        self._query = query
        self._user_id = user_id
        self._collection_id = collection_id
        self._document_id = document_id
        self._status_filter = status_filter
        self._date_filter = date_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentsSearchPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _documents_search_post_request of this DocumentsSearchPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this DocumentsSearchPostRequest.


        :return: The offset of this DocumentsSearchPostRequest.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DocumentsSearchPostRequest.


        :param offset: The offset of this DocumentsSearchPostRequest.
        :type offset: float
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this DocumentsSearchPostRequest.


        :return: The limit of this DocumentsSearchPostRequest.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DocumentsSearchPostRequest.


        :param limit: The limit of this DocumentsSearchPostRequest.
        :type limit: float
        """

        self._limit = limit

    @property
    def query(self):
        """Gets the query of this DocumentsSearchPostRequest.


        :return: The query of this DocumentsSearchPostRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DocumentsSearchPostRequest.


        :param query: The query of this DocumentsSearchPostRequest.
        :type query: str
        """

        self._query = query

    @property
    def user_id(self):
        """Gets the user_id of this DocumentsSearchPostRequest.

        Any documents that have not been edited by the user identifier will be filtered out

        :return: The user_id of this DocumentsSearchPostRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DocumentsSearchPostRequest.

        Any documents that have not been edited by the user identifier will be filtered out

        :param user_id: The user_id of this DocumentsSearchPostRequest.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def collection_id(self):
        """Gets the collection_id of this DocumentsSearchPostRequest.

        A collection to search within

        :return: The collection_id of this DocumentsSearchPostRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this DocumentsSearchPostRequest.

        A collection to search within

        :param collection_id: The collection_id of this DocumentsSearchPostRequest.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def document_id(self):
        """Gets the document_id of this DocumentsSearchPostRequest.

        A document to search within

        :return: The document_id of this DocumentsSearchPostRequest.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentsSearchPostRequest.

        A document to search within

        :param document_id: The document_id of this DocumentsSearchPostRequest.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def status_filter(self):
        """Gets the status_filter of this DocumentsSearchPostRequest.

        Any documents that are not in the specified status will be filtered out

        :return: The status_filter of this DocumentsSearchPostRequest.
        :rtype: str
        """
        return self._status_filter

    @status_filter.setter
    def status_filter(self, status_filter):
        """Sets the status_filter of this DocumentsSearchPostRequest.

        Any documents that are not in the specified status will be filtered out

        :param status_filter: The status_filter of this DocumentsSearchPostRequest.
        :type status_filter: str
        """
        allowed_values = ["draft", "archived", "published"]  # noqa: E501
        if status_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `status_filter` ({0}), must be one of {1}"
                .format(status_filter, allowed_values)
            )

        self._status_filter = status_filter

    @property
    def date_filter(self):
        """Gets the date_filter of this DocumentsSearchPostRequest.

        Any documents that have not been updated within the specified period will be filtered out

        :return: The date_filter of this DocumentsSearchPostRequest.
        :rtype: str
        """
        return self._date_filter

    @date_filter.setter
    def date_filter(self, date_filter):
        """Sets the date_filter of this DocumentsSearchPostRequest.

        Any documents that have not been updated within the specified period will be filtered out

        :param date_filter: The date_filter of this DocumentsSearchPostRequest.
        :type date_filter: str
        """
        allowed_values = ["day", "week", "month", "year"]  # noqa: E501
        if date_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `date_filter` ({0}), must be one of {1}"
                .format(date_filter, allowed_values)
            )

        self._date_filter = date_filter
