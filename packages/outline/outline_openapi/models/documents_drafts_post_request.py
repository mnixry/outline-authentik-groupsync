# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class DocumentsDraftsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: float=None, limit: float=None, sort: str=None, direction: str=None, collection_id: str=None, date_filter: str=None):
        """DocumentsDraftsPostRequest - a model defined in OpenAPI

        :param offset: The offset of this DocumentsDraftsPostRequest.
        :param limit: The limit of this DocumentsDraftsPostRequest.
        :param sort: The sort of this DocumentsDraftsPostRequest.
        :param direction: The direction of this DocumentsDraftsPostRequest.
        :param collection_id: The collection_id of this DocumentsDraftsPostRequest.
        :param date_filter: The date_filter of this DocumentsDraftsPostRequest.
        """
        self.openapi_types = {
            'offset': float,
            'limit': float,
            'sort': str,
            'direction': str,
            'collection_id': str,
            'date_filter': str
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'sort': 'sort',
            'direction': 'direction',
            'collection_id': 'collectionId',
            'date_filter': 'dateFilter'
        }

        self._offset = offset
        self._limit = limit
        self._sort = sort
        self._direction = direction
        self._collection_id = collection_id
        self._date_filter = date_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentsDraftsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _documents_drafts_post_request of this DocumentsDraftsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this DocumentsDraftsPostRequest.


        :return: The offset of this DocumentsDraftsPostRequest.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DocumentsDraftsPostRequest.


        :param offset: The offset of this DocumentsDraftsPostRequest.
        :type offset: float
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this DocumentsDraftsPostRequest.


        :return: The limit of this DocumentsDraftsPostRequest.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DocumentsDraftsPostRequest.


        :param limit: The limit of this DocumentsDraftsPostRequest.
        :type limit: float
        """

        self._limit = limit

    @property
    def sort(self):
        """Gets the sort of this DocumentsDraftsPostRequest.


        :return: The sort of this DocumentsDraftsPostRequest.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DocumentsDraftsPostRequest.


        :param sort: The sort of this DocumentsDraftsPostRequest.
        :type sort: str
        """

        self._sort = sort

    @property
    def direction(self):
        """Gets the direction of this DocumentsDraftsPostRequest.


        :return: The direction of this DocumentsDraftsPostRequest.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this DocumentsDraftsPostRequest.


        :param direction: The direction of this DocumentsDraftsPostRequest.
        :type direction: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def collection_id(self):
        """Gets the collection_id of this DocumentsDraftsPostRequest.

        A collection to search within

        :return: The collection_id of this DocumentsDraftsPostRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this DocumentsDraftsPostRequest.

        A collection to search within

        :param collection_id: The collection_id of this DocumentsDraftsPostRequest.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def date_filter(self):
        """Gets the date_filter of this DocumentsDraftsPostRequest.

        Any documents that have not been updated within the specified period will be filtered out

        :return: The date_filter of this DocumentsDraftsPostRequest.
        :rtype: str
        """
        return self._date_filter

    @date_filter.setter
    def date_filter(self, date_filter):
        """Sets the date_filter of this DocumentsDraftsPostRequest.

        Any documents that have not been updated within the specified period will be filtered out

        :param date_filter: The date_filter of this DocumentsDraftsPostRequest.
        :type date_filter: str
        """
        allowed_values = ["day", "week", "month", "year"]  # noqa: E501
        if date_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `date_filter` ({0}), must be one of {1}"
                .format(date_filter, allowed_values)
            )

        self._date_filter = date_filter
