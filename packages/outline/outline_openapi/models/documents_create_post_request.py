# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class DocumentsCreatePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, text: str=None, collection_id: str=None, parent_document_id: str=None, template_id: str=None, template: bool=None, publish: bool=None):
        """DocumentsCreatePostRequest - a model defined in OpenAPI

        :param title: The title of this DocumentsCreatePostRequest.
        :param text: The text of this DocumentsCreatePostRequest.
        :param collection_id: The collection_id of this DocumentsCreatePostRequest.
        :param parent_document_id: The parent_document_id of this DocumentsCreatePostRequest.
        :param template_id: The template_id of this DocumentsCreatePostRequest.
        :param template: The template of this DocumentsCreatePostRequest.
        :param publish: The publish of this DocumentsCreatePostRequest.
        """
        self.openapi_types = {
            'title': str,
            'text': str,
            'collection_id': str,
            'parent_document_id': str,
            'template_id': str,
            'template': bool,
            'publish': bool
        }

        self.attribute_map = {
            'title': 'title',
            'text': 'text',
            'collection_id': 'collectionId',
            'parent_document_id': 'parentDocumentId',
            'template_id': 'templateId',
            'template': 'template',
            'publish': 'publish'
        }

        self._title = title
        self._text = text
        self._collection_id = collection_id
        self._parent_document_id = parent_document_id
        self._template_id = template_id
        self._template = template
        self._publish = publish

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentsCreatePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _documents_create_post_request of this DocumentsCreatePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this DocumentsCreatePostRequest.


        :return: The title of this DocumentsCreatePostRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentsCreatePostRequest.


        :param title: The title of this DocumentsCreatePostRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def text(self):
        """Gets the text of this DocumentsCreatePostRequest.

        The body of the document, may contain markdown formatting.

        :return: The text of this DocumentsCreatePostRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DocumentsCreatePostRequest.

        The body of the document, may contain markdown formatting.

        :param text: The text of this DocumentsCreatePostRequest.
        :type text: str
        """

        self._text = text

    @property
    def collection_id(self):
        """Gets the collection_id of this DocumentsCreatePostRequest.


        :return: The collection_id of this DocumentsCreatePostRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this DocumentsCreatePostRequest.


        :param collection_id: The collection_id of this DocumentsCreatePostRequest.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def parent_document_id(self):
        """Gets the parent_document_id of this DocumentsCreatePostRequest.


        :return: The parent_document_id of this DocumentsCreatePostRequest.
        :rtype: str
        """
        return self._parent_document_id

    @parent_document_id.setter
    def parent_document_id(self, parent_document_id):
        """Sets the parent_document_id of this DocumentsCreatePostRequest.


        :param parent_document_id: The parent_document_id of this DocumentsCreatePostRequest.
        :type parent_document_id: str
        """

        self._parent_document_id = parent_document_id

    @property
    def template_id(self):
        """Gets the template_id of this DocumentsCreatePostRequest.


        :return: The template_id of this DocumentsCreatePostRequest.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this DocumentsCreatePostRequest.


        :param template_id: The template_id of this DocumentsCreatePostRequest.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def template(self):
        """Gets the template of this DocumentsCreatePostRequest.

        Whether this document should be considered to be a template.

        :return: The template of this DocumentsCreatePostRequest.
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DocumentsCreatePostRequest.

        Whether this document should be considered to be a template.

        :param template: The template of this DocumentsCreatePostRequest.
        :type template: bool
        """

        self._template = template

    @property
    def publish(self):
        """Gets the publish of this DocumentsCreatePostRequest.

        Whether this document should be immediately published and made visible to other team members.

        :return: The publish of this DocumentsCreatePostRequest.
        :rtype: bool
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this DocumentsCreatePostRequest.

        Whether this document should be immediately published and made visible to other team members.

        :param publish: The publish of this DocumentsCreatePostRequest.
        :type publish: bool
        """

        self._publish = publish
