# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class AttachmentsCreatePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, document_id: str=None, content_type: str=None, size: float=None):
        """AttachmentsCreatePostRequest - a model defined in OpenAPI

        :param name: The name of this AttachmentsCreatePostRequest.
        :param document_id: The document_id of this AttachmentsCreatePostRequest.
        :param content_type: The content_type of this AttachmentsCreatePostRequest.
        :param size: The size of this AttachmentsCreatePostRequest.
        """
        self.openapi_types = {
            'name': str,
            'document_id': str,
            'content_type': str,
            'size': float
        }

        self.attribute_map = {
            'name': 'name',
            'document_id': 'documentId',
            'content_type': 'contentType',
            'size': 'size'
        }

        self._name = name
        self._document_id = document_id
        self._content_type = content_type
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachmentsCreatePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _attachments_create_post_request of this AttachmentsCreatePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AttachmentsCreatePostRequest.


        :return: The name of this AttachmentsCreatePostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentsCreatePostRequest.


        :param name: The name of this AttachmentsCreatePostRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def document_id(self):
        """Gets the document_id of this AttachmentsCreatePostRequest.

        Identifier for the associated document, if any.

        :return: The document_id of this AttachmentsCreatePostRequest.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AttachmentsCreatePostRequest.

        Identifier for the associated document, if any.

        :param document_id: The document_id of this AttachmentsCreatePostRequest.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def content_type(self):
        """Gets the content_type of this AttachmentsCreatePostRequest.


        :return: The content_type of this AttachmentsCreatePostRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttachmentsCreatePostRequest.


        :param content_type: The content_type of this AttachmentsCreatePostRequest.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def size(self):
        """Gets the size of this AttachmentsCreatePostRequest.

        Size of the file attachment in bytes.

        :return: The size of this AttachmentsCreatePostRequest.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AttachmentsCreatePostRequest.

        Size of the file attachment in bytes.

        :param size: The size of this AttachmentsCreatePostRequest.
        :type size: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
