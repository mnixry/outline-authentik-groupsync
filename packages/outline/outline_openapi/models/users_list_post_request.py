# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.user_role import UserRole
from outline_openapi import util


class UsersListPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: float=None, limit: float=None, sort: str=None, direction: str=None, query: str=None, emails: List[str]=None, filter: str=None, role: UserRole=None):
        """UsersListPostRequest - a model defined in OpenAPI

        :param offset: The offset of this UsersListPostRequest.
        :param limit: The limit of this UsersListPostRequest.
        :param sort: The sort of this UsersListPostRequest.
        :param direction: The direction of this UsersListPostRequest.
        :param query: The query of this UsersListPostRequest.
        :param emails: The emails of this UsersListPostRequest.
        :param filter: The filter of this UsersListPostRequest.
        :param role: The role of this UsersListPostRequest.
        """
        self.openapi_types = {
            'offset': float,
            'limit': float,
            'sort': str,
            'direction': str,
            'query': str,
            'emails': List[str],
            'filter': str,
            'role': UserRole
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'sort': 'sort',
            'direction': 'direction',
            'query': 'query',
            'emails': 'emails',
            'filter': 'filter',
            'role': 'role'
        }

        self._offset = offset
        self._limit = limit
        self._sort = sort
        self._direction = direction
        self._query = query
        self._emails = emails
        self._filter = filter
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersListPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _users_list_post_request of this UsersListPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this UsersListPostRequest.


        :return: The offset of this UsersListPostRequest.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this UsersListPostRequest.


        :param offset: The offset of this UsersListPostRequest.
        :type offset: float
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this UsersListPostRequest.


        :return: The limit of this UsersListPostRequest.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this UsersListPostRequest.


        :param limit: The limit of this UsersListPostRequest.
        :type limit: float
        """

        self._limit = limit

    @property
    def sort(self):
        """Gets the sort of this UsersListPostRequest.


        :return: The sort of this UsersListPostRequest.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this UsersListPostRequest.


        :param sort: The sort of this UsersListPostRequest.
        :type sort: str
        """

        self._sort = sort

    @property
    def direction(self):
        """Gets the direction of this UsersListPostRequest.


        :return: The direction of this UsersListPostRequest.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this UsersListPostRequest.


        :param direction: The direction of this UsersListPostRequest.
        :type direction: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def query(self):
        """Gets the query of this UsersListPostRequest.


        :return: The query of this UsersListPostRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UsersListPostRequest.


        :param query: The query of this UsersListPostRequest.
        :type query: str
        """

        self._query = query

    @property
    def emails(self):
        """Gets the emails of this UsersListPostRequest.


        :return: The emails of this UsersListPostRequest.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this UsersListPostRequest.


        :param emails: The emails of this UsersListPostRequest.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def filter(self):
        """Gets the filter of this UsersListPostRequest.

        The status to filter by

        :return: The filter of this UsersListPostRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this UsersListPostRequest.

        The status to filter by

        :param filter: The filter of this UsersListPostRequest.
        :type filter: str
        """
        allowed_values = ["all", "invited", "active", "suspended"]  # noqa: E501
        if filter not in allowed_values:
            raise ValueError(
                "Invalid value for `filter` ({0}), must be one of {1}"
                .format(filter, allowed_values)
            )

        self._filter = filter

    @property
    def role(self):
        """Gets the role of this UsersListPostRequest.


        :return: The role of this UsersListPostRequest.
        :rtype: UserRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UsersListPostRequest.


        :param role: The role of this UsersListPostRequest.
        :type role: UserRole
        """

        self._role = role
