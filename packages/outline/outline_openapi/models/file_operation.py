# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.file_operation_collection import FileOperationCollection
from outline_openapi.models.user import User
from outline_openapi import util


class FileOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: str=None, state: str=None, collection: FileOperationCollection=None, user: User=None, size: float=None, created_at: datetime=None):
        """FileOperation - a model defined in OpenAPI

        :param id: The id of this FileOperation.
        :param type: The type of this FileOperation.
        :param state: The state of this FileOperation.
        :param collection: The collection of this FileOperation.
        :param user: The user of this FileOperation.
        :param size: The size of this FileOperation.
        :param created_at: The created_at of this FileOperation.
        """
        self.openapi_types = {
            'id': str,
            'type': str,
            'state': str,
            'collection': FileOperationCollection,
            'user': User,
            'size': float,
            'created_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'state': 'state',
            'collection': 'collection',
            'user': 'user',
            'size': 'size',
            'created_at': 'createdAt'
        }

        self._id = id
        self._type = type
        self._state = state
        self._collection = collection
        self._user = user
        self._size = size
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileOperation of this FileOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FileOperation.

        Unique identifier for the object.

        :return: The id of this FileOperation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileOperation.

        Unique identifier for the object.

        :param id: The id of this FileOperation.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this FileOperation.

        The type of file operation.

        :return: The type of this FileOperation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileOperation.

        The type of file operation.

        :param type: The type of this FileOperation.
        :type type: str
        """
        allowed_values = ["import", "export"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def state(self):
        """Gets the state of this FileOperation.

        The state of the file operation.

        :return: The state of this FileOperation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FileOperation.

        The state of the file operation.

        :param state: The state of this FileOperation.
        :type state: str
        """
        allowed_values = ["creating", "uploading", "complete", "error", "expired"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def collection(self):
        """Gets the collection of this FileOperation.


        :return: The collection of this FileOperation.
        :rtype: FileOperationCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this FileOperation.


        :param collection: The collection of this FileOperation.
        :type collection: FileOperationCollection
        """

        self._collection = collection

    @property
    def user(self):
        """Gets the user of this FileOperation.


        :return: The user of this FileOperation.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FileOperation.


        :param user: The user of this FileOperation.
        :type user: User
        """

        self._user = user

    @property
    def size(self):
        """Gets the size of this FileOperation.

        The size of the resulting file in bytes

        :return: The size of this FileOperation.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileOperation.

        The size of the resulting file in bytes

        :param size: The size of this FileOperation.
        :type size: float
        """

        self._size = size

    @property
    def created_at(self):
        """Gets the created_at of this FileOperation.

        The date and time that this object was created

        :return: The created_at of this FileOperation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FileOperation.

        The date and time that this object was created

        :param created_at: The created_at of this FileOperation.
        :type created_at: datetime
        """

        self._created_at = created_at
