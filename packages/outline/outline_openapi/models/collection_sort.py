# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class CollectionSort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, direction: str=None):
        """CollectionSort - a model defined in OpenAPI

        :param _field: The _field of this CollectionSort.
        :param direction: The direction of this CollectionSort.
        """
        self.openapi_types = {
            '_field': str,
            'direction': str
        }

        self.attribute_map = {
            '_field': 'field',
            'direction': 'direction'
        }

        self.__field = _field
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionSort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collection_sort of this CollectionSort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this CollectionSort.


        :return: The _field of this CollectionSort.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this CollectionSort.


        :param _field: The _field of this CollectionSort.
        :type _field: str
        """

        self.__field = _field

    @property
    def direction(self):
        """Gets the direction of this CollectionSort.


        :return: The direction of this CollectionSort.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CollectionSort.


        :param direction: The direction of this CollectionSort.
        :type direction: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction
