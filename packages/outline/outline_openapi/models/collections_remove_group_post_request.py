# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class CollectionsRemoveGroupPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, group_id: str=None):
        """CollectionsRemoveGroupPostRequest - a model defined in OpenAPI

        :param id: The id of this CollectionsRemoveGroupPostRequest.
        :param group_id: The group_id of this CollectionsRemoveGroupPostRequest.
        """
        self.openapi_types = {
            'id': str,
            'group_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'group_id': 'groupId'
        }

        self._id = id
        self._group_id = group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionsRemoveGroupPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _collections_remove_group_post_request of this CollectionsRemoveGroupPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CollectionsRemoveGroupPostRequest.

        Identifier for the collection

        :return: The id of this CollectionsRemoveGroupPostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionsRemoveGroupPostRequest.

        Identifier for the collection

        :param id: The id of this CollectionsRemoveGroupPostRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this CollectionsRemoveGroupPostRequest.


        :return: The group_id of this CollectionsRemoveGroupPostRequest.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CollectionsRemoveGroupPostRequest.


        :param group_id: The group_id of this CollectionsRemoveGroupPostRequest.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id
