# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.user import User
from outline_openapi import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, model_id: str=None, actor_id: str=None, actor_ip_address: str=None, collection_id: str=None, document_id: str=None, created_at: datetime=None, data: object=None, actor: User=None):
        """Event - a model defined in OpenAPI

        :param id: The id of this Event.
        :param name: The name of this Event.
        :param model_id: The model_id of this Event.
        :param actor_id: The actor_id of this Event.
        :param actor_ip_address: The actor_ip_address of this Event.
        :param collection_id: The collection_id of this Event.
        :param document_id: The document_id of this Event.
        :param created_at: The created_at of this Event.
        :param data: The data of this Event.
        :param actor: The actor of this Event.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'model_id': str,
            'actor_id': str,
            'actor_ip_address': str,
            'collection_id': str,
            'document_id': str,
            'created_at': datetime,
            'data': object,
            'actor': User
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'model_id': 'modelId',
            'actor_id': 'actorId',
            'actor_ip_address': 'actorIpAddress',
            'collection_id': 'collectionId',
            'document_id': 'documentId',
            'created_at': 'createdAt',
            'data': 'data',
            'actor': 'actor'
        }

        self._id = id
        self._name = name
        self._model_id = model_id
        self._actor_id = actor_id
        self._actor_ip_address = actor_ip_address
        self._collection_id = collection_id
        self._document_id = document_id
        self._created_at = created_at
        self._data = data
        self._actor = actor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Event.

        Unique identifier for the object.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        Unique identifier for the object.

        :param id: The id of this Event.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Event.


        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.


        :param name: The name of this Event.
        :type name: str
        """

        self._name = name

    @property
    def model_id(self):
        """Gets the model_id of this Event.

        Identifier for the object this event is associated with when it is not one of document, collection, or user.

        :return: The model_id of this Event.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Event.

        Identifier for the object this event is associated with when it is not one of document, collection, or user.

        :param model_id: The model_id of this Event.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def actor_id(self):
        """Gets the actor_id of this Event.

        The user that performed the action.

        :return: The actor_id of this Event.
        :rtype: str
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """Sets the actor_id of this Event.

        The user that performed the action.

        :param actor_id: The actor_id of this Event.
        :type actor_id: str
        """

        self._actor_id = actor_id

    @property
    def actor_ip_address(self):
        """Gets the actor_ip_address of this Event.

        The ip address the action was performed from. This field is only returned when the `auditLog` boolean is true.

        :return: The actor_ip_address of this Event.
        :rtype: str
        """
        return self._actor_ip_address

    @actor_ip_address.setter
    def actor_ip_address(self, actor_ip_address):
        """Sets the actor_ip_address of this Event.

        The ip address the action was performed from. This field is only returned when the `auditLog` boolean is true.

        :param actor_ip_address: The actor_ip_address of this Event.
        :type actor_ip_address: str
        """

        self._actor_ip_address = actor_ip_address

    @property
    def collection_id(self):
        """Gets the collection_id of this Event.

        Identifier for the associated collection, if any

        :return: The collection_id of this Event.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this Event.

        Identifier for the associated collection, if any

        :param collection_id: The collection_id of this Event.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def document_id(self):
        """Gets the document_id of this Event.

        Identifier for the associated document, if any

        :return: The document_id of this Event.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Event.

        Identifier for the associated document, if any

        :param document_id: The document_id of this Event.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def created_at(self):
        """Gets the created_at of this Event.

        The date and time that this event was created

        :return: The created_at of this Event.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.

        The date and time that this event was created

        :param created_at: The created_at of this Event.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this Event.

        Additional unstructured data associated with the event

        :return: The data of this Event.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Event.

        Additional unstructured data associated with the event

        :param data: The data of this Event.
        :type data: object
        """

        self._data = data

    @property
    def actor(self):
        """Gets the actor of this Event.


        :return: The actor of this Event.
        :rtype: User
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Event.


        :param actor: The actor of this Event.
        :type actor: User
        """

        self._actor = actor
