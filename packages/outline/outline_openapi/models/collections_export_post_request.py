# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class CollectionsExportPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, id: str=None):
        """CollectionsExportPostRequest - a model defined in OpenAPI

        :param format: The format of this CollectionsExportPostRequest.
        :param id: The id of this CollectionsExportPostRequest.
        """
        self.openapi_types = {
            'format': str,
            'id': str
        }

        self.attribute_map = {
            'format': 'format',
            'id': 'id'
        }

        self._format = format
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionsExportPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _collections_export_post_request of this CollectionsExportPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this CollectionsExportPostRequest.


        :return: The format of this CollectionsExportPostRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CollectionsExportPostRequest.


        :param format: The format of this CollectionsExportPostRequest.
        :type format: str
        """
        allowed_values = ["outline-markdown", "json", "html"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def id(self):
        """Gets the id of this CollectionsExportPostRequest.


        :return: The id of this CollectionsExportPostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionsExportPostRequest.


        :param id: The id of this CollectionsExportPostRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
