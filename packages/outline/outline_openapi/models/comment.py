# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.user import User
from outline_openapi import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, data: object=None, document_id: str=None, parent_comment_id: str=None, created_at: datetime=None, created_by: User=None, updated_at: datetime=None, updated_by: User=None):
        """Comment - a model defined in OpenAPI

        :param id: The id of this Comment.
        :param data: The data of this Comment.
        :param document_id: The document_id of this Comment.
        :param parent_comment_id: The parent_comment_id of this Comment.
        :param created_at: The created_at of this Comment.
        :param created_by: The created_by of this Comment.
        :param updated_at: The updated_at of this Comment.
        :param updated_by: The updated_by of this Comment.
        """
        self.openapi_types = {
            'id': str,
            'data': object,
            'document_id': str,
            'parent_comment_id': str,
            'created_at': datetime,
            'created_by': User,
            'updated_at': datetime,
            'updated_by': User
        }

        self.attribute_map = {
            'id': 'id',
            'data': 'data',
            'document_id': 'documentId',
            'parent_comment_id': 'parentCommentId',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy'
        }

        self._id = id
        self._data = data
        self._document_id = document_id
        self._parent_comment_id = parent_comment_id
        self._created_at = created_at
        self._created_by = created_by
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Comment.

        Unique identifier for the object.

        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        Unique identifier for the object.

        :param id: The id of this Comment.
        :type id: str
        """

        self._id = id

    @property
    def data(self):
        """Gets the data of this Comment.

        The editor data representing this comment.

        :return: The data of this Comment.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Comment.

        The editor data representing this comment.

        :param data: The data of this Comment.
        :type data: object
        """

        self._data = data

    @property
    def document_id(self):
        """Gets the document_id of this Comment.

        Identifier for the document this is related to.

        :return: The document_id of this Comment.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Comment.

        Identifier for the document this is related to.

        :param document_id: The document_id of this Comment.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def parent_comment_id(self):
        """Gets the parent_comment_id of this Comment.

        Identifier for the comment this is a child of, if any.

        :return: The parent_comment_id of this Comment.
        :rtype: str
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id):
        """Sets the parent_comment_id of this Comment.

        Identifier for the comment this is a child of, if any.

        :param parent_comment_id: The parent_comment_id of this Comment.
        :type parent_comment_id: str
        """

        self._parent_comment_id = parent_comment_id

    @property
    def created_at(self):
        """Gets the created_at of this Comment.

        The date and time that this object was created

        :return: The created_at of this Comment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.

        The date and time that this object was created

        :param created_at: The created_at of this Comment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Comment.


        :return: The created_by of this Comment.
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Comment.


        :param created_by: The created_by of this Comment.
        :type created_by: User
        """

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this Comment.

        The date and time that this object was last changed

        :return: The updated_at of this Comment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Comment.

        The date and time that this object was last changed

        :param updated_at: The updated_at of this Comment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Comment.


        :return: The updated_by of this Comment.
        :rtype: User
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Comment.


        :param updated_by: The updated_by of this Comment.
        :type updated_by: User
        """

        self._updated_by = updated_by
