# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class SharesUpdatePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, published: bool=None):
        """SharesUpdatePostRequest - a model defined in OpenAPI

        :param id: The id of this SharesUpdatePostRequest.
        :param published: The published of this SharesUpdatePostRequest.
        """
        self.openapi_types = {
            'id': str,
            'published': bool
        }

        self.attribute_map = {
            'id': 'id',
            'published': 'published'
        }

        self._id = id
        self._published = published

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharesUpdatePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _shares_update_post_request of this SharesUpdatePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SharesUpdatePostRequest.


        :return: The id of this SharesUpdatePostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharesUpdatePostRequest.


        :param id: The id of this SharesUpdatePostRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published(self):
        """Gets the published of this SharesUpdatePostRequest.


        :return: The published of this SharesUpdatePostRequest.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this SharesUpdatePostRequest.


        :param published: The published of this SharesUpdatePostRequest.
        :type published: bool
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published
