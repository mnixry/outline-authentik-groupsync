# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class DocumentsListPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: float=None, limit: float=None, sort: str=None, direction: str=None, collection_id: str=None, user_id: str=None, backlink_document_id: str=None, parent_document_id: str=None, template: bool=None):
        """DocumentsListPostRequest - a model defined in OpenAPI

        :param offset: The offset of this DocumentsListPostRequest.
        :param limit: The limit of this DocumentsListPostRequest.
        :param sort: The sort of this DocumentsListPostRequest.
        :param direction: The direction of this DocumentsListPostRequest.
        :param collection_id: The collection_id of this DocumentsListPostRequest.
        :param user_id: The user_id of this DocumentsListPostRequest.
        :param backlink_document_id: The backlink_document_id of this DocumentsListPostRequest.
        :param parent_document_id: The parent_document_id of this DocumentsListPostRequest.
        :param template: The template of this DocumentsListPostRequest.
        """
        self.openapi_types = {
            'offset': float,
            'limit': float,
            'sort': str,
            'direction': str,
            'collection_id': str,
            'user_id': str,
            'backlink_document_id': str,
            'parent_document_id': str,
            'template': bool
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'sort': 'sort',
            'direction': 'direction',
            'collection_id': 'collectionId',
            'user_id': 'userId',
            'backlink_document_id': 'backlinkDocumentId',
            'parent_document_id': 'parentDocumentId',
            'template': 'template'
        }

        self._offset = offset
        self._limit = limit
        self._sort = sort
        self._direction = direction
        self._collection_id = collection_id
        self._user_id = user_id
        self._backlink_document_id = backlink_document_id
        self._parent_document_id = parent_document_id
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentsListPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _documents_list_post_request of this DocumentsListPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this DocumentsListPostRequest.


        :return: The offset of this DocumentsListPostRequest.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DocumentsListPostRequest.


        :param offset: The offset of this DocumentsListPostRequest.
        :type offset: float
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this DocumentsListPostRequest.


        :return: The limit of this DocumentsListPostRequest.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DocumentsListPostRequest.


        :param limit: The limit of this DocumentsListPostRequest.
        :type limit: float
        """

        self._limit = limit

    @property
    def sort(self):
        """Gets the sort of this DocumentsListPostRequest.


        :return: The sort of this DocumentsListPostRequest.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DocumentsListPostRequest.


        :param sort: The sort of this DocumentsListPostRequest.
        :type sort: str
        """

        self._sort = sort

    @property
    def direction(self):
        """Gets the direction of this DocumentsListPostRequest.


        :return: The direction of this DocumentsListPostRequest.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this DocumentsListPostRequest.


        :param direction: The direction of this DocumentsListPostRequest.
        :type direction: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def collection_id(self):
        """Gets the collection_id of this DocumentsListPostRequest.

        Optionally filter to a specific collection

        :return: The collection_id of this DocumentsListPostRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this DocumentsListPostRequest.

        Optionally filter to a specific collection

        :param collection_id: The collection_id of this DocumentsListPostRequest.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def user_id(self):
        """Gets the user_id of this DocumentsListPostRequest.


        :return: The user_id of this DocumentsListPostRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DocumentsListPostRequest.


        :param user_id: The user_id of this DocumentsListPostRequest.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def backlink_document_id(self):
        """Gets the backlink_document_id of this DocumentsListPostRequest.


        :return: The backlink_document_id of this DocumentsListPostRequest.
        :rtype: str
        """
        return self._backlink_document_id

    @backlink_document_id.setter
    def backlink_document_id(self, backlink_document_id):
        """Sets the backlink_document_id of this DocumentsListPostRequest.


        :param backlink_document_id: The backlink_document_id of this DocumentsListPostRequest.
        :type backlink_document_id: str
        """

        self._backlink_document_id = backlink_document_id

    @property
    def parent_document_id(self):
        """Gets the parent_document_id of this DocumentsListPostRequest.


        :return: The parent_document_id of this DocumentsListPostRequest.
        :rtype: str
        """
        return self._parent_document_id

    @parent_document_id.setter
    def parent_document_id(self, parent_document_id):
        """Sets the parent_document_id of this DocumentsListPostRequest.


        :param parent_document_id: The parent_document_id of this DocumentsListPostRequest.
        :type parent_document_id: str
        """

        self._parent_document_id = parent_document_id

    @property
    def template(self):
        """Gets the template of this DocumentsListPostRequest.

        Optionally filter to only templates

        :return: The template of this DocumentsListPostRequest.
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DocumentsListPostRequest.

        Optionally filter to only templates

        :param template: The template of this DocumentsListPostRequest.
        :type template: bool
        """

        self._template = template
