# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class DocumentsUpdatePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, title: str=None, text: str=None, append: bool=None, publish: bool=None, done: bool=None):
        """DocumentsUpdatePostRequest - a model defined in OpenAPI

        :param id: The id of this DocumentsUpdatePostRequest.
        :param title: The title of this DocumentsUpdatePostRequest.
        :param text: The text of this DocumentsUpdatePostRequest.
        :param append: The append of this DocumentsUpdatePostRequest.
        :param publish: The publish of this DocumentsUpdatePostRequest.
        :param done: The done of this DocumentsUpdatePostRequest.
        """
        self.openapi_types = {
            'id': str,
            'title': str,
            'text': str,
            'append': bool,
            'publish': bool,
            'done': bool
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'text': 'text',
            'append': 'append',
            'publish': 'publish',
            'done': 'done'
        }

        self._id = id
        self._title = title
        self._text = text
        self._append = append
        self._publish = publish
        self._done = done

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentsUpdatePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _documents_update_post_request of this DocumentsUpdatePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentsUpdatePostRequest.

        Unique identifier for the document. Either the UUID or the urlId is acceptable.

        :return: The id of this DocumentsUpdatePostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentsUpdatePostRequest.

        Unique identifier for the document. Either the UUID or the urlId is acceptable.

        :param id: The id of this DocumentsUpdatePostRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """Gets the title of this DocumentsUpdatePostRequest.

        The title of the document.

        :return: The title of this DocumentsUpdatePostRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentsUpdatePostRequest.

        The title of the document.

        :param title: The title of this DocumentsUpdatePostRequest.
        :type title: str
        """

        self._title = title

    @property
    def text(self):
        """Gets the text of this DocumentsUpdatePostRequest.

        The body of the document, may contain markdown formatting.

        :return: The text of this DocumentsUpdatePostRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DocumentsUpdatePostRequest.

        The body of the document, may contain markdown formatting.

        :param text: The text of this DocumentsUpdatePostRequest.
        :type text: str
        """

        self._text = text

    @property
    def append(self):
        """Gets the append of this DocumentsUpdatePostRequest.

        If true the text field will be appended to the end of the existing document, rather than the default behavior of replacing it. This is potentially useful for things like logging into a document.

        :return: The append of this DocumentsUpdatePostRequest.
        :rtype: bool
        """
        return self._append

    @append.setter
    def append(self, append):
        """Sets the append of this DocumentsUpdatePostRequest.

        If true the text field will be appended to the end of the existing document, rather than the default behavior of replacing it. This is potentially useful for things like logging into a document.

        :param append: The append of this DocumentsUpdatePostRequest.
        :type append: bool
        """

        self._append = append

    @property
    def publish(self):
        """Gets the publish of this DocumentsUpdatePostRequest.

        Whether this document should be published and made visible to other team members, if a draft

        :return: The publish of this DocumentsUpdatePostRequest.
        :rtype: bool
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this DocumentsUpdatePostRequest.

        Whether this document should be published and made visible to other team members, if a draft

        :param publish: The publish of this DocumentsUpdatePostRequest.
        :type publish: bool
        """

        self._publish = publish

    @property
    def done(self):
        """Gets the done of this DocumentsUpdatePostRequest.

        Whether the editing session has finished, this will trigger any notifications. This property will soon be deprecated.

        :return: The done of this DocumentsUpdatePostRequest.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this DocumentsUpdatePostRequest.

        Whether the editing session has finished, this will trigger any notifications. This property will soon be deprecated.

        :param done: The done of this DocumentsUpdatePostRequest.
        :type done: bool
        """

        self._done = done
