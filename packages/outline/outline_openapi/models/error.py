# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ok: bool=None, error: str=None, message: str=None, status: float=None, data: object=None):
        """Error - a model defined in OpenAPI

        :param ok: The ok of this Error.
        :param error: The error of this Error.
        :param message: The message of this Error.
        :param status: The status of this Error.
        :param data: The data of this Error.
        """
        self.openapi_types = {
            'ok': bool,
            'error': str,
            'message': str,
            'status': float,
            'data': object
        }

        self.attribute_map = {
            'ok': 'ok',
            'error': 'error',
            'message': 'message',
            'status': 'status',
            'data': 'data'
        }

        self._ok = ok
        self._error = error
        self._message = message
        self._status = status
        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ok(self):
        """Gets the ok of this Error.


        :return: The ok of this Error.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this Error.


        :param ok: The ok of this Error.
        :type ok: bool
        """

        self._ok = ok

    @property
    def error(self):
        """Gets the error of this Error.


        :return: The error of this Error.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Error.


        :param error: The error of this Error.
        :type error: str
        """

        self._error = error

    @property
    def message(self):
        """Gets the message of this Error.


        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.


        :param message: The message of this Error.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this Error.


        :return: The status of this Error.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error.


        :param status: The status of this Error.
        :type status: float
        """

        self._status = status

    @property
    def data(self):
        """Gets the data of this Error.


        :return: The data of this Error.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Error.


        :param data: The data of this Error.
        :type data: object
        """

        self._data = data
