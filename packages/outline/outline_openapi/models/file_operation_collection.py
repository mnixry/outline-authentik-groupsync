# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.collection_sort import CollectionSort
from outline_openapi.models.permission import Permission
from outline_openapi import util


class FileOperationCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, description: str=None, sort: CollectionSort=None, index: str=None, color: str=None, icon: str=None, permission: Permission=None, created_at: datetime=None, updated_at: datetime=None, deleted_at: datetime=None):
        """FileOperationCollection - a model defined in OpenAPI

        :param id: The id of this FileOperationCollection.
        :param name: The name of this FileOperationCollection.
        :param description: The description of this FileOperationCollection.
        :param sort: The sort of this FileOperationCollection.
        :param index: The index of this FileOperationCollection.
        :param color: The color of this FileOperationCollection.
        :param icon: The icon of this FileOperationCollection.
        :param permission: The permission of this FileOperationCollection.
        :param created_at: The created_at of this FileOperationCollection.
        :param updated_at: The updated_at of this FileOperationCollection.
        :param deleted_at: The deleted_at of this FileOperationCollection.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'sort': CollectionSort,
            'index': str,
            'color': str,
            'icon': str,
            'permission': Permission,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'sort': 'sort',
            'index': 'index',
            'color': 'color',
            'icon': 'icon',
            'permission': 'permission',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'deleted_at': 'deletedAt'
        }

        self._id = id
        self._name = name
        self._description = description
        self._sort = sort
        self._index = index
        self._color = color
        self._icon = icon
        self._permission = permission
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileOperationCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileOperation_collection of this FileOperationCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FileOperationCollection.

        Unique identifier for the object.

        :return: The id of this FileOperationCollection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileOperationCollection.

        Unique identifier for the object.

        :param id: The id of this FileOperationCollection.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FileOperationCollection.

        The name of the collection.

        :return: The name of this FileOperationCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileOperationCollection.

        The name of the collection.

        :param name: The name of this FileOperationCollection.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FileOperationCollection.

        A description of the collection, may contain markdown formatting

        :return: The description of this FileOperationCollection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileOperationCollection.

        A description of the collection, may contain markdown formatting

        :param description: The description of this FileOperationCollection.
        :type description: str
        """

        self._description = description

    @property
    def sort(self):
        """Gets the sort of this FileOperationCollection.


        :return: The sort of this FileOperationCollection.
        :rtype: CollectionSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this FileOperationCollection.


        :param sort: The sort of this FileOperationCollection.
        :type sort: CollectionSort
        """

        self._sort = sort

    @property
    def index(self):
        """Gets the index of this FileOperationCollection.

        The position of the collection in the sidebar

        :return: The index of this FileOperationCollection.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this FileOperationCollection.

        The position of the collection in the sidebar

        :param index: The index of this FileOperationCollection.
        :type index: str
        """

        self._index = index

    @property
    def color(self):
        """Gets the color of this FileOperationCollection.

        A color representing the collection, this is used to help make collections more identifiable in the UI. It should be in HEX format including the #

        :return: The color of this FileOperationCollection.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this FileOperationCollection.

        A color representing the collection, this is used to help make collections more identifiable in the UI. It should be in HEX format including the #

        :param color: The color of this FileOperationCollection.
        :type color: str
        """

        self._color = color

    @property
    def icon(self):
        """Gets the icon of this FileOperationCollection.

        A string that represents an icon in the outline-icons package

        :return: The icon of this FileOperationCollection.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this FileOperationCollection.

        A string that represents an icon in the outline-icons package

        :param icon: The icon of this FileOperationCollection.
        :type icon: str
        """

        self._icon = icon

    @property
    def permission(self):
        """Gets the permission of this FileOperationCollection.


        :return: The permission of this FileOperationCollection.
        :rtype: Permission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this FileOperationCollection.


        :param permission: The permission of this FileOperationCollection.
        :type permission: Permission
        """

        self._permission = permission

    @property
    def created_at(self):
        """Gets the created_at of this FileOperationCollection.

        The date and time that this object was created

        :return: The created_at of this FileOperationCollection.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FileOperationCollection.

        The date and time that this object was created

        :param created_at: The created_at of this FileOperationCollection.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this FileOperationCollection.

        The date and time that this object was last changed

        :return: The updated_at of this FileOperationCollection.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FileOperationCollection.

        The date and time that this object was last changed

        :param updated_at: The updated_at of this FileOperationCollection.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this FileOperationCollection.

        The date and time that this object was deleted

        :return: The deleted_at of this FileOperationCollection.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this FileOperationCollection.

        The date and time that this object was deleted

        :param deleted_at: The deleted_at of this FileOperationCollection.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at
