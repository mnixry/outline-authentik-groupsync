# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class PolicyAbilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create: bool=None, read: bool=None, update: bool=None, delete: bool=None, restore: bool=None, star: bool=None, unstar: bool=None, share: bool=None, download: bool=None, pin: bool=None, unpin: bool=None, move: bool=None, archive: bool=None, unarchive: bool=None, create_child_document: bool=None):
        """PolicyAbilities - a model defined in OpenAPI

        :param create: The create of this PolicyAbilities.
        :param read: The read of this PolicyAbilities.
        :param update: The update of this PolicyAbilities.
        :param delete: The delete of this PolicyAbilities.
        :param restore: The restore of this PolicyAbilities.
        :param star: The star of this PolicyAbilities.
        :param unstar: The unstar of this PolicyAbilities.
        :param share: The share of this PolicyAbilities.
        :param download: The download of this PolicyAbilities.
        :param pin: The pin of this PolicyAbilities.
        :param unpin: The unpin of this PolicyAbilities.
        :param move: The move of this PolicyAbilities.
        :param archive: The archive of this PolicyAbilities.
        :param unarchive: The unarchive of this PolicyAbilities.
        :param create_child_document: The create_child_document of this PolicyAbilities.
        """
        self.openapi_types = {
            'create': bool,
            'read': bool,
            'update': bool,
            'delete': bool,
            'restore': bool,
            'star': bool,
            'unstar': bool,
            'share': bool,
            'download': bool,
            'pin': bool,
            'unpin': bool,
            'move': bool,
            'archive': bool,
            'unarchive': bool,
            'create_child_document': bool
        }

        self.attribute_map = {
            'create': 'create',
            'read': 'read',
            'update': 'update',
            'delete': 'delete',
            'restore': 'restore',
            'star': 'star',
            'unstar': 'unstar',
            'share': 'share',
            'download': 'download',
            'pin': 'pin',
            'unpin': 'unpin',
            'move': 'move',
            'archive': 'archive',
            'unarchive': 'unarchive',
            'create_child_document': 'createChildDocument'
        }

        self._create = create
        self._read = read
        self._update = update
        self._delete = delete
        self._restore = restore
        self._star = star
        self._unstar = unstar
        self._share = share
        self._download = download
        self._pin = pin
        self._unpin = unpin
        self._move = move
        self._archive = archive
        self._unarchive = unarchive
        self._create_child_document = create_child_document

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyAbilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policy_abilities of this PolicyAbilities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create(self):
        """Gets the create of this PolicyAbilities.


        :return: The create of this PolicyAbilities.
        :rtype: bool
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this PolicyAbilities.


        :param create: The create of this PolicyAbilities.
        :type create: bool
        """

        self._create = create

    @property
    def read(self):
        """Gets the read of this PolicyAbilities.


        :return: The read of this PolicyAbilities.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this PolicyAbilities.


        :param read: The read of this PolicyAbilities.
        :type read: bool
        """

        self._read = read

    @property
    def update(self):
        """Gets the update of this PolicyAbilities.


        :return: The update of this PolicyAbilities.
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this PolicyAbilities.


        :param update: The update of this PolicyAbilities.
        :type update: bool
        """

        self._update = update

    @property
    def delete(self):
        """Gets the delete of this PolicyAbilities.


        :return: The delete of this PolicyAbilities.
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this PolicyAbilities.


        :param delete: The delete of this PolicyAbilities.
        :type delete: bool
        """

        self._delete = delete

    @property
    def restore(self):
        """Gets the restore of this PolicyAbilities.


        :return: The restore of this PolicyAbilities.
        :rtype: bool
        """
        return self._restore

    @restore.setter
    def restore(self, restore):
        """Sets the restore of this PolicyAbilities.


        :param restore: The restore of this PolicyAbilities.
        :type restore: bool
        """

        self._restore = restore

    @property
    def star(self):
        """Gets the star of this PolicyAbilities.


        :return: The star of this PolicyAbilities.
        :rtype: bool
        """
        return self._star

    @star.setter
    def star(self, star):
        """Sets the star of this PolicyAbilities.


        :param star: The star of this PolicyAbilities.
        :type star: bool
        """

        self._star = star

    @property
    def unstar(self):
        """Gets the unstar of this PolicyAbilities.


        :return: The unstar of this PolicyAbilities.
        :rtype: bool
        """
        return self._unstar

    @unstar.setter
    def unstar(self, unstar):
        """Sets the unstar of this PolicyAbilities.


        :param unstar: The unstar of this PolicyAbilities.
        :type unstar: bool
        """

        self._unstar = unstar

    @property
    def share(self):
        """Gets the share of this PolicyAbilities.


        :return: The share of this PolicyAbilities.
        :rtype: bool
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this PolicyAbilities.


        :param share: The share of this PolicyAbilities.
        :type share: bool
        """

        self._share = share

    @property
    def download(self):
        """Gets the download of this PolicyAbilities.


        :return: The download of this PolicyAbilities.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this PolicyAbilities.


        :param download: The download of this PolicyAbilities.
        :type download: bool
        """

        self._download = download

    @property
    def pin(self):
        """Gets the pin of this PolicyAbilities.


        :return: The pin of this PolicyAbilities.
        :rtype: bool
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this PolicyAbilities.


        :param pin: The pin of this PolicyAbilities.
        :type pin: bool
        """

        self._pin = pin

    @property
    def unpin(self):
        """Gets the unpin of this PolicyAbilities.


        :return: The unpin of this PolicyAbilities.
        :rtype: bool
        """
        return self._unpin

    @unpin.setter
    def unpin(self, unpin):
        """Sets the unpin of this PolicyAbilities.


        :param unpin: The unpin of this PolicyAbilities.
        :type unpin: bool
        """

        self._unpin = unpin

    @property
    def move(self):
        """Gets the move of this PolicyAbilities.


        :return: The move of this PolicyAbilities.
        :rtype: bool
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this PolicyAbilities.


        :param move: The move of this PolicyAbilities.
        :type move: bool
        """

        self._move = move

    @property
    def archive(self):
        """Gets the archive of this PolicyAbilities.


        :return: The archive of this PolicyAbilities.
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this PolicyAbilities.


        :param archive: The archive of this PolicyAbilities.
        :type archive: bool
        """

        self._archive = archive

    @property
    def unarchive(self):
        """Gets the unarchive of this PolicyAbilities.


        :return: The unarchive of this PolicyAbilities.
        :rtype: bool
        """
        return self._unarchive

    @unarchive.setter
    def unarchive(self, unarchive):
        """Sets the unarchive of this PolicyAbilities.


        :param unarchive: The unarchive of this PolicyAbilities.
        :type unarchive: bool
        """

        self._unarchive = unarchive

    @property
    def create_child_document(self):
        """Gets the create_child_document of this PolicyAbilities.


        :return: The create_child_document of this PolicyAbilities.
        :rtype: bool
        """
        return self._create_child_document

    @create_child_document.setter
    def create_child_document(self, create_child_document):
        """Sets the create_child_document of this PolicyAbilities.


        :param create_child_document: The create_child_document of this PolicyAbilities.
        :type create_child_document: bool
        """

        self._create_child_document = create_child_document
