# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.user_role import UserRole
from outline_openapi import util


class Team(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, avatar_url: str=None, sharing: bool=None, default_collection_id: str=None, default_user_role: UserRole=None, member_collection_create: bool=None, document_embeds: bool=None, collaborative_editing: bool=None, invite_required: bool=None, allowed_domains: List[str]=None, guest_signin: bool=None, subdomain: str=None, url: str=None):
        """Team - a model defined in OpenAPI

        :param id: The id of this Team.
        :param name: The name of this Team.
        :param avatar_url: The avatar_url of this Team.
        :param sharing: The sharing of this Team.
        :param default_collection_id: The default_collection_id of this Team.
        :param default_user_role: The default_user_role of this Team.
        :param member_collection_create: The member_collection_create of this Team.
        :param document_embeds: The document_embeds of this Team.
        :param collaborative_editing: The collaborative_editing of this Team.
        :param invite_required: The invite_required of this Team.
        :param allowed_domains: The allowed_domains of this Team.
        :param guest_signin: The guest_signin of this Team.
        :param subdomain: The subdomain of this Team.
        :param url: The url of this Team.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'avatar_url': str,
            'sharing': bool,
            'default_collection_id': str,
            'default_user_role': UserRole,
            'member_collection_create': bool,
            'document_embeds': bool,
            'collaborative_editing': bool,
            'invite_required': bool,
            'allowed_domains': List[str],
            'guest_signin': bool,
            'subdomain': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'avatar_url': 'avatarUrl',
            'sharing': 'sharing',
            'default_collection_id': 'defaultCollectionId',
            'default_user_role': 'defaultUserRole',
            'member_collection_create': 'memberCollectionCreate',
            'document_embeds': 'documentEmbeds',
            'collaborative_editing': 'collaborativeEditing',
            'invite_required': 'inviteRequired',
            'allowed_domains': 'allowedDomains',
            'guest_signin': 'guestSignin',
            'subdomain': 'subdomain',
            'url': 'url'
        }

        self._id = id
        self._name = name
        self._avatar_url = avatar_url
        self._sharing = sharing
        self._default_collection_id = default_collection_id
        self._default_user_role = default_user_role
        self._member_collection_create = member_collection_create
        self._document_embeds = document_embeds
        self._collaborative_editing = collaborative_editing
        self._invite_required = invite_required
        self._allowed_domains = allowed_domains
        self._guest_signin = guest_signin
        self._subdomain = subdomain
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Team of this Team.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Team.

        Unique identifier for the object.

        :return: The id of this Team.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.

        Unique identifier for the object.

        :param id: The id of this Team.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Team.

        The name of this team, it is usually auto-generated when the first SSO connection is made but can be changed if neccessary.

        :return: The name of this Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        The name of this team, it is usually auto-generated when the first SSO connection is made but can be changed if neccessary.

        :param name: The name of this Team.
        :type name: str
        """

        self._name = name

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Team.

        The URL for the image associated with this team, it will be displayed in the team switcher and in the top left of the knowledge base along with the name.

        :return: The avatar_url of this Team.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Team.

        The URL for the image associated with this team, it will be displayed in the team switcher and in the top left of the knowledge base along with the name.

        :param avatar_url: The avatar_url of this Team.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def sharing(self):
        """Gets the sharing of this Team.

        Whether this team has share links globally enabled. If this value is false then all sharing UI and APIs are disabled.

        :return: The sharing of this Team.
        :rtype: bool
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing):
        """Sets the sharing of this Team.

        Whether this team has share links globally enabled. If this value is false then all sharing UI and APIs are disabled.

        :param sharing: The sharing of this Team.
        :type sharing: bool
        """

        self._sharing = sharing

    @property
    def default_collection_id(self):
        """Gets the default_collection_id of this Team.

        If set then the referenced collection is where users will be redirected to after signing in instead of the Home screen

        :return: The default_collection_id of this Team.
        :rtype: str
        """
        return self._default_collection_id

    @default_collection_id.setter
    def default_collection_id(self, default_collection_id):
        """Sets the default_collection_id of this Team.

        If set then the referenced collection is where users will be redirected to after signing in instead of the Home screen

        :param default_collection_id: The default_collection_id of this Team.
        :type default_collection_id: str
        """

        self._default_collection_id = default_collection_id

    @property
    def default_user_role(self):
        """Gets the default_user_role of this Team.


        :return: The default_user_role of this Team.
        :rtype: UserRole
        """
        return self._default_user_role

    @default_user_role.setter
    def default_user_role(self, default_user_role):
        """Sets the default_user_role of this Team.


        :param default_user_role: The default_user_role of this Team.
        :type default_user_role: UserRole
        """

        self._default_user_role = default_user_role

    @property
    def member_collection_create(self):
        """Gets the member_collection_create of this Team.

        Whether members are allowed to create new collections. If false then only admins can create collections.

        :return: The member_collection_create of this Team.
        :rtype: bool
        """
        return self._member_collection_create

    @member_collection_create.setter
    def member_collection_create(self, member_collection_create):
        """Sets the member_collection_create of this Team.

        Whether members are allowed to create new collections. If false then only admins can create collections.

        :param member_collection_create: The member_collection_create of this Team.
        :type member_collection_create: bool
        """

        self._member_collection_create = member_collection_create

    @property
    def document_embeds(self):
        """Gets the document_embeds of this Team.

        Whether this team has embeds in documents globally enabled. It can be disabled to reduce potential data leakage to third parties.

        :return: The document_embeds of this Team.
        :rtype: bool
        """
        return self._document_embeds

    @document_embeds.setter
    def document_embeds(self, document_embeds):
        """Sets the document_embeds of this Team.

        Whether this team has embeds in documents globally enabled. It can be disabled to reduce potential data leakage to third parties.

        :param document_embeds: The document_embeds of this Team.
        :type document_embeds: bool
        """

        self._document_embeds = document_embeds

    @property
    def collaborative_editing(self):
        """Gets the collaborative_editing of this Team.

        Whether this team has collaborative editing in documents globally enabled.

        :return: The collaborative_editing of this Team.
        :rtype: bool
        """
        return self._collaborative_editing

    @collaborative_editing.setter
    def collaborative_editing(self, collaborative_editing):
        """Sets the collaborative_editing of this Team.

        Whether this team has collaborative editing in documents globally enabled.

        :param collaborative_editing: The collaborative_editing of this Team.
        :type collaborative_editing: bool
        """

        self._collaborative_editing = collaborative_editing

    @property
    def invite_required(self):
        """Gets the invite_required of this Team.

        Whether an invite is required to join this team, if false users may join with a linked SSO provider.

        :return: The invite_required of this Team.
        :rtype: bool
        """
        return self._invite_required

    @invite_required.setter
    def invite_required(self, invite_required):
        """Sets the invite_required of this Team.

        Whether an invite is required to join this team, if false users may join with a linked SSO provider.

        :param invite_required: The invite_required of this Team.
        :type invite_required: bool
        """

        self._invite_required = invite_required

    @property
    def allowed_domains(self):
        """Gets the allowed_domains of this Team.


        :return: The allowed_domains of this Team.
        :rtype: List[str]
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains):
        """Sets the allowed_domains of this Team.


        :param allowed_domains: The allowed_domains of this Team.
        :type allowed_domains: List[str]
        """

        self._allowed_domains = allowed_domains

    @property
    def guest_signin(self):
        """Gets the guest_signin of this Team.

        Whether this team has guest signin enabled. Guests can signin with an email address and are not required to have a Google Workspace/Slack SSO account once invited.

        :return: The guest_signin of this Team.
        :rtype: bool
        """
        return self._guest_signin

    @guest_signin.setter
    def guest_signin(self, guest_signin):
        """Sets the guest_signin of this Team.

        Whether this team has guest signin enabled. Guests can signin with an email address and are not required to have a Google Workspace/Slack SSO account once invited.

        :param guest_signin: The guest_signin of this Team.
        :type guest_signin: bool
        """

        self._guest_signin = guest_signin

    @property
    def subdomain(self):
        """Gets the subdomain of this Team.

        Represents the subdomain at which this team's knowledge base can be accessed.

        :return: The subdomain of this Team.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this Team.

        Represents the subdomain at which this team's knowledge base can be accessed.

        :param subdomain: The subdomain of this Team.
        :type subdomain: str
        """

        self._subdomain = subdomain

    @property
    def url(self):
        """Gets the url of this Team.

        The fully qualified URL at which this team's knowledge base can be accessed.

        :return: The url of this Team.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Team.

        The fully qualified URL at which this team's knowledge base can be accessed.

        :param url: The url of this Team.
        :type url: str
        """

        self._url = url
