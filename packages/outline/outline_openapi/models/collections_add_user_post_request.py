# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi.models.permission import Permission
from outline_openapi import util


class CollectionsAddUserPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, user_id: str=None, permission: Permission=None):
        """CollectionsAddUserPostRequest - a model defined in OpenAPI

        :param id: The id of this CollectionsAddUserPostRequest.
        :param user_id: The user_id of this CollectionsAddUserPostRequest.
        :param permission: The permission of this CollectionsAddUserPostRequest.
        """
        self.openapi_types = {
            'id': str,
            'user_id': str,
            'permission': Permission
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'userId',
            'permission': 'permission'
        }

        self._id = id
        self._user_id = user_id
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionsAddUserPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _collections_add_user_post_request of this CollectionsAddUserPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CollectionsAddUserPostRequest.


        :return: The id of this CollectionsAddUserPostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionsAddUserPostRequest.


        :param id: The id of this CollectionsAddUserPostRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this CollectionsAddUserPostRequest.


        :return: The user_id of this CollectionsAddUserPostRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CollectionsAddUserPostRequest.


        :param user_id: The user_id of this CollectionsAddUserPostRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def permission(self):
        """Gets the permission of this CollectionsAddUserPostRequest.


        :return: The permission of this CollectionsAddUserPostRequest.
        :rtype: Permission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this CollectionsAddUserPostRequest.


        :param permission: The permission of this CollectionsAddUserPostRequest.
        :type permission: Permission
        """

        self._permission = permission
