# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from outline_openapi.models.base_model import Model
from outline_openapi import util


class DocumentsMembershipsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, query: str=None):
        """DocumentsMembershipsPostRequest - a model defined in OpenAPI

        :param id: The id of this DocumentsMembershipsPostRequest.
        :param query: The query of this DocumentsMembershipsPostRequest.
        """
        self.openapi_types = {
            'id': str,
            'query': str
        }

        self.attribute_map = {
            'id': 'id',
            'query': 'query'
        }

        self._id = id
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentsMembershipsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _documents_memberships_post_request of this DocumentsMembershipsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentsMembershipsPostRequest.

        Unique identifier for the document. Either the UUID or the urlId is acceptable.

        :return: The id of this DocumentsMembershipsPostRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentsMembershipsPostRequest.

        Unique identifier for the document. Either the UUID or the urlId is acceptable.

        :param id: The id of this DocumentsMembershipsPostRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def query(self):
        """Gets the query of this DocumentsMembershipsPostRequest.

        If set, will filter the results by user name

        :return: The query of this DocumentsMembershipsPostRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DocumentsMembershipsPostRequest.

        If set, will filter the results by user name

        :param query: The query of this DocumentsMembershipsPostRequest.
        :type query: str
        """

        self._query = query
